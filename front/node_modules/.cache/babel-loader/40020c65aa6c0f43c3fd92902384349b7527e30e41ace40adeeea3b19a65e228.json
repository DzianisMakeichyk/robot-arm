{"ast":null,"code":"var _jsxFileName = \"/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { GizmoHelper, GizmoViewport, OrbitControls, Environment, Stats, PerspectiveCamera } from '@react-three/drei';\nimport { Shadows, Ground } from '@components/stage';\nimport socketIOClient from 'socket.io-client';\nimport { RobotArm } from \"@components/model/RobotArm\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SOCKET_SERVER_URL = 'http://localhost:4000';\nexport default function App() {\n  _s();\n  const [robotData, setRobotData] = useState();\n  const [socket, setSocket] = useState(null);\n  useEffect(() => {\n    // Initialize socket connection\n    const newSocket = socketIOClient(SOCKET_SERVER_URL, {\n      withCredentials: true,\n      transports: ['websocket', 'polling']\n    });\n\n    // Set socket in state\n    setSocket(newSocket);\n\n    // Clean up on component unmount\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n  useEffect(() => {\n    if (!socket) return;\n\n    // Request initial state\n    if (!robotData) {\n      socket.emit(\"state:get\");\n    }\n\n    // Listen for state updates\n    socket.on(\"state\", data => {\n      setRobotData(data);\n    });\n    return () => {\n      socket.off(\"state\");\n    };\n  }, [socket, robotData]);\n  const updateRobotData = useCallback(newData => {\n    if (!socket) return;\n    setRobotData(prevData => {\n      if (prevData) {\n        const updatedData = {\n          ...prevData,\n          ...newData\n        };\n        socket.emit(\"state:update\", updatedData);\n        return updatedData;\n      }\n      return prevData;\n    });\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: robotData && /*#__PURE__*/_jsxDEV(Canvas, {\n      children: [/*#__PURE__*/_jsxDEV(PerspectiveCamera, {\n        makeDefault: true,\n        fov: 40,\n        position: [10, 8, 25]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(RobotArm, {\n        data: robotData,\n        onUpdate: updateRobotData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Shadows, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Ground, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Environment, {\n        preset: \"city\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n        makeDefault: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(GizmoHelper, {\n        alignment: \"bottom-right\",\n        margin: [100, 100],\n        children: /*#__PURE__*/_jsxDEV(GizmoViewport, {\n          labelColor: \"white\",\n          axisHeadScale: 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Stats, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n}\n_s(App, \"W7dPXgoIik16gyqF07s2LIi1pSA=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Canvas","GizmoHelper","GizmoViewport","OrbitControls","Environment","Stats","PerspectiveCamera","Shadows","Ground","socketIOClient","RobotArm","jsxDEV","_jsxDEV","Fragment","_Fragment","SOCKET_SERVER_URL","App","_s","robotData","setRobotData","socket","setSocket","newSocket","withCredentials","transports","close","emit","on","data","off","updateRobotData","newData","prevData","updatedData","children","makeDefault","fov","position","fileName","_jsxFileName","lineNumber","columnNumber","onUpdate","preset","alignment","margin","labelColor","axisHeadScale","_c","$RefreshReg$"],"sources":["/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/App.tsx"],"sourcesContent":["import React, {useState, useEffect, useCallback} from 'react'\nimport {Canvas} from '@react-three/fiber'\nimport {GizmoHelper, GizmoViewport, OrbitControls, Environment, Stats, PerspectiveCamera} from '@react-three/drei'\nimport {Shadows, Ground} from '@components/stage'\nimport socketIOClient from 'socket.io-client'\nimport {Robot} from '@types'\nimport {RobotArm} from \"@components/model/RobotArm\"\n\nconst SOCKET_SERVER_URL = 'http://localhost:4000';\n\nexport default function App() {\n    const [robotData, setRobotData] = useState<Robot.RobotNodes>()\n    const [socket, setSocket] = useState<any>(null);\n\n    useEffect(() => {\n        // Initialize socket connection\n        const newSocket = socketIOClient(SOCKET_SERVER_URL, {\n            withCredentials: true,\n            transports: ['websocket', 'polling']\n        });\n\n        // Set socket in state\n        setSocket(newSocket);\n\n        // Clean up on component unmount\n        return () => {\n            newSocket.close();\n        };\n    }, []);\n\n    useEffect(() => {\n        if (!socket) return;\n\n        // Request initial state\n        if (!robotData) {\n            socket.emit(\"state:get\");\n        }\n\n        // Listen for state updates\n        socket.on(\"state\", (data: Robot.RobotNodes) => {\n            setRobotData(data);\n        });\n\n        return () => {\n            socket.off(\"state\");\n        };\n    }, [socket, robotData]);\n\n    const updateRobotData = useCallback((newData: Partial<Robot.RobotNodes>) => {\n        if (!socket) return;\n\n        setRobotData(prevData => {\n            if (prevData) {\n                const updatedData = {...prevData, ...newData};\n                socket.emit(\"state:update\", updatedData);\n                return updatedData;\n            }\n            return prevData;\n        });\n    }, [socket]);\n\n    return (\n        <>\n            {robotData &&\n                <Canvas>\n                    <PerspectiveCamera makeDefault fov={40} position={[10, 8, 25]}/>\n                    <RobotArm data={robotData} onUpdate={updateRobotData}/>\n                    <Shadows/>\n                    <Ground/>\n                    <Environment preset=\"city\"/>\n                    <OrbitControls makeDefault/>\n                    <GizmoHelper alignment=\"bottom-right\" margin={[100, 100]}>\n                        <GizmoViewport labelColor=\"white\" axisHeadScale={1}/>\n                    </GizmoHelper>\n                    <Stats/>\n                </Canvas>\n            }\n        </>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}