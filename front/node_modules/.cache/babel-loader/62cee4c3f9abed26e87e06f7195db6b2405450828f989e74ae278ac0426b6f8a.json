{"ast":null,"code":"var _jsxFileName = \"/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/components/model/RobotArm.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Gizmo } from '@components/gizmo';\nimport { useGLTF } from '@react-three/drei';\nimport { Robot } from '@types';\nimport Mesh from \"@components/mesh/Mesh\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const RobotArm = ({\n  data,\n  onUpdate\n}) => {\n  _s();\n  const {\n    nodes\n  } = useGLTF('/robot.glb');\n  const node = Robot.NodeName;\n  const handleGizmoUpdate = (nodeName, newRotation) => {\n    console.log(`RobotArm: Updating ${nodeName} rotation:`, newRotation);\n\n    // Maintain hierarchical rotations\n    let updatedNodes = {\n      ...data.nodes\n    };\n    if (nodeName === node.mainColumn) {\n      // When main column rotates, update upper_arm and wrist relative positions\n      updatedNodes = {\n        ...updatedNodes,\n        [nodeName]: {\n          ...updatedNodes[nodeName],\n          rotation: newRotation\n        },\n        [node.upperArm]: {\n          ...updatedNodes[node.upperArm],\n          rotation: updatedNodes[node.upperArm].rotation\n        },\n        [node.wristExtension]: {\n          ...updatedNodes[node.wristExtension],\n          rotation: updatedNodes[node.wristExtension].rotation\n        }\n      };\n    } else {\n      // For other parts, just update their own rotation\n      updatedNodes[nodeName] = {\n        ...updatedNodes[nodeName],\n        rotation: newRotation\n      };\n    }\n    const newData = {\n      nodes: updatedNodes\n    };\n    console.log('RobotArm: Sending update:', newData);\n    onUpdate(newData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: /*#__PURE__*/_jsxDEV(Gizmo, {\n      scale: 5,\n      disableTranslation: true,\n      activeAxes: [true, false, true],\n      userData: [node.mainColumn],\n      onUpdate: rotation => handleGizmoUpdate(node.mainColumn, rotation),\n      children: [/*#__PURE__*/_jsxDEV(Mesh, {\n        node: nodes[node.mainColumn],\n        data: data.nodes[node.mainColumn]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Gizmo, {\n        activeAxes: [false, true, false],\n        translationLimits: [undefined, [-1, .8], undefined],\n        disableRotation: false,\n        anchor: [-0.8, 1.5, 0],\n        scale: 1,\n        userData: [node.upperArm],\n        onUpdate: rotation => handleGizmoUpdate(node.upperArm, rotation),\n        children: [/*#__PURE__*/_jsxDEV(Mesh, {\n          node: nodes[node.upperArm],\n          data: data.nodes[node.upperArm]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Mesh, {\n          node: nodes[node.wristExtension],\n          data: data.nodes[node.wristExtension]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Mesh, {\n          node: nodes[node.hand],\n          data: {\n            ...data.nodes[node.hand],\n            rotation: [0, 1.5708, 0] // Fixed rotation for hand\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Gizmo, {\n          activeAxes: [false, false, true],\n          translationLimits: [undefined, undefined, [0, 0.4]],\n          anchor: [2, 0, 2],\n          scale: 0.75,\n          userData: [node.gripper],\n          onUpdate: rotation => handleGizmoUpdate(node.gripper, rotation),\n          children: /*#__PURE__*/_jsxDEV(Mesh, {\n            node: nodes[node.gripper],\n            data: {\n              ...data.nodes[node.gripper],\n              rotation: [0, 1.5708, 0] // Fixed rotation for gripper\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n_s(RobotArm, \"32KrL5kPiaeJAX40F9P63Xol6XY=\", false, function () {\n  return [useGLTF];\n});\n_c = RobotArm;\nuseGLTF.preload('/robot.glb');\nvar _c;\n$RefreshReg$(_c, \"RobotArm\");","map":{"version":3,"names":["React","Gizmo","useGLTF","Robot","Mesh","jsxDEV","_jsxDEV","RobotArm","data","onUpdate","_s","nodes","node","NodeName","handleGizmoUpdate","nodeName","newRotation","console","log","updatedNodes","mainColumn","rotation","upperArm","wristExtension","newData","children","scale","disableTranslation","activeAxes","userData","fileName","_jsxFileName","lineNumber","columnNumber","translationLimits","undefined","disableRotation","anchor","hand","gripper","_c","preload","$RefreshReg$"],"sources":["/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/components/model/RobotArm.tsx"],"sourcesContent":["import React from 'react'\nimport {Gizmo} from '@components/gizmo'\nimport {useGLTF} from '@react-three/drei'\nimport {Robot} from '@types'\nimport Mesh from \"@components/mesh/Mesh\"\n\ninterface RobotProps {\n    data: Robot.RobotNodes;\n    onUpdate: (newData: Partial<Robot.RobotNodes>) => void;\n}\n\nexport const RobotArm = ({data, onUpdate}: RobotProps) => {\n    const {nodes} = useGLTF('/robot.glb') as unknown as Robot.DreiGLTF;\n    const node = Robot.NodeName;\n\n    const handleGizmoUpdate = (nodeName: Robot.NodeName, newRotation: [number, number, number]) => {\n        console.log(`RobotArm: Updating ${nodeName} rotation:`, newRotation);\n        \n        // Maintain hierarchical rotations\n        let updatedNodes = { ...data.nodes };\n        \n        if (nodeName === node.mainColumn) {\n            // When main column rotates, update upper_arm and wrist relative positions\n            updatedNodes = {\n                ...updatedNodes,\n                [nodeName]: {\n                    ...updatedNodes[nodeName],\n                    rotation: newRotation\n                },\n                [node.upperArm]: {\n                    ...updatedNodes[node.upperArm],\n                    rotation: updatedNodes[node.upperArm].rotation\n                },\n                [node.wristExtension]: {\n                    ...updatedNodes[node.wristExtension],\n                    rotation: updatedNodes[node.wristExtension].rotation\n                }\n            };\n        } else {\n            // For other parts, just update their own rotation\n            updatedNodes[nodeName] = {\n                ...updatedNodes[nodeName],\n                rotation: newRotation\n            };\n        }\n\n        const newData: Partial<Robot.RobotNodes> = {\n            nodes: updatedNodes\n        };\n\n        console.log('RobotArm: Sending update:', newData);\n        onUpdate(newData);\n    };\n\n    return (\n        <group>\n            <Gizmo \n                scale={5}\n                disableTranslation\n                activeAxes={[true, false, true]}\n                userData={[node.mainColumn]}\n                onUpdate={(rotation) => handleGizmoUpdate(node.mainColumn, rotation)}>\n                <Mesh node={nodes[node.mainColumn]} data={data.nodes[node.mainColumn]}/>\n\n                <Gizmo \n                    activeAxes={[false, true, false]}\n                    translationLimits={[undefined, [-1, .8], undefined]}\n                    disableRotation={false}\n                    anchor={[-0.8, 1.5, 0]}\n                    scale={1}\n                    userData={[node.upperArm]}\n                    onUpdate={(rotation) => handleGizmoUpdate(node.upperArm, rotation)}>\n                    <Mesh node={nodes[node.upperArm]} data={data.nodes[node.upperArm]}/>\n                    <Mesh node={nodes[node.wristExtension]} data={data.nodes[node.wristExtension]}/>\n                    <Mesh \n                        node={nodes[node.hand]} \n                        data={{\n                            ...data.nodes[node.hand],\n                            rotation: [0, 1.5708, 0]  // Fixed rotation for hand\n                        }}\n                    />\n\n                    <Gizmo \n                        activeAxes={[false, false, true]}\n                        translationLimits={[undefined, undefined, [0, 0.4]]}\n                        anchor={[2, 0, 2]}\n                        scale={0.75}\n                        userData={[node.gripper]}\n                        onUpdate={(rotation) => handleGizmoUpdate(node.gripper, rotation)}>\n                        <Mesh \n                            node={nodes[node.gripper]} \n                            data={{\n                                ...data.nodes[node.gripper],\n                                rotation: [0, 1.5708, 0]  // Fixed rotation for gripper\n                            }}\n                        />\n                    </Gizmo>\n                </Gizmo>\n            </Gizmo>\n        </group>\n    );\n};\n\nuseGLTF.preload('/robot.glb');"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}