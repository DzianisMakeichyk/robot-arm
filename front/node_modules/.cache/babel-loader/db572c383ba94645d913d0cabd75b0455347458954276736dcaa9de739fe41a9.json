{"ast":null,"code":"var _jsxFileName = \"/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/components/model/RobotArm.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Gizmo } from '@components/gizmo';\nimport { useGLTF } from '@react-three/drei';\nimport { Robot } from '@types';\nimport Mesh from \"@components/mesh/Mesh\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const RobotArm = ({\n  data,\n  onUpdate\n}) => {\n  _s();\n  const {\n    nodes\n  } = useGLTF('/robot.glb');\n  const node = Robot.NodeName;\n  const handleGizmoUpdate = (nodeName, newMatrix) => {\n    console.log(`Updating ${nodeName}:`, newMatrix);\n\n    // Create new state with all existing data\n    const newData = {\n      nodes: {\n        ...data.nodes\n      }\n    };\n\n    // Handle main column rotation with child updates\n    if (nodeName === node.mainColumn) {\n      newData.nodes[node.mainColumn] = {\n        ...data.nodes[node.mainColumn],\n        rotation: newMatrix\n      };\n\n      // Update child rotations based on parent rotation\n      const parentRotation = newMatrix[1]; // Y-axis rotation\n\n      newData.nodes[node.upperArm] = {\n        ...data.nodes[node.upperArm],\n        rotation: data.nodes[node.upperArm].rotation || [],\n        position: [2.335 * Math.cos(parentRotation), 0, 2.335 * Math.sin(parentRotation)]\n      };\n      newData.nodes[node.wristExtension] = {\n        ...data.nodes[node.wristExtension],\n        rotation: data.nodes[node.wristExtension].rotation || [],\n        position: [3.231 * Math.cos(parentRotation), 6.551, 3.231 * Math.sin(parentRotation)]\n      };\n    } else {\n      // For other components, just update their own rotation\n      newData.nodes[nodeName] = {\n        ...data.nodes[nodeName],\n        rotation: newMatrix\n      };\n    }\n\n    // Preserve fixed rotations for hand and gripper\n    newData.nodes[node.hand].rotation = data.nodes.hand.rotation;\n    newData.nodes[node.gripper].rotation = data.nodes.gripper.rotation;\n    console.log('Sending update:', newData);\n    onUpdate(newData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: /*#__PURE__*/_jsxDEV(Gizmo, {\n      scale: 5,\n      disableTranslation: true,\n      activeAxes: [true, false, true],\n      userData: [node.mainColumn],\n      onUpdate: newMatrix => handleGizmoUpdate(node.mainColumn, newMatrix),\n      children: [/*#__PURE__*/_jsxDEV(Mesh, {\n        node: nodes[node.mainColumn],\n        data: data.nodes[node.mainColumn]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Gizmo, {\n        activeAxes: [false, true, false],\n        translationLimits: [undefined, [-1, .8], undefined],\n        disableRotation: true,\n        anchor: [-0.8, 1.5, 0],\n        scale: 1,\n        userData: [node.upperArm],\n        onUpdate: newMatrix => handleGizmoUpdate(node.upperArm, newMatrix),\n        children: [/*#__PURE__*/_jsxDEV(Mesh, {\n          node: nodes[node.upperArm],\n          data: data.nodes[node.upperArm]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Mesh, {\n          node: nodes[node.wristExtension],\n          data: data.nodes[node.wristExtension]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Mesh, {\n          node: nodes[node.hand],\n          data: data.nodes[node.hand]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Gizmo, {\n          activeAxes: [false, false, true],\n          translationLimits: [undefined, undefined, [0, 0.4]],\n          anchor: [2, 0, 2],\n          scale: 0.75,\n          userData: [node.gripper],\n          onUpdate: newMatrix => handleGizmoUpdate(node.gripper, newMatrix),\n          children: /*#__PURE__*/_jsxDEV(Mesh, {\n            node: nodes[node.gripper],\n            data: data.nodes[node.gripper]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n_s(RobotArm, \"32KrL5kPiaeJAX40F9P63Xol6XY=\", false, function () {\n  return [useGLTF];\n});\n_c = RobotArm;\nuseGLTF.preload('/robot.glb');\nvar _c;\n$RefreshReg$(_c, \"RobotArm\");","map":{"version":3,"names":["React","Gizmo","useGLTF","Robot","Mesh","jsxDEV","_jsxDEV","RobotArm","data","onUpdate","_s","nodes","node","NodeName","handleGizmoUpdate","nodeName","newMatrix","console","log","newData","mainColumn","rotation","parentRotation","upperArm","position","Math","cos","sin","wristExtension","hand","gripper","children","scale","disableTranslation","activeAxes","userData","fileName","_jsxFileName","lineNumber","columnNumber","translationLimits","undefined","disableRotation","anchor","_c","preload","$RefreshReg$"],"sources":["/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/components/model/RobotArm.tsx"],"sourcesContent":["import React from 'react'\nimport {Gizmo} from '@components/gizmo'\nimport {useGLTF} from '@react-three/drei'\nimport {Robot} from '@types'\nimport Mesh from \"@components/mesh/Mesh\"\n\ninterface RobotProps {\n    data: Robot.RobotNodes;\n    onUpdate: (newData: Partial<Robot.RobotNodes>) => void;\n}\n\nexport const RobotArm = ({data, onUpdate}: RobotProps) => {\n    const {nodes} = useGLTF('/robot.glb') as unknown as Robot.DreiGLTF;\n    const node = Robot.NodeName;\n\n    const handleGizmoUpdate = (nodeName: Robot.NodeName, newMatrix: [number, number, number]) => {\n        console.log(`Updating ${nodeName}:`, newMatrix);\n        \n        // Create new state with all existing data\n        const newData: any = {\n            nodes: { ...data.nodes }\n        };\n\n        // Handle main column rotation with child updates\n        if (nodeName === node.mainColumn) {\n            newData.nodes[node.mainColumn] = {\n                ...data.nodes[node.mainColumn],\n                rotation: newMatrix\n            };\n\n            // Update child rotations based on parent rotation\n            const parentRotation = newMatrix[1]; // Y-axis rotation\n\n            newData.nodes[node.upperArm] = {\n                ...data.nodes[node.upperArm],\n                rotation: data.nodes[node.upperArm].rotation || [],\n                position: [\n                    2.335 * Math.cos(parentRotation),\n                    0,\n                    2.335 * Math.sin(parentRotation)\n                ]\n            };\n\n            newData.nodes[node.wristExtension] = {\n                ...data.nodes[node.wristExtension],\n                rotation: data.nodes[node.wristExtension].rotation || [],\n                position: [\n                    3.231 * Math.cos(parentRotation),\n                    6.551,\n                    3.231 * Math.sin(parentRotation)\n                ]\n            };\n        } else {\n            // For other components, just update their own rotation\n            newData.nodes[nodeName] = {\n                ...data.nodes[nodeName],\n                rotation: newMatrix\n            };\n        }\n\n        // Preserve fixed rotations for hand and gripper\n        newData.nodes[node.hand].rotation = data.nodes.hand.rotation;\n        newData.nodes[node.gripper].rotation = data.nodes.gripper.rotation;\n\n        console.log('Sending update:', newData);\n        onUpdate(newData);\n    };\n\n    return (\n        <group>\n            <Gizmo scale={5}\n                   disableTranslation\n                   activeAxes={[true, false, true]}\n                   userData={[node.mainColumn]}\n                   onUpdate={(newMatrix) => handleGizmoUpdate(node.mainColumn, newMatrix)}>\n                <Mesh node={nodes[node.mainColumn]} data={data.nodes[node.mainColumn]}/>\n\n                <Gizmo activeAxes={[false, true, false]}\n                       translationLimits={[undefined, [-1, .8], undefined]}\n                       disableRotation\n                       anchor={[-0.8, 1.5, 0]}\n                       scale={1}\n                       userData={[node.upperArm]}\n                       onUpdate={(newMatrix) => handleGizmoUpdate(node.upperArm, newMatrix)}>\n                    <Mesh node={nodes[node.upperArm]} data={data.nodes[node.upperArm]}/>\n\n                    <Mesh node={nodes[node.wristExtension]} data={data.nodes[node.wristExtension]}/>\n                    <Mesh node={nodes[node.hand]} data={data.nodes[node.hand]}/>\n\n                    <Gizmo activeAxes={[false, false, true]}\n                           translationLimits={[undefined, undefined, [0, 0.4]]}\n                           anchor={[2, 0, 2]}\n                           scale={0.75}\n                           userData={[node.gripper]}\n                           onUpdate={(newMatrix) => handleGizmoUpdate(node.gripper, newMatrix)}>\n                        <Mesh node={nodes[node.gripper]} data={data.nodes[node.gripper]}/>\n                    </Gizmo>\n                </Gizmo>\n            </Gizmo>\n        </group>\n    );\n};\n\nuseGLTF.preload('/robot.glb');"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}