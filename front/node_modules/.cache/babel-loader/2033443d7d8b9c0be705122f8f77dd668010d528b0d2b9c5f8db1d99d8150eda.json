{"ast":null,"code":"var _jsxFileName = \"/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/components/model/RobotArm.tsx\";\n// @ts-nocheck\nimport { Gizmo } from '@components/gizmo';\nimport { useGLTF } from '@react-three/drei';\nimport { Robot } from '@types';\nimport Mesh from \"@components/mesh/Mesh\";\nimport { useState } from 'react';\nimport { Euler } from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const RobotArm = ({\n  data,\n  onUpdate\n}) => {\n  const {\n    nodes\n  } = useGLTF('/robot.glb');\n  const node = Robot.NodeName;\n  const [startRotation, setStartRotation] = useState({});\n  const [startPosition, setStartPosition] = useState({});\n  const [currentPositions, setCurrentPositions] = useState({});\n  const [visualState, setVisualState] = useState(data);\n  const [currentRotations, setCurrentRotations] = useState({\n    [node.mainColumn]: [0, 0, 0],\n    [node.upperArm]: [0, 0, 0],\n    [node.gripper]: [0, 0, 0]\n  });\n  const SCALE_FACTORS = {\n    [node.mainColumn]: 4,\n    [node.upperArm]: 180,\n    // Zwiększony współczynnik dla upperArm\n    [node.gripper]: 180 // Taki sam współczynnik dla grippera\n  };\n  const handleGizmoUpdate = (nodeName, transform) => {\n    if (nodeName === node.upperArm) {\n      const height = transform.position[1];\n      setCurrentPositions(prev => ({\n        ...prev,\n        [nodeName]: height\n      }));\n      // Aktualizuj tylko wizualizację\n      setVisualState(prev => ({\n        ...prev,\n        nodes: {\n          ...prev.nodes,\n          [nodeName]: {\n            ...prev.nodes[nodeName],\n            position: [prev.nodes[nodeName].position[0], height, prev.nodes[nodeName].position[2]]\n          }\n        }\n      }));\n      console.log(`Current height for ${nodeName}:`, height);\n    } else if (nodeName === node.gripper) {\n      const position = transform.position[2];\n      setCurrentPositions(prev => ({\n        ...prev,\n        [nodeName]: position\n      }));\n      // Aktualizuj tylko wizualizację\n      setVisualState(prev => ({\n        ...prev,\n        nodes: {\n          ...prev.nodes,\n          [nodeName]: {\n            ...prev.nodes[nodeName],\n            position: [prev.nodes[nodeName].position[0], prev.nodes[nodeName].position[1], position]\n          }\n        }\n      }));\n      console.log(`Current position for ${nodeName}:`, position);\n    } else {\n      setCurrentRotations(prev => ({\n        ...prev,\n        [nodeName]: transform.rotation\n      }));\n      // Aktualizuj tylko wizualizację\n      setVisualState(prev => ({\n        ...prev,\n        nodes: {\n          ...prev.nodes,\n          [nodeName]: {\n            ...prev.nodes[nodeName],\n            rotation: transform.rotation\n          }\n        }\n      }));\n    }\n  };\n  const handleDragStart = (nodeName, transform) => {\n    if (nodeName === node.upperArm) {\n      setStartPosition(prev => ({\n        ...prev,\n        [nodeName]: transform.position[1]\n      }));\n      setCurrentPositions(prev => ({\n        ...prev,\n        [nodeName]: transform.position[1]\n      }));\n      console.log(`Start height for ${nodeName}:`, transform.position[1]);\n    } else if (nodeName === node.gripper) {\n      setStartPosition(prev => ({\n        ...prev,\n        [nodeName]: transform.position[2]\n      }));\n      setCurrentPositions(prev => ({\n        ...prev,\n        [nodeName]: transform.position[2]\n      }));\n      console.log(`Start position for ${nodeName}:`, transform.position[2]);\n    } else {\n      const euler = new Euler().fromArray(transform.rotation);\n      const degrees = euler.y * 180 / Math.PI;\n      setStartRotation(prev => ({\n        ...prev,\n        [nodeName]: degrees\n      }));\n      console.log(`Start rotation for ${nodeName}:`, degrees);\n    }\n  };\n  const handleDragEnd = nodeName => {\n    const newData = {\n      nodes: JSON.parse(JSON.stringify(data.nodes))\n    };\n    if (nodeName === node.upperArm) {\n      const currentHeight = currentPositions[nodeName] || 0;\n      const initialHeight = startPosition[nodeName] || 0;\n      const heightChange = currentHeight - initialHeight;\n      const angleChange = heightChange * SCALE_FACTORS[nodeName] * -1;\n      newData.nodes[nodeName] = {\n        ...newData.nodes[nodeName],\n        rotationDegrees: angleChange,\n        _updated: true\n      };\n    } else if (nodeName === node.gripper) {\n      const currentPosition = currentPositions[nodeName] || 0;\n      const initialPosition = startPosition[nodeName] || 0;\n      const positionChange = currentPosition - initialPosition;\n      const angleChange = positionChange * SCALE_FACTORS[nodeName] * -1;\n      newData.nodes[nodeName] = {\n        ...newData.nodes[nodeName],\n        rotationDegrees: angleChange,\n        _updated: true\n      };\n    } else if (nodeName === node.mainColumn) {\n      const euler = new Euler().fromArray(currentRotations[nodeName]);\n      const endDegrees = euler.y * 180 / Math.PI;\n      let totalRotation = endDegrees - (startRotation[nodeName] || 0);\n      totalRotation *= SCALE_FACTORS[nodeName];\n      newData.nodes[nodeName] = {\n        ...newData.nodes[nodeName],\n        rotationDegrees: totalRotation,\n        _updated: true\n      };\n    }\n    Object.keys(data.nodes).forEach(key => {\n      if (key !== nodeName) {\n        newData.nodes[key] = {\n          ...newData.nodes[key],\n          _updated: false\n        };\n      }\n    });\n    onUpdate(newData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: /*#__PURE__*/_jsxDEV(Gizmo, {\n      scale: 5,\n      disableTranslation: true,\n      activeAxes: [true, false, true],\n      userData: [node.mainColumn],\n      onDragStart: () => handleDragStart(node.mainColumn, {\n        position: visualState.nodes[node.mainColumn].position,\n        rotation: currentRotations[node.mainColumn]\n      }),\n      onDragEnd: () => handleDragEnd(node.mainColumn),\n      onUpdate: transform => handleGizmoUpdate(node.mainColumn, transform),\n      children: [/*#__PURE__*/_jsxDEV(Mesh, {\n        node: nodes[node.mainColumn],\n        data: visualState.nodes[node.mainColumn]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Gizmo, {\n        activeAxes: [false, true, false],\n        translationLimits: [undefined, [-1, .8], undefined],\n        disableRotation: true,\n        anchor: [-0.8, 1.5, 0],\n        scale: 1,\n        userData: [node.upperArm],\n        onDragStart: () => handleDragStart(node.upperArm, {\n          position: visualState.nodes[node.upperArm].position,\n          rotation: [0, 0, 0]\n        }),\n        onDragEnd: () => handleDragEnd(node.upperArm),\n        onUpdate: transform => handleGizmoUpdate(node.upperArm, transform),\n        children: [/*#__PURE__*/_jsxDEV(Mesh, {\n          node: nodes[node.upperArm],\n          data: visualState.nodes[node.upperArm]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Mesh, {\n          node: nodes[node.wristExtension],\n          data: visualState.nodes[node.wristExtension]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Mesh, {\n          node: nodes[node.hand],\n          data: visualState.nodes[node.hand]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Gizmo, {\n          activeAxes: [false, false, true],\n          translationLimits: [undefined, undefined, [0, 0.4]],\n          anchor: [2, 0, 2],\n          scale: 0.75,\n          userData: [node.gripper],\n          onDragStart: () => handleDragStart(node.gripper, {\n            position: visualState.nodes[node.gripper].position,\n            rotation: [0, 0, 0]\n          }),\n          onDragEnd: () => handleDragEnd(node.gripper),\n          onUpdate: transform => handleGizmoUpdate(node.gripper, transform),\n          children: /*#__PURE__*/_jsxDEV(Mesh, {\n            node: nodes[node.gripper],\n            data: visualState.nodes[node.gripper]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 9\n  }, this);\n};\nuseGLTF.preload('/robot.glb');","map":{"version":3,"names":["Gizmo","useGLTF","Robot","Mesh","useState","Euler","jsxDEV","_jsxDEV","RobotArm","data","onUpdate","nodes","node","NodeName","startRotation","setStartRotation","startPosition","setStartPosition","currentPositions","setCurrentPositions","visualState","setVisualState","currentRotations","setCurrentRotations","mainColumn","upperArm","gripper","SCALE_FACTORS","handleGizmoUpdate","nodeName","transform","height","position","prev","console","log","rotation","handleDragStart","euler","fromArray","degrees","y","Math","PI","handleDragEnd","newData","JSON","parse","stringify","currentHeight","initialHeight","heightChange","angleChange","rotationDegrees","_updated","currentPosition","initialPosition","positionChange","endDegrees","totalRotation","Object","keys","forEach","key","children","scale","disableTranslation","activeAxes","userData","onDragStart","onDragEnd","fileName","_jsxFileName","lineNumber","columnNumber","translationLimits","undefined","disableRotation","anchor","wristExtension","hand","preload"],"sources":["/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/components/model/RobotArm.tsx"],"sourcesContent":["// @ts-nocheck\nimport {Gizmo} from '@components/gizmo'\nimport {useGLTF} from '@react-three/drei'\nimport {Robot} from '@types'\nimport Mesh from \"@components/mesh/Mesh\"\nimport { useState } from 'react';\nimport { Euler } from 'three';\n\ninterface RobotProps {\n    data: Robot.RobotNodes;\n    onUpdate: (newData: Partial<Robot.RobotNodes>) => void;\n}\n\nexport const RobotArm = ({data, onUpdate}: RobotProps) => {\n    const {nodes} = useGLTF('/robot.glb') as unknown as Robot.DreiGLTF;\n    const node = Robot.NodeName;\n    const [startRotation, setStartRotation] = useState<{[key: string]: number}>({});\n    const [startPosition, setStartPosition] = useState<{[key: string]: number}>({});\n    const [currentPositions, setCurrentPositions] = useState<{[key: string]: number}>({});\n    const [visualState, setVisualState] = useState<Robot.RobotNodes>(data);\n    const [currentRotations, setCurrentRotations] = useState<{[key: string]: [number, number, number]}>({\n        [node.mainColumn]: [0,0,0],\n        [node.upperArm]: [0,0,0],\n        [node.gripper]: [0,0,0]\n    });\n\n    const SCALE_FACTORS = {\n        [node.mainColumn]: 4,\n        [node.upperArm]: 180,  // Zwiększony współczynnik dla upperArm\n        [node.gripper]: 180    // Taki sam współczynnik dla grippera\n    };\n    \n    const handleGizmoUpdate = (nodeName: Robot.NodeName, transform: { position: [number, number, number], rotation: [number, number, number] }) => {\n        if (nodeName === node.upperArm) {\n            const height = transform.position[1];\n            setCurrentPositions(prev => ({\n                ...prev,\n                [nodeName]: height\n            }));\n            // Aktualizuj tylko wizualizację\n            setVisualState(prev => ({\n                ...prev,\n                nodes: {\n                    ...prev.nodes,\n                    [nodeName]: {\n                        ...prev.nodes[nodeName],\n                        position: [prev.nodes[nodeName].position[0], height, prev.nodes[nodeName].position[2]]\n                    }\n                }\n            }));\n            console.log(`Current height for ${nodeName}:`, height);\n        } else if (nodeName === node.gripper) {\n            const position = transform.position[2];\n            setCurrentPositions(prev => ({\n                ...prev,\n                [nodeName]: position\n            }));\n            // Aktualizuj tylko wizualizację\n            setVisualState(prev => ({\n                ...prev,\n                nodes: {\n                    ...prev.nodes,\n                    [nodeName]: {\n                        ...prev.nodes[nodeName],\n                        position: [prev.nodes[nodeName].position[0], prev.nodes[nodeName].position[1], position]\n                    }\n                }\n            }));\n            console.log(`Current position for ${nodeName}:`, position);\n        } else {\n            setCurrentRotations(prev => ({\n                ...prev,\n                [nodeName]: transform.rotation\n            }));\n            // Aktualizuj tylko wizualizację\n            setVisualState(prev => ({\n                ...prev,\n                nodes: {\n                    ...prev.nodes,\n                    [nodeName]: {\n                        ...prev.nodes[nodeName],\n                        rotation: transform.rotation\n                    }\n                }\n            }));\n        }\n    };\n\n    const handleDragStart = (nodeName: Robot.NodeName, transform: { position: [number, number, number], rotation: [number, number, number] }) => {\n        if (nodeName === node.upperArm) {\n            setStartPosition(prev => ({\n                ...prev,\n                [nodeName]: transform.position[1]\n            }));\n            setCurrentPositions(prev => ({\n                ...prev,\n                [nodeName]: transform.position[1]\n            }));\n            console.log(`Start height for ${nodeName}:`, transform.position[1]);\n        } else if (nodeName === node.gripper) {\n            setStartPosition(prev => ({\n                ...prev,\n                [nodeName]: transform.position[2]\n            }));\n            setCurrentPositions(prev => ({\n                ...prev,\n                [nodeName]: transform.position[2]\n            }));\n            console.log(`Start position for ${nodeName}:`, transform.position[2]);\n        } else {\n            const euler = new Euler().fromArray(transform.rotation);\n            const degrees = (euler.y * 180) / Math.PI;\n            setStartRotation(prev => ({\n                ...prev,\n                [nodeName]: degrees\n            }));\n            console.log(`Start rotation for ${nodeName}:`, degrees);\n        }\n    };\n\n    const handleDragEnd = (nodeName: Robot.NodeName) => {\n        const newData: Partial<Robot.RobotNodes> = {\n            nodes: JSON.parse(JSON.stringify(data.nodes))\n        };\n\n        if (nodeName === node.upperArm) {\n            const currentHeight = currentPositions[nodeName] || 0;\n            const initialHeight = startPosition[nodeName] || 0;\n            const heightChange = currentHeight - initialHeight;\n            const angleChange = heightChange * SCALE_FACTORS[nodeName] * -1;\n\n            newData.nodes[nodeName] = {\n                ...newData.nodes[nodeName],\n                rotationDegrees: angleChange,\n                _updated: true\n            };\n        } \n        \n        else if (nodeName === node.gripper) {\n            const currentPosition = currentPositions[nodeName] || 0;\n            const initialPosition = startPosition[nodeName] || 0;\n            const positionChange = currentPosition - initialPosition;\n            const angleChange = positionChange * SCALE_FACTORS[nodeName] * -1;\n\n            newData.nodes[nodeName] = {\n                ...newData.nodes[nodeName],\n                rotationDegrees: angleChange,\n                _updated: true\n            };\n        } \n        \n        else if (nodeName === node.mainColumn) {\n            const euler = new Euler().fromArray(currentRotations[nodeName]);\n            const endDegrees = (euler.y * 180) / Math.PI;\n            let totalRotation = endDegrees - (startRotation[nodeName] || 0);\n            totalRotation *= SCALE_FACTORS[nodeName];\n\n            newData.nodes[nodeName] = {\n                ...newData.nodes[nodeName],\n                rotationDegrees: totalRotation,\n                _updated: true\n            };\n        }\n\n        Object.keys(data.nodes).forEach((key) => {\n            if (key !== nodeName) {\n                newData.nodes[key] = {\n                    ...newData.nodes[key],\n                    _updated: false\n                };\n            }\n        });\n\n        onUpdate(newData);\n    };\n\n    return (\n        <group>\n            <Gizmo scale={5}\n                   disableTranslation\n                   activeAxes={[true, false, true]}\n                   userData={[node.mainColumn]}\n                   onDragStart={() => handleDragStart(node.mainColumn, {position: visualState.nodes[node.mainColumn].position, rotation: currentRotations[node.mainColumn]})}\n                   onDragEnd={() => handleDragEnd(node.mainColumn)}\n                   onUpdate={(transform) => handleGizmoUpdate(node.mainColumn, transform)}>\n                <Mesh node={nodes[node.mainColumn]} data={visualState.nodes[node.mainColumn]}/>\n\n                <Gizmo activeAxes={[false, true, false]}\n                       translationLimits={[undefined, [-1, .8], undefined]}\n                       disableRotation\n                       anchor={[-0.8, 1.5, 0]}\n                       scale={1}\n                       userData={[node.upperArm]}\n                       onDragStart={() => handleDragStart(node.upperArm, {position: visualState.nodes[node.upperArm].position, rotation: [0,0,0]})}\n                       onDragEnd={() => handleDragEnd(node.upperArm)}\n                       onUpdate={(transform) => handleGizmoUpdate(node.upperArm, transform)}>\n                    <Mesh node={nodes[node.upperArm]} data={visualState.nodes[node.upperArm]}/>\n                    <Mesh node={nodes[node.wristExtension]} data={visualState.nodes[node.wristExtension]}/>\n                    <Mesh node={nodes[node.hand]} data={visualState.nodes[node.hand]}/>\n\n                    <Gizmo activeAxes={[false, false, true]}\n                           translationLimits={[undefined, undefined, [0, 0.4]]}\n                           anchor={[2, 0, 2]}\n                           scale={0.75}\n                           userData={[node.gripper]}\n                           onDragStart={() => handleDragStart(node.gripper, {position: visualState.nodes[node.gripper].position, rotation: [0,0,0]})}\n                           onDragEnd={() => handleDragEnd(node.gripper)}\n                           onUpdate={(transform) => handleGizmoUpdate(node.gripper, transform)}>\n                        <Mesh node={nodes[node.gripper]} data={visualState.nodes[node.gripper]}/>\n                    </Gizmo>\n                </Gizmo>\n            </Gizmo>\n        </group>\n    );\n};\n\nuseGLTF.preload('/robot.glb');"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}