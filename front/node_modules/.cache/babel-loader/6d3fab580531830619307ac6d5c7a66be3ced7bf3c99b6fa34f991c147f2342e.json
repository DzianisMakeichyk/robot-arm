{"ast":null,"code":"var _jsxFileName = \"/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/components/model/RobotArm.tsx\";\nimport { Gizmo } from '@components/gizmo';\nimport { useGLTF } from '@react-three/drei';\nimport { Robot } from '@types';\nimport Mesh from \"@components/mesh/Mesh\";\nimport { useState } from 'react';\nimport { Euler } from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const RobotArm = ({\n  data,\n  onUpdate\n}) => {\n  const {\n    nodes\n  } = useGLTF('/robot.glb');\n  const node = Robot.NodeName;\n  const [startRotation, setStartRotation] = useState({});\n  const [startPosition, setStartPosition] = useState({});\n  const [currentRotations, setCurrentRotations] = useState({\n    [node.mainColumn]: [0, 0, 0],\n    [node.upperArm]: [0, 0, 0],\n    [node.gripper]: [0, 0, 0]\n  });\n  const handleGizmoUpdate = (nodeName, newRotation) => {\n    setCurrentRotations(prev => ({\n      ...prev,\n      [nodeName]: newRotation\n    }));\n    if (nodeName === node.upperArm) {\n      // Dla upperArm śledzimy pozycję Y\n      // @ts-ignore\n      const position = data.nodes[nodeName].position[1];\n      console.log(`Current height for ${nodeName}:`, position);\n    } else {\n      // Dla pozostałych śledzimy rotację\n      const euler = new Euler().fromArray(newRotation);\n      const currentDegrees = euler.y * 180 / Math.PI;\n      console.log(`Current rotation for ${nodeName}:`, currentDegrees);\n    }\n  };\n  const handleDragStart = (nodeName, rotation) => {\n    if (nodeName === node.upperArm) {\n      // Zapisz początkową wysokość dla upperArm\n      // @ts-ignore\n      const position = data.nodes[nodeName].position[1];\n      setStartPosition(prev => ({\n        ...prev,\n        [nodeName]: position\n      }));\n      console.log(`Start height for ${nodeName}:`, position);\n    } else {\n      // Dla pozostałych zapisz początkową rotację\n      const euler = new Euler().fromArray(rotation);\n      const degrees = euler.y * 180 / Math.PI;\n      setStartRotation(prev => ({\n        ...prev,\n        [nodeName]: degrees\n      }));\n      console.log(`Start rotation for ${nodeName}:`, degrees);\n    }\n  };\n  const handleDragEnd = nodeName => {\n    let totalChange;\n    if (nodeName === node.upperArm) {\n      // Dla upperArm oblicz zmianę wysokości i przekonwertuj na kąt\n      // @ts-ignore\n      const endPosition = data.nodes[nodeName].position[1];\n      const positionChange = endPosition - (startPosition[nodeName] || 0);\n      // Przekonwertuj zmianę wysokości na kąt (przykładowe przeliczenie)\n      totalChange = positionChange * 90; // Dostosuj mnożnik według potrzeb\n      console.log(`Height change for ${nodeName}:`, positionChange);\n      console.log(`Converted to angle:`, totalChange);\n    } else {\n      // Dla pozostałych oblicz zmianę rotacji\n      const euler = new Euler().fromArray(currentRotations[nodeName]);\n      const endDegrees = euler.y * 180 / Math.PI;\n      totalChange = endDegrees - (startRotation[nodeName] || 0);\n      if (nodeName === node.mainColumn) {\n        totalChange *= 4;\n      }\n    }\n    const newData = {\n      nodes: {\n        ...data.nodes,\n        [nodeName]: {\n          ...data.nodes[nodeName],\n          position: data.nodes[nodeName].position,\n          scale: data.nodes[nodeName].scale,\n          rotation: currentRotations[nodeName],\n          rotationDegrees: totalChange,\n          _updated: true\n        }\n      }\n    };\n    Object.keys(newData.nodes || {}).forEach(key => {\n      // @ts-ignore\n      if (key !== nodeName && newData.nodes && newData.nodes[key]) {\n        // @ts-ignore\n        newData.nodes[key]._updated = false;\n      }\n    });\n    console.log(`Sending change to robot for ${nodeName}:`, totalChange);\n    onUpdate(newData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: /*#__PURE__*/_jsxDEV(Gizmo, {\n      scale: 5,\n      disableTranslation: true,\n      activeAxes: [true, false, true],\n      userData: [node.mainColumn],\n      onUpdate: newMatrix => handleGizmoUpdate(node.mainColumn, newMatrix),\n      onDragStart: () => handleDragStart(node.mainColumn, currentRotations[node.mainColumn]),\n      onDragEnd: () => handleDragEnd(node.mainColumn),\n      children: [/*#__PURE__*/_jsxDEV(Mesh, {\n        node: nodes[node.mainColumn],\n        data: data.nodes[node.mainColumn]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Gizmo, {\n        activeAxes: [false, true, false],\n        translationLimits: [undefined, [-1, .8], undefined],\n        anchor: [-0.8, 1.5, 0],\n        scale: 1,\n        userData: [node.upperArm],\n        onUpdate: newMatrix => handleGizmoUpdate(node.upperArm, newMatrix),\n        onDragStart: () => handleDragStart(node.upperArm, currentRotations[node.upperArm]),\n        onDragEnd: () => handleDragEnd(node.upperArm),\n        children: [/*#__PURE__*/_jsxDEV(Mesh, {\n          node: nodes[node.upperArm],\n          data: data.nodes[node.upperArm]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Mesh, {\n          node: nodes[node.wristExtension],\n          data: data.nodes[node.wristExtension]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Mesh, {\n          node: nodes[node.hand],\n          data: data.nodes[node.hand]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Gizmo, {\n          activeAxes: [false, false, true],\n          translationLimits: [undefined, undefined, [0, 0.4]],\n          anchor: [2, 0, 2],\n          scale: 0.75,\n          userData: [node.gripper],\n          onUpdate: newMatrix => handleGizmoUpdate(node.gripper, newMatrix),\n          onDragStart: () => handleDragStart(node.gripper, currentRotations[node.gripper]),\n          onDragEnd: () => handleDragEnd(node.gripper),\n          children: /*#__PURE__*/_jsxDEV(Mesh, {\n            node: nodes[node.gripper],\n            data: data.nodes[node.gripper]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n};\nuseGLTF.preload('/robot.glb');","map":{"version":3,"names":["Gizmo","useGLTF","Robot","Mesh","useState","Euler","jsxDEV","_jsxDEV","RobotArm","data","onUpdate","nodes","node","NodeName","startRotation","setStartRotation","startPosition","setStartPosition","currentRotations","setCurrentRotations","mainColumn","upperArm","gripper","handleGizmoUpdate","nodeName","newRotation","prev","position","console","log","euler","fromArray","currentDegrees","y","Math","PI","handleDragStart","rotation","degrees","handleDragEnd","totalChange","endPosition","positionChange","endDegrees","newData","scale","rotationDegrees","_updated","Object","keys","forEach","key","children","disableTranslation","activeAxes","userData","newMatrix","onDragStart","onDragEnd","fileName","_jsxFileName","lineNumber","columnNumber","translationLimits","undefined","anchor","wristExtension","hand","preload"],"sources":["/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/components/model/RobotArm.tsx"],"sourcesContent":["import {Gizmo} from '@components/gizmo'\nimport {useGLTF} from '@react-three/drei'\nimport {Robot} from '@types'\nimport Mesh from \"@components/mesh/Mesh\"\nimport { useState } from 'react';\nimport { Euler } from 'three';\n\ninterface RobotProps {\n    data: Robot.RobotNodes;\n    onUpdate: (newData: Partial<Robot.RobotNodes>) => void;\n}\n\nexport const RobotArm = ({data, onUpdate}: RobotProps) => {\n    const {nodes} = useGLTF('/robot.glb') as unknown as Robot.DreiGLTF;\n    const node = Robot.NodeName;\n    const [startRotation, setStartRotation] = useState<{[key: string]: number}>({});\n    const [startPosition, setStartPosition] = useState<{[key: string]: number}>({});\n    const [currentRotations, setCurrentRotations] = useState<{[key: string]: [number, number, number]}>({\n        [node.mainColumn]: [0,0,0],\n        [node.upperArm]: [0,0,0],\n        [node.gripper]: [0,0,0]\n    });\n    \n    const handleGizmoUpdate = (nodeName: Robot.NodeName, newRotation: [number, number, number]) => {\n        setCurrentRotations(prev => ({\n            ...prev,\n            [nodeName]: newRotation\n        }));\n\n        if (nodeName === node.upperArm) {\n            // Dla upperArm śledzimy pozycję Y\n            // @ts-ignore\n            const position = data.nodes[nodeName].position[1];\n            console.log(`Current height for ${nodeName}:`, position);\n        } else {\n            // Dla pozostałych śledzimy rotację\n            const euler = new Euler().fromArray(newRotation);\n            const currentDegrees = (euler.y * 180) / Math.PI;\n            console.log(`Current rotation for ${nodeName}:`, currentDegrees);\n        }\n    };\n\n    const handleDragStart = (nodeName: Robot.NodeName, rotation: [number, number, number]) => {\n        if (nodeName === node.upperArm) {\n            // Zapisz początkową wysokość dla upperArm\n            // @ts-ignore\n            const position = data.nodes[nodeName].position[1];\n            setStartPosition(prev => ({\n                ...prev,\n                [nodeName]: position\n            }));\n            console.log(`Start height for ${nodeName}:`, position);\n        } else {\n            // Dla pozostałych zapisz początkową rotację\n            const euler = new Euler().fromArray(rotation);\n            const degrees = (euler.y * 180) / Math.PI;\n            setStartRotation(prev => ({\n                ...prev,\n                [nodeName]: degrees\n            }));\n            console.log(`Start rotation for ${nodeName}:`, degrees);\n        }\n    };\n\n    const handleDragEnd = (nodeName: Robot.NodeName) => {\n        let totalChange;\n\n        if (nodeName === node.upperArm) {\n            // Dla upperArm oblicz zmianę wysokości i przekonwertuj na kąt\n            // @ts-ignore\n            const endPosition = data.nodes[nodeName].position[1];\n            const positionChange = endPosition - (startPosition[nodeName] || 0);\n            // Przekonwertuj zmianę wysokości na kąt (przykładowe przeliczenie)\n            totalChange = positionChange * 90; // Dostosuj mnożnik według potrzeb\n            console.log(`Height change for ${nodeName}:`, positionChange);\n            console.log(`Converted to angle:`, totalChange);\n        } else {\n            // Dla pozostałych oblicz zmianę rotacji\n            const euler = new Euler().fromArray(currentRotations[nodeName]);\n            const endDegrees = (euler.y * 180) / Math.PI;\n            totalChange = endDegrees - (startRotation[nodeName] || 0);\n            \n            if (nodeName === node.mainColumn) {\n                totalChange *= 4;\n            }\n        }\n\n        const newData: Partial<Robot.RobotNodes> = {\n            nodes: {\n                ...data.nodes,\n                [nodeName]: {\n                    ...data.nodes[nodeName],\n                    position: data.nodes[nodeName].position,\n                    scale: data.nodes[nodeName].scale,\n                    rotation: currentRotations[nodeName],\n                    rotationDegrees: totalChange,\n                    _updated: true\n                }\n            }\n        };\n\n        Object.keys(newData.nodes || {}).forEach((key) => {\n            // @ts-ignore\n            if (key !== nodeName && newData.nodes && newData.nodes[key]) {\n                // @ts-ignore\n                newData.nodes[key]._updated = false;\n            }\n        });\n\n        console.log(`Sending change to robot for ${nodeName}:`, totalChange);\n        onUpdate(newData);\n    };\n\n\n    return (\n        <group>\n            <Gizmo scale={5}\n                   disableTranslation\n                   activeAxes={[true, false, true]}\n                   userData={[node.mainColumn]}\n                   onUpdate={(newMatrix) => handleGizmoUpdate(node.mainColumn, newMatrix)}\n                   onDragStart={() => handleDragStart(node.mainColumn, currentRotations[node.mainColumn])}\n                   onDragEnd={() => handleDragEnd(node.mainColumn)}\n                >\n                <Mesh node={nodes[node.mainColumn]} data={data.nodes[node.mainColumn]}/>\n\n                <Gizmo activeAxes={[false, true, false]}\n                       translationLimits={[undefined, [-1, .8], undefined]}\n                       anchor={[-0.8, 1.5, 0]}\n                       scale={1}\n                       userData={[node.upperArm]}\n                       onUpdate={(newMatrix) => handleGizmoUpdate(node.upperArm, newMatrix)}\n                       onDragStart={() => handleDragStart(node.upperArm, currentRotations[node.upperArm])}\n                       onDragEnd={() => handleDragEnd(node.upperArm)}\n                       >\n\n                    <Mesh node={nodes[node.upperArm]} data={data.nodes[node.upperArm]}/>\n                    <Mesh node={nodes[node.wristExtension]} data={data.nodes[node.wristExtension]}/>\n                    <Mesh node={nodes[node.hand]} data={data.nodes[node.hand]}/>\n\n                    <Gizmo activeAxes={[false, false, true]}\n                           translationLimits={[undefined, undefined, [0, 0.4]]}\n                           anchor={[2, 0, 2]}\n                           scale={0.75}\n                           userData={[node.gripper]}\n                           onUpdate={(newMatrix) => handleGizmoUpdate(node.gripper, newMatrix)}\n                           onDragStart={() => handleDragStart(node.gripper, currentRotations[node.gripper])}\n                           onDragEnd={() => handleDragEnd(node.gripper)}\n                           >\n                        <Mesh node={nodes[node.gripper]} data={data.nodes[node.gripper]}/>\n                    </Gizmo>\n                </Gizmo>\n            </Gizmo>\n        </group>\n    );\n};\n\nuseGLTF.preload('/robot.glb');"],"mappings":";AAAA,SAAQA,KAAK,QAAO,mBAAmB;AACvC,SAAQC,OAAO,QAAO,mBAAmB;AACzC,SAAQC,KAAK,QAAO,QAAQ;AAC5B,OAAOC,IAAI,MAAM,uBAAuB;AACxC,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,KAAK,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAO9B,OAAO,MAAMC,QAAQ,GAAGA,CAAC;EAACC,IAAI;EAAEC;AAAoB,CAAC,KAAK;EACtD,MAAM;IAACC;EAAK,CAAC,GAAGV,OAAO,CAAC,YAAY,CAA8B;EAClE,MAAMW,IAAI,GAAGV,KAAK,CAACW,QAAQ;EAC3B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAA0B,CAAC,CAAC,CAAC;EAC/E,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAA0B,CAAC,CAAC,CAAC;EAC/E,MAAM,CAACc,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGf,QAAQ,CAA4C;IAChG,CAACQ,IAAI,CAACQ,UAAU,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;IAC1B,CAACR,IAAI,CAACS,QAAQ,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;IACxB,CAACT,IAAI,CAACU,OAAO,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC;EAC1B,CAAC,CAAC;EAEF,MAAMC,iBAAiB,GAAGA,CAACC,QAAwB,EAAEC,WAAqC,KAAK;IAC3FN,mBAAmB,CAACO,IAAI,KAAK;MACzB,GAAGA,IAAI;MACP,CAACF,QAAQ,GAAGC;IAChB,CAAC,CAAC,CAAC;IAEH,IAAID,QAAQ,KAAKZ,IAAI,CAACS,QAAQ,EAAE;MAC5B;MACA;MACA,MAAMM,QAAQ,GAAGlB,IAAI,CAACE,KAAK,CAACa,QAAQ,CAAC,CAACG,QAAQ,CAAC,CAAC,CAAC;MACjDC,OAAO,CAACC,GAAG,CAAC,sBAAsBL,QAAQ,GAAG,EAAEG,QAAQ,CAAC;IAC5D,CAAC,MAAM;MACH;MACA,MAAMG,KAAK,GAAG,IAAIzB,KAAK,CAAC,CAAC,CAAC0B,SAAS,CAACN,WAAW,CAAC;MAChD,MAAMO,cAAc,GAAIF,KAAK,CAACG,CAAC,GAAG,GAAG,GAAIC,IAAI,CAACC,EAAE;MAChDP,OAAO,CAACC,GAAG,CAAC,wBAAwBL,QAAQ,GAAG,EAAEQ,cAAc,CAAC;IACpE;EACJ,CAAC;EAED,MAAMI,eAAe,GAAGA,CAACZ,QAAwB,EAAEa,QAAkC,KAAK;IACtF,IAAIb,QAAQ,KAAKZ,IAAI,CAACS,QAAQ,EAAE;MAC5B;MACA;MACA,MAAMM,QAAQ,GAAGlB,IAAI,CAACE,KAAK,CAACa,QAAQ,CAAC,CAACG,QAAQ,CAAC,CAAC,CAAC;MACjDV,gBAAgB,CAACS,IAAI,KAAK;QACtB,GAAGA,IAAI;QACP,CAACF,QAAQ,GAAGG;MAChB,CAAC,CAAC,CAAC;MACHC,OAAO,CAACC,GAAG,CAAC,oBAAoBL,QAAQ,GAAG,EAAEG,QAAQ,CAAC;IAC1D,CAAC,MAAM;MACH;MACA,MAAMG,KAAK,GAAG,IAAIzB,KAAK,CAAC,CAAC,CAAC0B,SAAS,CAACM,QAAQ,CAAC;MAC7C,MAAMC,OAAO,GAAIR,KAAK,CAACG,CAAC,GAAG,GAAG,GAAIC,IAAI,CAACC,EAAE;MACzCpB,gBAAgB,CAACW,IAAI,KAAK;QACtB,GAAGA,IAAI;QACP,CAACF,QAAQ,GAAGc;MAChB,CAAC,CAAC,CAAC;MACHV,OAAO,CAACC,GAAG,CAAC,sBAAsBL,QAAQ,GAAG,EAAEc,OAAO,CAAC;IAC3D;EACJ,CAAC;EAED,MAAMC,aAAa,GAAIf,QAAwB,IAAK;IAChD,IAAIgB,WAAW;IAEf,IAAIhB,QAAQ,KAAKZ,IAAI,CAACS,QAAQ,EAAE;MAC5B;MACA;MACA,MAAMoB,WAAW,GAAGhC,IAAI,CAACE,KAAK,CAACa,QAAQ,CAAC,CAACG,QAAQ,CAAC,CAAC,CAAC;MACpD,MAAMe,cAAc,GAAGD,WAAW,IAAIzB,aAAa,CAACQ,QAAQ,CAAC,IAAI,CAAC,CAAC;MACnE;MACAgB,WAAW,GAAGE,cAAc,GAAG,EAAE,CAAC,CAAC;MACnCd,OAAO,CAACC,GAAG,CAAC,qBAAqBL,QAAQ,GAAG,EAAEkB,cAAc,CAAC;MAC7Dd,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEW,WAAW,CAAC;IACnD,CAAC,MAAM;MACH;MACA,MAAMV,KAAK,GAAG,IAAIzB,KAAK,CAAC,CAAC,CAAC0B,SAAS,CAACb,gBAAgB,CAACM,QAAQ,CAAC,CAAC;MAC/D,MAAMmB,UAAU,GAAIb,KAAK,CAACG,CAAC,GAAG,GAAG,GAAIC,IAAI,CAACC,EAAE;MAC5CK,WAAW,GAAGG,UAAU,IAAI7B,aAAa,CAACU,QAAQ,CAAC,IAAI,CAAC,CAAC;MAEzD,IAAIA,QAAQ,KAAKZ,IAAI,CAACQ,UAAU,EAAE;QAC9BoB,WAAW,IAAI,CAAC;MACpB;IACJ;IAEA,MAAMI,OAAkC,GAAG;MACvCjC,KAAK,EAAE;QACH,GAAGF,IAAI,CAACE,KAAK;QACb,CAACa,QAAQ,GAAG;UACR,GAAGf,IAAI,CAACE,KAAK,CAACa,QAAQ,CAAC;UACvBG,QAAQ,EAAElB,IAAI,CAACE,KAAK,CAACa,QAAQ,CAAC,CAACG,QAAQ;UACvCkB,KAAK,EAAEpC,IAAI,CAACE,KAAK,CAACa,QAAQ,CAAC,CAACqB,KAAK;UACjCR,QAAQ,EAAEnB,gBAAgB,CAACM,QAAQ,CAAC;UACpCsB,eAAe,EAAEN,WAAW;UAC5BO,QAAQ,EAAE;QACd;MACJ;IACJ,CAAC;IAEDC,MAAM,CAACC,IAAI,CAACL,OAAO,CAACjC,KAAK,IAAI,CAAC,CAAC,CAAC,CAACuC,OAAO,CAAEC,GAAG,IAAK;MAC9C;MACA,IAAIA,GAAG,KAAK3B,QAAQ,IAAIoB,OAAO,CAACjC,KAAK,IAAIiC,OAAO,CAACjC,KAAK,CAACwC,GAAG,CAAC,EAAE;QACzD;QACAP,OAAO,CAACjC,KAAK,CAACwC,GAAG,CAAC,CAACJ,QAAQ,GAAG,KAAK;MACvC;IACJ,CAAC,CAAC;IAEFnB,OAAO,CAACC,GAAG,CAAC,+BAA+BL,QAAQ,GAAG,EAAEgB,WAAW,CAAC;IACpE9B,QAAQ,CAACkC,OAAO,CAAC;EACrB,CAAC;EAGD,oBACIrC,OAAA;IAAA6C,QAAA,eACI7C,OAAA,CAACP,KAAK;MAAC6C,KAAK,EAAE,CAAE;MACTQ,kBAAkB;MAClBC,UAAU,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAE;MAChCC,QAAQ,EAAE,CAAC3C,IAAI,CAACQ,UAAU,CAAE;MAC5BV,QAAQ,EAAG8C,SAAS,IAAKjC,iBAAiB,CAACX,IAAI,CAACQ,UAAU,EAAEoC,SAAS,CAAE;MACvEC,WAAW,EAAEA,CAAA,KAAMrB,eAAe,CAACxB,IAAI,CAACQ,UAAU,EAAEF,gBAAgB,CAACN,IAAI,CAACQ,UAAU,CAAC,CAAE;MACvFsC,SAAS,EAAEA,CAAA,KAAMnB,aAAa,CAAC3B,IAAI,CAACQ,UAAU,CAAE;MAAAgC,QAAA,gBAEnD7C,OAAA,CAACJ,IAAI;QAACS,IAAI,EAAED,KAAK,CAACC,IAAI,CAACQ,UAAU,CAAE;QAACX,IAAI,EAAEA,IAAI,CAACE,KAAK,CAACC,IAAI,CAACQ,UAAU;MAAE;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eAExEvD,OAAA,CAACP,KAAK;QAACsD,UAAU,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAE;QACjCS,iBAAiB,EAAE,CAACC,SAAS,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAEA,SAAS,CAAE;QACpDC,MAAM,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAE;QACvBpB,KAAK,EAAE,CAAE;QACTU,QAAQ,EAAE,CAAC3C,IAAI,CAACS,QAAQ,CAAE;QAC1BX,QAAQ,EAAG8C,SAAS,IAAKjC,iBAAiB,CAACX,IAAI,CAACS,QAAQ,EAAEmC,SAAS,CAAE;QACrEC,WAAW,EAAEA,CAAA,KAAMrB,eAAe,CAACxB,IAAI,CAACS,QAAQ,EAAEH,gBAAgB,CAACN,IAAI,CAACS,QAAQ,CAAC,CAAE;QACnFqC,SAAS,EAAEA,CAAA,KAAMnB,aAAa,CAAC3B,IAAI,CAACS,QAAQ,CAAE;QAAA+B,QAAA,gBAGjD7C,OAAA,CAACJ,IAAI;UAACS,IAAI,EAAED,KAAK,CAACC,IAAI,CAACS,QAAQ,CAAE;UAACZ,IAAI,EAAEA,IAAI,CAACE,KAAK,CAACC,IAAI,CAACS,QAAQ;QAAE;UAAAsC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eACpEvD,OAAA,CAACJ,IAAI;UAACS,IAAI,EAAED,KAAK,CAACC,IAAI,CAACsD,cAAc,CAAE;UAACzD,IAAI,EAAEA,IAAI,CAACE,KAAK,CAACC,IAAI,CAACsD,cAAc;QAAE;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eAChFvD,OAAA,CAACJ,IAAI;UAACS,IAAI,EAAED,KAAK,CAACC,IAAI,CAACuD,IAAI,CAAE;UAAC1D,IAAI,EAAEA,IAAI,CAACE,KAAK,CAACC,IAAI,CAACuD,IAAI;QAAE;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eAE5DvD,OAAA,CAACP,KAAK;UAACsD,UAAU,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAE;UACjCS,iBAAiB,EAAE,CAACC,SAAS,EAAEA,SAAS,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAE;UACpDC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;UAClBpB,KAAK,EAAE,IAAK;UACZU,QAAQ,EAAE,CAAC3C,IAAI,CAACU,OAAO,CAAE;UACzBZ,QAAQ,EAAG8C,SAAS,IAAKjC,iBAAiB,CAACX,IAAI,CAACU,OAAO,EAAEkC,SAAS,CAAE;UACpEC,WAAW,EAAEA,CAAA,KAAMrB,eAAe,CAACxB,IAAI,CAACU,OAAO,EAAEJ,gBAAgB,CAACN,IAAI,CAACU,OAAO,CAAC,CAAE;UACjFoC,SAAS,EAAEA,CAAA,KAAMnB,aAAa,CAAC3B,IAAI,CAACU,OAAO,CAAE;UAAA8B,QAAA,eAEhD7C,OAAA,CAACJ,IAAI;YAACS,IAAI,EAAED,KAAK,CAACC,IAAI,CAACU,OAAO,CAAE;YAACb,IAAI,EAAEA,IAAI,CAACE,KAAK,CAACC,IAAI,CAACU,OAAO;UAAE;YAAAqC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/D,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEhB,CAAC;AAED7D,OAAO,CAACmE,OAAO,CAAC,YAAY,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}