{"ast":null,"code":"var _jsxFileName = \"/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { GizmoHelper, GizmoViewport, OrbitControls, Environment, Stats, PerspectiveCamera } from '@react-three/drei';\nimport { Shadows, Ground } from '@components/stage';\n// import socketIOClient, { Socket } from 'socket.io-client';\nimport io from 'socket.io-client';\nimport { RobotArm } from \"@components/model/RobotArm\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SOCKET_SERVER_URL = 'http://192.168.3.1:4000';\nexport default function App() {\n  _s();\n  const [robotData, setRobotData] = useState();\n  // const [socket, setSocket] = useState<Socket | null>(null);\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\n  const [error, setError] = useState('');\n\n  // useEffect(() => {\n  //     if (!socket) return;\n\n  //     socket.on('test', (data: any) => {\n  //         console.log('Received test from server:', data);\n  //         socket.emit('test-response', 'Hello from client');\n  //     });\n\n  //     return () => {\n  //         socket.off('test');\n  //     };\n  // }, [socket]);\n\n  // Initialize socket connection\n  // useEffect(() => {\n  console.log('Initializing socket connection to:', SOCKET_SERVER_URL);\n  const socket = io('http://192.168.3.1:4000', {\n    transports: ['polling'],\n    // UÅ¼ywamy polling zamiast websocket\n    reconnection: true,\n    reconnectionAttempts: 5\n  });\n  socket.on('connect', () => {\n    console.log('Connected to EV3');\n  });\n  socket.on('connect_error', error => {\n    console.error('Connection error:', error);\n  });\n  socket.on('motor_status', response => {\n    console.log('Motor response:', response);\n  });\n  // }, []);\n\n  // Handle initial state and state updates\n  useEffect(() => {\n    if (!socket) return;\n\n    // Request initial state\n    if (!robotData) {\n      console.log('Requesting initial state...');\n      socket.emit(\"state:get\");\n    }\n\n    // Listen for state updates\n    socket.on(\"state\", data => {\n      console.log('Received state update:', data);\n      setRobotData(data);\n    });\n    return () => {\n      socket.off(\"state\");\n    };\n  }, [socket, robotData]);\n  const updateRobotData = useCallback(newData => {\n    if (!(socket !== null && socket !== void 0 && socket.connected)) {\n      console.error('Cannot update: Socket not connected');\n      return;\n    }\n    console.log('Updating robot data:', newData);\n    setRobotData(prevData => {\n      if (prevData) {\n        const updatedData = {\n          ...prevData,\n          ...newData\n        };\n        console.log('Emitting state update:', updatedData);\n        socket.emit(\"state:update\", updatedData);\n        return updatedData;\n      }\n      return prevData;\n    });\n  }, [socket]);\n\n  // Dla testu silnika:\n  const testMotor = () => {\n    socket.emit(\"test_motor\");\n  };\n  useEffect(() => {\n    if (!socket) return;\n    console.log('Setting up socket event listeners...');\n    socket.on('motor-test-complete', msg => {\n      console.log('Motor test completed:', msg);\n    });\n    socket.on('motor-test-error', error => {\n      console.error('Motor test error:', error);\n    });\n\n    // Debug incoming events\n    socket.onAny((eventName, ...args) => {\n      console.log(`Received socket event \"${eventName}\":`, args);\n    });\n    return () => {\n      console.log('Cleaning up socket event listeners...');\n      socket.off('motor-test-complete');\n      socket.off('motor-test-error');\n    };\n  }, [socket]);\n\n  // Display error if any\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'fixed',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        backgroundColor: '#ff4444',\n        color: 'white',\n        padding: '20px',\n        borderRadius: '5px',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        style: {\n          marginTop: '10px',\n          padding: '5px 15px',\n          backgroundColor: 'white',\n          border: 'none',\n          borderRadius: '3px',\n          cursor: 'pointer'\n        },\n        children: \"Retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'fixed',\n        top: '10px',\n        left: '10px',\n        zIndex: 1000,\n        display: 'flex',\n        flexDirection: 'column',\n        gap: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: '5px',\n          background: connectionStatus === 'connected' ? '#4CAF50' : '#f44336',\n          color: 'white',\n          borderRadius: '4px'\n        },\n        children: [\"Socket Status: \", connectionStatus]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: testMotor,\n        style: {\n          padding: '10px',\n          background: '#2196F3',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        },\n        children: \"Test Motor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, this), robotData && /*#__PURE__*/_jsxDEV(Canvas, {\n      children: [/*#__PURE__*/_jsxDEV(PerspectiveCamera, {\n        makeDefault: true,\n        fov: 40,\n        position: [10, 8, 25]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(RobotArm, {\n        data: robotData,\n        onUpdate: updateRobotData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Shadows, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Ground, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Environment, {\n        preset: \"city\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n        makeDefault: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(GizmoHelper, {\n        alignment: \"bottom-right\",\n        margin: [100, 100],\n        children: /*#__PURE__*/_jsxDEV(GizmoViewport, {\n          labelColor: \"white\",\n          axisHeadScale: 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Stats, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"6X2goXHDk+JQnswPBUwPWdGPzzM=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Canvas","GizmoHelper","GizmoViewport","OrbitControls","Environment","Stats","PerspectiveCamera","Shadows","Ground","io","RobotArm","jsxDEV","_jsxDEV","Fragment","_Fragment","SOCKET_SERVER_URL","App","_s","robotData","setRobotData","connectionStatus","setConnectionStatus","error","setError","console","log","socket","transports","reconnection","reconnectionAttempts","on","response","emit","data","off","updateRobotData","newData","connected","prevData","updatedData","testMotor","msg","onAny","eventName","args","style","position","top","left","transform","backgroundColor","color","padding","borderRadius","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","window","location","reload","marginTop","border","cursor","zIndex","display","flexDirection","gap","background","makeDefault","fov","onUpdate","preset","alignment","margin","labelColor","axisHeadScale","_c","$RefreshReg$"],"sources":["/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/App.tsx"],"sourcesContent":["import React, {useState, useEffect, useCallback} from 'react';\nimport {Canvas} from '@react-three/fiber';\nimport {GizmoHelper, GizmoViewport, OrbitControls, Environment, Stats, PerspectiveCamera} from '@react-three/drei';\nimport {Shadows, Ground} from '@components/stage';\n// import socketIOClient, { Socket } from 'socket.io-client';\nimport io from 'socket.io-client';\nimport {Robot} from '@types';\nimport {RobotArm} from \"@components/model/RobotArm\";\n\nconst SOCKET_SERVER_URL = 'http://192.168.3.1:4000';\n\nexport default function App() {\n    const [robotData, setRobotData] = useState<Robot.RobotNodes>();    \n    // const [socket, setSocket] = useState<Socket | null>(null);\n    const [connectionStatus, setConnectionStatus] = useState('disconnected');\n\n    const [error, setError] = useState<string>('');\n\n    // useEffect(() => {\n    //     if (!socket) return;\n    \n    //     socket.on('test', (data: any) => {\n    //         console.log('Received test from server:', data);\n    //         socket.emit('test-response', 'Hello from client');\n    //     });\n    \n    //     return () => {\n    //         socket.off('test');\n    //     };\n    // }, [socket]);\n\n    // Initialize socket connection\n    // useEffect(() => {\n        console.log('Initializing socket connection to:', SOCKET_SERVER_URL);\n        const socket = io('http://192.168.3.1:4000', {\n            transports: ['polling'], // UÅ¼ywamy polling zamiast websocket\n            reconnection: true,\n            reconnectionAttempts: 5\n        });\n\n        socket.on('connect', () => {\n            console.log('Connected to EV3');\n        });\n        \n        socket.on('connect_error', (error) => {\n            console.error('Connection error:', error);\n        });\n        \n        socket.on('motor_status', (response) => {\n            console.log('Motor response:', response);\n        });\n    // }, []);\n\n    // Handle initial state and state updates\n    useEffect(() => {\n        if (!socket) return;\n\n        // Request initial state\n        if (!robotData) {\n            console.log('Requesting initial state...');\n            socket.emit(\"state:get\");\n        }\n\n        // Listen for state updates\n        socket.on(\"state\", (data: Robot.RobotNodes) => {\n            console.log('Received state update:', data);\n            setRobotData(data);\n        });\n\n        return () => {\n            socket.off(\"state\");\n        };\n    }, [socket, robotData]);\n\n    const updateRobotData = useCallback((newData: Partial<Robot.RobotNodes>) => {\n        if (!socket?.connected) {\n            console.error('Cannot update: Socket not connected');\n            return;\n        }\n\n        console.log('Updating robot data:', newData);\n        setRobotData(prevData => {\n            if (prevData) {\n                const updatedData = {...prevData, ...newData};\n                console.log('Emitting state update:', updatedData);\n                socket.emit(\"state:update\", updatedData);\n                return updatedData;\n            }\n            return prevData;\n        });\n    }, [socket]);\n\n    \n        \n        // Dla testu silnika:\n        const testMotor = () => {\n            socket.emit(\"test_motor\");\n        };\n\n    useEffect(() => {\n        if (!socket) return;\n    \n        console.log('Setting up socket event listeners...');\n    \n        socket.on('motor-test-complete', (msg: any) => {\n            console.log('Motor test completed:', msg);\n        });\n    \n        socket.on('motor-test-error', (error: any) => {\n            console.error('Motor test error:', error);\n        });\n    \n        // Debug incoming events\n        socket.onAny((eventName: string, ...args: any[]) => {\n            console.log(`Received socket event \"${eventName}\":`, args);\n        });\n    \n        return () => {\n            console.log('Cleaning up socket event listeners...');\n            socket.off('motor-test-complete');\n            socket.off('motor-test-error');\n        };\n    }, [socket]);\n\n    // Display error if any\n    if (error) {\n        return (\n            <div style={{\n                position: 'fixed',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                backgroundColor: '#ff4444',\n                color: 'white',\n                padding: '20px',\n                borderRadius: '5px',\n                textAlign: 'center'\n            }}>\n                <div>{error}</div>\n                <button \n                    onClick={() => window.location.reload()}\n                    style={{\n                        marginTop: '10px',\n                        padding: '5px 15px',\n                        backgroundColor: 'white',\n                        border: 'none',\n                        borderRadius: '3px',\n                        cursor: 'pointer'\n                    }}\n                >\n                    Retry\n                </button>\n            </div>\n        );\n    }\n\n    return (\n        <>\n            <div style={{\n                position: 'fixed',\n                top: '10px',\n                left: '10px',\n                zIndex: 1000,\n                display: 'flex',\n                flexDirection: 'column',\n                gap: '10px'\n            }}>\n                <div style={{\n                    padding: '5px',\n                    background: connectionStatus === 'connected' ? '#4CAF50' : '#f44336',\n                    color: 'white',\n                    borderRadius: '4px'\n                }}>\n                    Socket Status: {connectionStatus}\n                </div>\n                <button\n                    onClick={testMotor}\n                    style={{\n                        padding: '10px',\n                        background: '#2196F3',\n                        color: 'white',\n                        border: 'none',\n                        borderRadius: '4px',\n                        cursor: 'pointer'\n                    }}\n                >\n                    Test Motor\n                </button>\n            </div>\n            {robotData && (\n                <Canvas>\n                    <PerspectiveCamera makeDefault fov={40} position={[10, 8, 25]}/>\n                    <RobotArm data={robotData} onUpdate={updateRobotData}/>\n                    <Shadows/>\n                    <Ground/>\n                    <Environment preset=\"city\"/>\n                    <OrbitControls makeDefault/>\n                    <GizmoHelper alignment=\"bottom-right\" margin={[100, 100]}>\n                        <GizmoViewport labelColor=\"white\" axisHeadScale={1}/>\n                    </GizmoHelper>\n                    <Stats/>\n                </Canvas>\n            )}\n        </>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}