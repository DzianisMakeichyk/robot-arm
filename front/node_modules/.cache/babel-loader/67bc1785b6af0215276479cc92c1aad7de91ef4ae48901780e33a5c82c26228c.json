{"ast":null,"code":"var _jsxFileName = \"/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/components/model/RobotArm.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Gizmo } from '@components/gizmo';\nimport { useGLTF } from '@react-three/drei';\nimport { Robot } from '@types';\nimport Mesh from \"@components/mesh/Mesh\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const RobotArm = ({\n  data,\n  onUpdate\n}) => {\n  _s();\n  const {\n    nodes\n  } = useGLTF('/robot.glb');\n  const node = Robot.NodeName;\n  const handleGizmoUpdate = (nodeName, newRotation) => {\n    console.log(`RobotArm: Updating ${nodeName} rotation:`, newRotation);\n\n    // Preserve existing rotations and only update the relevant axis\n    const currentRotation = data.nodes[nodeName].rotation || [0, 0, 0];\n    // @ts-ignore\n    const updatedRotation = [...currentRotation];\n\n    // Update only the axis that changed\n    if (nodeName === node.mainColumn) {\n      updatedRotation[1] = newRotation[1]; // Y-axis rotation for base\n    } else if (nodeName === node.upperArm) {\n      updatedRotation[1] = newRotation[1]; // Y-axis rotation for arm\n    } else if (nodeName === node.gripper) {\n      updatedRotation[2] = newRotation[2]; // Z-axis rotation for gripper\n    }\n    const newData = {\n      nodes: {\n        ...data.nodes,\n        [nodeName]: {\n          ...data.nodes[nodeName],\n          rotation: updatedRotation\n        }\n      }\n    };\n    console.log('RobotArm: Sending update:', newData);\n    onUpdate(newData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: /*#__PURE__*/_jsxDEV(Gizmo, {\n      scale: 5,\n      disableTranslation: true,\n      activeAxes: [false, true, false] // Only Y-axis rotation\n      ,\n      userData: [node.mainColumn],\n      matrix: undefined,\n      onUpdate: rotation => {\n        console.log('Main column rotation:', rotation);\n        handleGizmoUpdate(node.mainColumn, rotation);\n      },\n      children: [/*#__PURE__*/_jsxDEV(Mesh, {\n        node: nodes[node.mainColumn],\n        data: data.nodes[node.mainColumn]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Gizmo, {\n        activeAxes: [false, true, false] // Only Y-axis rotation\n        ,\n        translationLimits: [undefined, [-1, .8], undefined],\n        disableRotation: false,\n        anchor: [-0.8, 1.5, 0],\n        scale: 1,\n        userData: [node.upperArm],\n        onUpdate: rotation => {\n          console.log('Upper arm rotation:', rotation);\n          handleGizmoUpdate(node.upperArm, rotation);\n        },\n        children: [/*#__PURE__*/_jsxDEV(Mesh, {\n          node: nodes[node.upperArm],\n          data: data.nodes[node.upperArm]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Mesh, {\n          node: nodes[node.wristExtension],\n          data: data.nodes[node.wristExtension]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Mesh, {\n          node: nodes[node.hand],\n          data: data.nodes[node.hand]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Gizmo, {\n          activeAxes: [false, false, true] // Only Z-axis rotation\n          ,\n          translationLimits: [undefined, undefined, [0, 0.4]],\n          anchor: [2, 0, 2],\n          scale: 0.75,\n          userData: [node.gripper],\n          onUpdate: rotation => {\n            console.log('Gripper rotation:', rotation);\n            handleGizmoUpdate(node.gripper, rotation);\n          },\n          children: /*#__PURE__*/_jsxDEV(Mesh, {\n            node: nodes[node.gripper],\n            data: data.nodes[node.gripper]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n_s(RobotArm, \"32KrL5kPiaeJAX40F9P63Xol6XY=\", false, function () {\n  return [useGLTF];\n});\n_c = RobotArm;\nuseGLTF.preload('/robot.glb');\nvar _c;\n$RefreshReg$(_c, \"RobotArm\");","map":{"version":3,"names":["React","Gizmo","useGLTF","Robot","Mesh","jsxDEV","_jsxDEV","RobotArm","data","onUpdate","_s","nodes","node","NodeName","handleGizmoUpdate","nodeName","newRotation","console","log","currentRotation","rotation","updatedRotation","mainColumn","upperArm","gripper","newData","children","scale","disableTranslation","activeAxes","userData","matrix","undefined","fileName","_jsxFileName","lineNumber","columnNumber","translationLimits","disableRotation","anchor","wristExtension","hand","_c","preload","$RefreshReg$"],"sources":["/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/components/model/RobotArm.tsx"],"sourcesContent":["import React from 'react'\nimport {Gizmo} from '@components/gizmo'\nimport {useGLTF} from '@react-three/drei'\nimport {Robot} from '@types'\nimport Mesh from \"@components/mesh/Mesh\"\n\ninterface RobotProps {\n    data: Robot.RobotNodes;\n    onUpdate: (newData: Partial<Robot.RobotNodes>) => void;\n}\n\nexport const RobotArm = ({data, onUpdate}: RobotProps) => {\n    const {nodes} = useGLTF('/robot.glb') as unknown as Robot.DreiGLTF;\n    const node = Robot.NodeName;\n\n    const handleGizmoUpdate = (nodeName: Robot.NodeName, newRotation: [number, number, number]) => {\n        console.log(`RobotArm: Updating ${nodeName} rotation:`, newRotation);\n\n        // Preserve existing rotations and only update the relevant axis\n        const currentRotation = data.nodes[nodeName].rotation || [0, 0, 0];\n        // @ts-ignore\n        const updatedRotation: [number, number, number] = [...currentRotation] as [number, number, number];\n\n        // Update only the axis that changed\n        if (nodeName === node.mainColumn) {\n            updatedRotation[1] = newRotation[1]; // Y-axis rotation for base\n        } else if (nodeName === node.upperArm) {\n            updatedRotation[1] = newRotation[1]; // Y-axis rotation for arm\n        } else if (nodeName === node.gripper) {\n            updatedRotation[2] = newRotation[2]; // Z-axis rotation for gripper\n        }\n        \n        const newData: Partial<Robot.RobotNodes> = {\n            nodes: {\n                ...data.nodes,\n                [nodeName]: {\n                    ...data.nodes[nodeName],\n                    rotation: updatedRotation\n                }\n            }\n        };\n\n        console.log('RobotArm: Sending update:', newData);\n        onUpdate(newData);\n    };\n\n    return (\n        <group>\n            {/* Main column (base rotation) */}\n            <Gizmo \n                scale={5}\n                disableTranslation\n                activeAxes={[false, true, false]} // Only Y-axis rotation\n                userData={[node.mainColumn]}\n                matrix={undefined}\n                onUpdate={(rotation) => {\n                    console.log('Main column rotation:', rotation);\n                    handleGizmoUpdate(node.mainColumn, rotation);\n                }}>\n                <Mesh node={nodes[node.mainColumn]} data={data.nodes[node.mainColumn]}/>\n\n                {/* Upper arm */}\n                <Gizmo \n                    activeAxes={[false, true, false]} // Only Y-axis rotation\n                    translationLimits={[undefined, [-1, .8], undefined]}\n                    disableRotation={false}\n                    anchor={[-0.8, 1.5, 0]}\n                    scale={1}\n                    userData={[node.upperArm]}\n                    onUpdate={(rotation) => {\n                        console.log('Upper arm rotation:', rotation);\n                        handleGizmoUpdate(node.upperArm, rotation);\n                    }}>\n                    <Mesh node={nodes[node.upperArm]} data={data.nodes[node.upperArm]}/>\n                    <Mesh node={nodes[node.wristExtension]} data={data.nodes[node.wristExtension]}/>\n                    <Mesh node={nodes[node.hand]} data={data.nodes[node.hand]}/>\n\n                    {/* Gripper */}\n                    <Gizmo \n                        activeAxes={[false, false, true]} // Only Z-axis rotation\n                        translationLimits={[undefined, undefined, [0, 0.4]]}\n                        anchor={[2, 0, 2]}\n                        scale={0.75}\n                        userData={[node.gripper]}\n                        onUpdate={(rotation) => {\n                            console.log('Gripper rotation:', rotation);\n                            handleGizmoUpdate(node.gripper, rotation);\n                        }}>\n                        <Mesh node={nodes[node.gripper]} data={data.nodes[node.gripper]}/>\n                    </Gizmo>\n                </Gizmo>\n            </Gizmo>\n        </group>\n    );\n};\n\nuseGLTF.preload('/robot.glb');"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}