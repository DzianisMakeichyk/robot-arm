{"ast":null,"code":"/**\n * Types for the project\n */\nexport let Robot;\n(function (_Robot) {\n  let NodeName = /*#__PURE__*/function (NodeName) {\n    NodeName[\"mainColumn\"] = \"main_column\";\n    NodeName[\"upperArm\"] = \"upper_arm\";\n    NodeName[\"wristExtension\"] = \"wrist_extension\";\n    NodeName[\"hand\"] = \"hand\";\n    NodeName[\"gripper\"] = \"gripper\";\n    return NodeName;\n  }({});\n  _Robot.NodeName = NodeName;\n  /**\n   * Nodes expected in robot data\n   */\n  /**\n   * Robot Node data\n   */\n  /**\n   * Since useGLTF does not supply the nodes and materials types we define them ourselves.\n   * Seems like missing typing in drei.\n   */\n  /**\n   * With mesh and robot data we construct each Robot node\n   */\n  /**\n   * Properties we receive for a Robot Gizmo\n   */\n  /**\n   * The state we hold for a Gizmo\n   */\n  /**\n   * The start event when Gizmo is invoked\n   */\n})(Robot || (Robot = {}));","map":{"version":3,"names":["Robot","_Robot","NodeName"],"sources":["/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/types/index.ts"],"sourcesContent":[" \nimport {ReactNode} from 'react'\nimport {GLTF} from 'three/examples/jsm/loaders/GLTFLoader'\nimport {Vector3, Mesh, MeshStandardMaterial, Matrix4} from 'three'\n\n/**\n * Types for the project\n */\nexport namespace Robot {\n\n    /**\n     * The Node names we expect on a Robot\n     */\n    export enum NodeName {\n        mainColumn = 'main_column',\n        upperArm = 'upper_arm',\n        wristExtension = 'wrist_extension',\n        hand = 'hand',\n        gripper = 'gripper'\n    }\n\n    /**\n     * Nodes expected in robot data\n     */\n    export interface RobotNodes {\n        nodes: {\n            [NodeName.mainColumn]: RobotNode,\n            [NodeName.upperArm]: RobotNode,\n            [NodeName.wristExtension]: RobotNode,\n            [NodeName.hand]: RobotNode,\n            [NodeName.gripper]: RobotNode\n        }\n    }\n\n    /**\n     * Robot Node data\n     */\n    export interface RobotNode {\n        position: Vector3,\n        scale: Vector3\n        rotation?: Vector3\n    }\n\n    /**\n     * Since useGLTF does not supply the nodes and materials types we define them ourselves.\n     * Seems like missing typing in drei.\n     */\n    export type DreiGLTF = GLTF & {\n        nodes: Record<string, Mesh>\n        materials: Record<string, MeshStandardMaterial>\n    }\n\n    /**\n     * With mesh and robot data we construct each Robot node\n     */\n    export type MeshProperties = {\n        node: Mesh\n        data: RobotNode\n    }\n\n    /**\n     * Properties we receive for a Robot Gizmo\n     */\n    export type GizmoProperties = {\n\n        // gizmo scale\n        scale?: number\n\n        // start matrix\n        matrix?: Matrix4\n\n        // gizmo anchor\n        anchor?: [number, number, number]\n\n        // axis to operate on\n        activeAxes?: [boolean, boolean, boolean]\n\n        // switch off all rotation or translation\n        disableTranslation?: boolean\n        disableRotation?: boolean\n\n        // translation limits array: x:[start,end] y[start,end] z[start,end]\n        translationLimits?: [[number, number] | undefined, [number, number] | undefined, [number, number] | undefined]\n\n        // rotation limits array: x:[start,end] y[start,end] z[start,end]\n        rotationLimits?: [[number, number] | undefined, [number, number] | undefined, [number, number] | undefined]\n\n        // custom data\n        userData?: { [key: string]: any }\n        \n        children?: ReactNode\n\n        onUpdate: (matrix: [number, number, number]) => void\n\n        onDragStart: () => void;\n\n        onDragEnd: () => void;\n\n    }\n\n    /**\n     * The state we hold for a Gizmo\n     */\n    export type GizmoState = {\n        onDragStart: (props: GizmoStart) => void\n        onDrag: (local: Matrix4) => void\n        onDragEnd: () => void\n        translationLimits?: [[number, number] | undefined, [number, number] | undefined, [number, number] | undefined]\n        rotationLimits?: [[number, number] | undefined, [number, number] | undefined, [number, number] | undefined]\n        scale: number\n        userData?: { [key: string]: any }\n    }\n\n    /**\n     * The start event when Gizmo is invoked\n     */\n    export type GizmoStart = {\n        action: 'Translate' | 'Rotate'\n        axis: 0 | 1 | 2\n        origin: Vector3\n        directions: Vector3[]\n    }\n}\n"],"mappings":"AAKA;AACA;AACA;AAFA,WAGiBA,KAAK;AAAA,WAAAC,MAAA;EAAA,IAKNC,QAAQ,0BAARA,QAAQ;IAARA,QAAQ;IAARA,QAAQ;IAARA,QAAQ;IAARA,QAAQ;IAARA,QAAQ;IAAA,OAARA,QAAQ;EAAA;EAAAD,MAAA,CAAAC,QAAA,GAAAA,QAAA;EAQpB;AACJ;AACA;EAWI;AACJ;AACA;EAOI;AACJ;AACA;AACA;EAMI;AACJ;AACA;EAMI;AACJ;AACA;EAsCI;AACJ;AACA;EAWI;AACJ;AACA;AAFI,GAzGaF,KAAK,KAALA,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}