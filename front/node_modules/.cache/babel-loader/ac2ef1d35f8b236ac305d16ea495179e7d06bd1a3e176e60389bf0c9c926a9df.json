{"ast":null,"code":"var _jsxFileName = \"/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/components/model/RobotArm.tsx\";\n// @ts-nocheck\nimport { Gizmo } from '@components/gizmo';\nimport { useGLTF } from '@react-three/drei';\nimport { Robot } from '@types';\nimport Mesh from \"@components/mesh/Mesh\";\nimport { useState } from 'react';\nimport { Euler } from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const RobotArm = ({\n  data,\n  onUpdate\n}) => {\n  const {\n    nodes\n  } = useGLTF('/robot.glb');\n  const node = Robot.NodeName;\n  const [startRotation, setStartRotation] = useState({});\n  const [startPosition, setStartPosition] = useState({});\n  const [currentRotations, setCurrentRotations] = useState({\n    [node.mainColumn]: [0, 0, 0],\n    [node.upperArm]: [0, 0, 0],\n    [node.gripper]: [0, 0, 0]\n  });\n  const handleGizmoUpdate = (nodeName, transform) => {\n    if (nodeName === node.upperArm) {\n      // Tylko śledzimy pozycję, nie wysyłamy\n      console.log(`Current height for ${nodeName}:`, transform.position[1]);\n    } else {\n      setCurrentRotations(prev => ({\n        ...prev,\n        [nodeName]: transform.rotation\n      }));\n      const euler = new Euler().fromArray(transform.rotation);\n      const currentDegrees = euler.y * 180 / Math.PI;\n      console.log(`Current rotation for ${nodeName}:`, currentDegrees);\n    }\n  };\n  const handleDragStart = (nodeName, transform) => {\n    if (nodeName === node.upperArm) {\n      setStartPosition(prev => ({\n        ...prev,\n        [nodeName]: transform.position[1]\n      }));\n      console.log(`Start height for ${nodeName}:`, transform.position[1]);\n    } else {\n      const euler = new Euler().fromArray(transform.rotation);\n      const degrees = euler.y * 180 / Math.PI;\n      setStartRotation(prev => ({\n        ...prev,\n        [nodeName]: degrees\n      }));\n      console.log(`Start rotation for ${nodeName}:`, degrees);\n    }\n  };\n  const handleDragEnd = (nodeName, transform) => {\n    const newData = {\n      nodes: {\n        ...data.nodes\n      }\n    };\n    if (nodeName === node.upperArm) {\n      const currentHeight = transform.position[1];\n      const heightChange = currentHeight - (startPosition[nodeName] || 0);\n      const angleChange = heightChange * 90; // Convert height change to angle\n\n      newData.nodes[nodeName] = {\n        ...data.nodes[nodeName],\n        position: transform.position,\n        scale: data.nodes[nodeName].scale,\n        rotation: data.nodes[nodeName].rotation,\n        rotationDegrees: angleChange,\n        _updated: true\n      };\n      console.log(`Sending height change as angle for ${nodeName}:`, angleChange);\n    } else {\n      const euler = new Euler().fromArray(transform.rotation);\n      const endDegrees = euler.y * 180 / Math.PI;\n      let totalRotation = endDegrees - (startRotation[nodeName] || 0);\n      if (nodeName === node.mainColumn) {\n        totalRotation *= 4;\n      }\n      newData.nodes[nodeName] = {\n        ...data.nodes[nodeName],\n        position: data.nodes[nodeName].position,\n        scale: data.nodes[nodeName].scale,\n        rotation: transform.rotation,\n        rotationDegrees: totalRotation,\n        _updated: true\n      };\n      console.log(`Sending rotation to robot for ${nodeName}:`, totalRotation);\n    }\n\n    // Reset update flag for other nodes\n    Object.keys(data.nodes).forEach(key => {\n      if (key !== nodeName) {\n        newData.nodes[key] = {\n          ...data.nodes[key],\n          _updated: false\n        };\n      }\n    });\n    onUpdate(newData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: /*#__PURE__*/_jsxDEV(Gizmo, {\n      scale: 5,\n      disableTranslation: true,\n      activeAxes: [true, false, true],\n      userData: [node.mainColumn],\n      onDragStart: () => handleDragStart(node.mainColumn, {\n        position: data.nodes[node.mainColumn].position,\n        rotation: currentRotations[node.mainColumn]\n      }),\n      onDragEnd: () => handleDragEnd(node.mainColumn, {\n        position: data.nodes[node.mainColumn].position,\n        rotation: currentRotations[node.mainColumn]\n      }),\n      onUpdate: transform => handleGizmoUpdate(node.mainColumn, transform),\n      children: [/*#__PURE__*/_jsxDEV(Mesh, {\n        node: nodes[node.mainColumn],\n        data: data.nodes[node.mainColumn]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Gizmo, {\n        activeAxes: [false, true, false],\n        translationLimits: [undefined, [-1, .8], undefined],\n        disableRotation: true,\n        anchor: [-0.8, 1.5, 0],\n        scale: 1,\n        userData: [node.upperArm],\n        onDragStart: () => handleDragStart(node.upperArm, {\n          position: data.nodes[node.upperArm].position,\n          rotation: [0, 0, 0]\n        }),\n        onDragEnd: () => handleDragEnd(node.upperArm, {\n          position: data.nodes[node.upperArm].position,\n          rotation: [0, 0, 0]\n        }),\n        onUpdate: transform => handleGizmoUpdate(node.upperArm, transform),\n        children: [/*#__PURE__*/_jsxDEV(Mesh, {\n          node: nodes[node.upperArm],\n          data: data.nodes[node.upperArm]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Mesh, {\n          node: nodes[node.wristExtension],\n          data: data.nodes[node.wristExtension]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Mesh, {\n          node: nodes[node.hand],\n          data: data.nodes[node.hand]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Gizmo, {\n          activeAxes: [false, false, true],\n          translationLimits: [undefined, undefined, [0, 0.4]],\n          anchor: [2, 0, 2],\n          scale: 0.75,\n          userData: [node.gripper],\n          onDragStart: () => handleDragStart(node.gripper, {\n            position: data.nodes[node.gripper].position,\n            rotation: currentRotations[node.gripper]\n          }),\n          onDragEnd: () => handleDragEnd(node.gripper, {\n            position: data.nodes[node.gripper].position,\n            rotation: currentRotations[node.gripper]\n          }),\n          onUpdate: transform => handleGizmoUpdate(node.gripper, transform),\n          children: /*#__PURE__*/_jsxDEV(Mesh, {\n            node: nodes[node.gripper],\n            data: data.nodes[node.gripper]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n};\nuseGLTF.preload('/robot.glb');","map":{"version":3,"names":["Gizmo","useGLTF","Robot","Mesh","useState","Euler","jsxDEV","_jsxDEV","RobotArm","data","onUpdate","nodes","node","NodeName","startRotation","setStartRotation","startPosition","setStartPosition","currentRotations","setCurrentRotations","mainColumn","upperArm","gripper","handleGizmoUpdate","nodeName","transform","console","log","position","prev","rotation","euler","fromArray","currentDegrees","y","Math","PI","handleDragStart","degrees","handleDragEnd","newData","currentHeight","heightChange","angleChange","scale","rotationDegrees","_updated","endDegrees","totalRotation","Object","keys","forEach","key","children","disableTranslation","activeAxes","userData","onDragStart","onDragEnd","fileName","_jsxFileName","lineNumber","columnNumber","translationLimits","undefined","disableRotation","anchor","wristExtension","hand","preload"],"sources":["/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/components/model/RobotArm.tsx"],"sourcesContent":["// @ts-nocheck\nimport {Gizmo} from '@components/gizmo'\nimport {useGLTF} from '@react-three/drei'\nimport {Robot} from '@types'\nimport Mesh from \"@components/mesh/Mesh\"\nimport { useState } from 'react';\nimport { Euler } from 'three';\n\ninterface RobotProps {\n    data: Robot.RobotNodes;\n    onUpdate: (newData: Partial<Robot.RobotNodes>) => void;\n}\n\nexport const RobotArm = ({data, onUpdate}: RobotProps) => {\n    const {nodes} = useGLTF('/robot.glb') as unknown as Robot.DreiGLTF;\n    const node = Robot.NodeName;\n    const [startRotation, setStartRotation] = useState<{[key: string]: number}>({});\n    const [startPosition, setStartPosition] = useState<{[key: string]: number}>({});\n    const [currentRotations, setCurrentRotations] = useState<{[key: string]: [number, number, number]}>({\n        [node.mainColumn]: [0,0,0],\n        [node.upperArm]: [0,0,0],\n        [node.gripper]: [0,0,0]\n    });\n    \n    const handleGizmoUpdate = (nodeName: Robot.NodeName, transform: { position: [number, number, number], rotation: [number, number, number] }) => {\n        if (nodeName === node.upperArm) {\n            // Tylko śledzimy pozycję, nie wysyłamy\n            console.log(`Current height for ${nodeName}:`, transform.position[1]);\n        } else {\n            setCurrentRotations(prev => ({\n                ...prev,\n                [nodeName]: transform.rotation\n            }));\n            const euler = new Euler().fromArray(transform.rotation);\n            const currentDegrees = (euler.y * 180) / Math.PI;\n            console.log(`Current rotation for ${nodeName}:`, currentDegrees);\n        }\n    };\n\n    const handleDragStart = (nodeName: Robot.NodeName, transform: { position: [number, number, number], rotation: [number, number, number] }) => {\n        if (nodeName === node.upperArm) {\n            setStartPosition(prev => ({\n                ...prev,\n                [nodeName]: transform.position[1]\n            }));\n            console.log(`Start height for ${nodeName}:`, transform.position[1]);\n        } else {\n            const euler = new Euler().fromArray(transform.rotation);\n            const degrees = (euler.y * 180) / Math.PI;\n            setStartRotation(prev => ({\n                ...prev,\n                [nodeName]: degrees\n            }));\n            console.log(`Start rotation for ${nodeName}:`, degrees);\n        }\n    };\n\n    const handleDragEnd = (nodeName: Robot.NodeName, transform: { position: [number, number, number], rotation: [number, number, number] }) => {\n        const newData: Partial<Robot.RobotNodes> = {\n            nodes: {\n                ...data.nodes,\n            }\n        };\n\n        if (nodeName === node.upperArm) {\n            const currentHeight = transform.position[1];\n            const heightChange = currentHeight - (startPosition[nodeName] || 0);\n            const angleChange = heightChange * 90; // Convert height change to angle\n\n            newData.nodes[nodeName] = {\n                ...data.nodes[nodeName],\n                position: transform.position,\n                scale: data.nodes[nodeName].scale,\n                rotation: data.nodes[nodeName].rotation,\n                rotationDegrees: angleChange,\n                _updated: true\n            };\n\n            console.log(`Sending height change as angle for ${nodeName}:`, angleChange);\n        } else {\n            const euler = new Euler().fromArray(transform.rotation);\n            const endDegrees = (euler.y * 180) / Math.PI;\n            let totalRotation = endDegrees - (startRotation[nodeName] || 0);\n\n            if (nodeName === node.mainColumn) {\n                totalRotation *= 4;\n            }\n\n            newData.nodes[nodeName] = {\n                ...data.nodes[nodeName],\n                position: data.nodes[nodeName].position,\n                scale: data.nodes[nodeName].scale,\n                rotation: transform.rotation,\n                rotationDegrees: totalRotation,\n                _updated: true\n            };\n\n            console.log(`Sending rotation to robot for ${nodeName}:`, totalRotation);\n        }\n\n        // Reset update flag for other nodes\n        Object.keys(data.nodes).forEach((key) => {\n            if (key !== nodeName) {\n                newData.nodes[key] = {\n                    ...data.nodes[key],\n                    _updated: false\n                };\n            }\n        });\n\n        onUpdate(newData);\n    };\n\n    return (\n        <group>\n            <Gizmo scale={5}\n                   disableTranslation\n                   activeAxes={[true, false, true]}\n                   userData={[node.mainColumn]}\n                   onDragStart={() => handleDragStart(node.mainColumn, {position: data.nodes[node.mainColumn].position, rotation: currentRotations[node.mainColumn]})}\n                   onDragEnd={() => handleDragEnd(node.mainColumn, {position: data.nodes[node.mainColumn].position, rotation: currentRotations[node.mainColumn]})}\n                   onUpdate={(transform) => handleGizmoUpdate(node.mainColumn, transform)}>\n                <Mesh node={nodes[node.mainColumn]} data={data.nodes[node.mainColumn]}/>\n\n                <Gizmo activeAxes={[false, true, false]}\n                       translationLimits={[undefined, [-1, .8], undefined]}\n                       disableRotation\n                       anchor={[-0.8, 1.5, 0]}\n                       scale={1}\n                       userData={[node.upperArm]}\n                       onDragStart={() => handleDragStart(node.upperArm, {position: data.nodes[node.upperArm].position, rotation: [0,0,0]})}\n                       onDragEnd={() => handleDragEnd(node.upperArm, {position: data.nodes[node.upperArm].position, rotation: [0,0,0]})}\n                       onUpdate={(transform) => handleGizmoUpdate(node.upperArm, transform)}>\n                    <Mesh node={nodes[node.upperArm]} data={data.nodes[node.upperArm]}/>\n                    <Mesh node={nodes[node.wristExtension]} data={data.nodes[node.wristExtension]}/>\n                    <Mesh node={nodes[node.hand]} data={data.nodes[node.hand]}/>\n\n                    <Gizmo activeAxes={[false, false, true]}\n                           translationLimits={[undefined, undefined, [0, 0.4]]}\n                           anchor={[2, 0, 2]}\n                           scale={0.75}\n                           userData={[node.gripper]}\n                           onDragStart={() => handleDragStart(node.gripper, {position: data.nodes[node.gripper].position, rotation: currentRotations[node.gripper]})}\n                           onDragEnd={() => handleDragEnd(node.gripper, {position: data.nodes[node.gripper].position, rotation: currentRotations[node.gripper]})}\n                           onUpdate={(transform) => handleGizmoUpdate(node.gripper, transform)}>\n                        <Mesh node={nodes[node.gripper]} data={data.nodes[node.gripper]}/>\n                    </Gizmo>\n                </Gizmo>\n            </Gizmo>\n        </group>\n    );\n};\n\nuseGLTF.preload('/robot.glb');"],"mappings":";AAAA;AACA,SAAQA,KAAK,QAAO,mBAAmB;AACvC,SAAQC,OAAO,QAAO,mBAAmB;AACzC,SAAQC,KAAK,QAAO,QAAQ;AAC5B,OAAOC,IAAI,MAAM,uBAAuB;AACxC,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,KAAK,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAO9B,OAAO,MAAMC,QAAQ,GAAGA,CAAC;EAACC,IAAI;EAAEC;AAAoB,CAAC,KAAK;EACtD,MAAM;IAACC;EAAK,CAAC,GAAGV,OAAO,CAAC,YAAY,CAA8B;EAClE,MAAMW,IAAI,GAAGV,KAAK,CAACW,QAAQ;EAC3B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAA0B,CAAC,CAAC,CAAC;EAC/E,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAA0B,CAAC,CAAC,CAAC;EAC/E,MAAM,CAACc,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGf,QAAQ,CAA4C;IAChG,CAACQ,IAAI,CAACQ,UAAU,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;IAC1B,CAACR,IAAI,CAACS,QAAQ,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;IACxB,CAACT,IAAI,CAACU,OAAO,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC;EAC1B,CAAC,CAAC;EAEF,MAAMC,iBAAiB,GAAGA,CAACC,QAAwB,EAAEC,SAAqF,KAAK;IAC3I,IAAID,QAAQ,KAAKZ,IAAI,CAACS,QAAQ,EAAE;MAC5B;MACAK,OAAO,CAACC,GAAG,CAAC,sBAAsBH,QAAQ,GAAG,EAAEC,SAAS,CAACG,QAAQ,CAAC,CAAC,CAAC,CAAC;IACzE,CAAC,MAAM;MACHT,mBAAmB,CAACU,IAAI,KAAK;QACzB,GAAGA,IAAI;QACP,CAACL,QAAQ,GAAGC,SAAS,CAACK;MAC1B,CAAC,CAAC,CAAC;MACH,MAAMC,KAAK,GAAG,IAAI1B,KAAK,CAAC,CAAC,CAAC2B,SAAS,CAACP,SAAS,CAACK,QAAQ,CAAC;MACvD,MAAMG,cAAc,GAAIF,KAAK,CAACG,CAAC,GAAG,GAAG,GAAIC,IAAI,CAACC,EAAE;MAChDV,OAAO,CAACC,GAAG,CAAC,wBAAwBH,QAAQ,GAAG,EAAES,cAAc,CAAC;IACpE;EACJ,CAAC;EAED,MAAMI,eAAe,GAAGA,CAACb,QAAwB,EAAEC,SAAqF,KAAK;IACzI,IAAID,QAAQ,KAAKZ,IAAI,CAACS,QAAQ,EAAE;MAC5BJ,gBAAgB,CAACY,IAAI,KAAK;QACtB,GAAGA,IAAI;QACP,CAACL,QAAQ,GAAGC,SAAS,CAACG,QAAQ,CAAC,CAAC;MACpC,CAAC,CAAC,CAAC;MACHF,OAAO,CAACC,GAAG,CAAC,oBAAoBH,QAAQ,GAAG,EAAEC,SAAS,CAACG,QAAQ,CAAC,CAAC,CAAC,CAAC;IACvE,CAAC,MAAM;MACH,MAAMG,KAAK,GAAG,IAAI1B,KAAK,CAAC,CAAC,CAAC2B,SAAS,CAACP,SAAS,CAACK,QAAQ,CAAC;MACvD,MAAMQ,OAAO,GAAIP,KAAK,CAACG,CAAC,GAAG,GAAG,GAAIC,IAAI,CAACC,EAAE;MACzCrB,gBAAgB,CAACc,IAAI,KAAK;QACtB,GAAGA,IAAI;QACP,CAACL,QAAQ,GAAGc;MAChB,CAAC,CAAC,CAAC;MACHZ,OAAO,CAACC,GAAG,CAAC,sBAAsBH,QAAQ,GAAG,EAAEc,OAAO,CAAC;IAC3D;EACJ,CAAC;EAED,MAAMC,aAAa,GAAGA,CAACf,QAAwB,EAAEC,SAAqF,KAAK;IACvI,MAAMe,OAAkC,GAAG;MACvC7B,KAAK,EAAE;QACH,GAAGF,IAAI,CAACE;MACZ;IACJ,CAAC;IAED,IAAIa,QAAQ,KAAKZ,IAAI,CAACS,QAAQ,EAAE;MAC5B,MAAMoB,aAAa,GAAGhB,SAAS,CAACG,QAAQ,CAAC,CAAC,CAAC;MAC3C,MAAMc,YAAY,GAAGD,aAAa,IAAIzB,aAAa,CAACQ,QAAQ,CAAC,IAAI,CAAC,CAAC;MACnE,MAAMmB,WAAW,GAAGD,YAAY,GAAG,EAAE,CAAC,CAAC;;MAEvCF,OAAO,CAAC7B,KAAK,CAACa,QAAQ,CAAC,GAAG;QACtB,GAAGf,IAAI,CAACE,KAAK,CAACa,QAAQ,CAAC;QACvBI,QAAQ,EAAEH,SAAS,CAACG,QAAQ;QAC5BgB,KAAK,EAAEnC,IAAI,CAACE,KAAK,CAACa,QAAQ,CAAC,CAACoB,KAAK;QACjCd,QAAQ,EAAErB,IAAI,CAACE,KAAK,CAACa,QAAQ,CAAC,CAACM,QAAQ;QACvCe,eAAe,EAAEF,WAAW;QAC5BG,QAAQ,EAAE;MACd,CAAC;MAEDpB,OAAO,CAACC,GAAG,CAAC,sCAAsCH,QAAQ,GAAG,EAAEmB,WAAW,CAAC;IAC/E,CAAC,MAAM;MACH,MAAMZ,KAAK,GAAG,IAAI1B,KAAK,CAAC,CAAC,CAAC2B,SAAS,CAACP,SAAS,CAACK,QAAQ,CAAC;MACvD,MAAMiB,UAAU,GAAIhB,KAAK,CAACG,CAAC,GAAG,GAAG,GAAIC,IAAI,CAACC,EAAE;MAC5C,IAAIY,aAAa,GAAGD,UAAU,IAAIjC,aAAa,CAACU,QAAQ,CAAC,IAAI,CAAC,CAAC;MAE/D,IAAIA,QAAQ,KAAKZ,IAAI,CAACQ,UAAU,EAAE;QAC9B4B,aAAa,IAAI,CAAC;MACtB;MAEAR,OAAO,CAAC7B,KAAK,CAACa,QAAQ,CAAC,GAAG;QACtB,GAAGf,IAAI,CAACE,KAAK,CAACa,QAAQ,CAAC;QACvBI,QAAQ,EAAEnB,IAAI,CAACE,KAAK,CAACa,QAAQ,CAAC,CAACI,QAAQ;QACvCgB,KAAK,EAAEnC,IAAI,CAACE,KAAK,CAACa,QAAQ,CAAC,CAACoB,KAAK;QACjCd,QAAQ,EAAEL,SAAS,CAACK,QAAQ;QAC5Be,eAAe,EAAEG,aAAa;QAC9BF,QAAQ,EAAE;MACd,CAAC;MAEDpB,OAAO,CAACC,GAAG,CAAC,iCAAiCH,QAAQ,GAAG,EAAEwB,aAAa,CAAC;IAC5E;;IAEA;IACAC,MAAM,CAACC,IAAI,CAACzC,IAAI,CAACE,KAAK,CAAC,CAACwC,OAAO,CAAEC,GAAG,IAAK;MACrC,IAAIA,GAAG,KAAK5B,QAAQ,EAAE;QAClBgB,OAAO,CAAC7B,KAAK,CAACyC,GAAG,CAAC,GAAG;UACjB,GAAG3C,IAAI,CAACE,KAAK,CAACyC,GAAG,CAAC;UAClBN,QAAQ,EAAE;QACd,CAAC;MACL;IACJ,CAAC,CAAC;IAEFpC,QAAQ,CAAC8B,OAAO,CAAC;EACrB,CAAC;EAED,oBACIjC,OAAA;IAAA8C,QAAA,eACI9C,OAAA,CAACP,KAAK;MAAC4C,KAAK,EAAE,CAAE;MACTU,kBAAkB;MAClBC,UAAU,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAE;MAChCC,QAAQ,EAAE,CAAC5C,IAAI,CAACQ,UAAU,CAAE;MAC5BqC,WAAW,EAAEA,CAAA,KAAMpB,eAAe,CAACzB,IAAI,CAACQ,UAAU,EAAE;QAACQ,QAAQ,EAAEnB,IAAI,CAACE,KAAK,CAACC,IAAI,CAACQ,UAAU,CAAC,CAACQ,QAAQ;QAAEE,QAAQ,EAAEZ,gBAAgB,CAACN,IAAI,CAACQ,UAAU;MAAC,CAAC,CAAE;MACnJsC,SAAS,EAAEA,CAAA,KAAMnB,aAAa,CAAC3B,IAAI,CAACQ,UAAU,EAAE;QAACQ,QAAQ,EAAEnB,IAAI,CAACE,KAAK,CAACC,IAAI,CAACQ,UAAU,CAAC,CAACQ,QAAQ;QAAEE,QAAQ,EAAEZ,gBAAgB,CAACN,IAAI,CAACQ,UAAU;MAAC,CAAC,CAAE;MAC/IV,QAAQ,EAAGe,SAAS,IAAKF,iBAAiB,CAACX,IAAI,CAACQ,UAAU,EAAEK,SAAS,CAAE;MAAA4B,QAAA,gBAC1E9C,OAAA,CAACJ,IAAI;QAACS,IAAI,EAAED,KAAK,CAACC,IAAI,CAACQ,UAAU,CAAE;QAACX,IAAI,EAAEA,IAAI,CAACE,KAAK,CAACC,IAAI,CAACQ,UAAU;MAAE;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eAExEvD,OAAA,CAACP,KAAK;QAACuD,UAAU,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAE;QACjCQ,iBAAiB,EAAE,CAACC,SAAS,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAEA,SAAS,CAAE;QACpDC,eAAe;QACfC,MAAM,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAE;QACvBtB,KAAK,EAAE,CAAE;QACTY,QAAQ,EAAE,CAAC5C,IAAI,CAACS,QAAQ,CAAE;QAC1BoC,WAAW,EAAEA,CAAA,KAAMpB,eAAe,CAACzB,IAAI,CAACS,QAAQ,EAAE;UAACO,QAAQ,EAAEnB,IAAI,CAACE,KAAK,CAACC,IAAI,CAACS,QAAQ,CAAC,CAACO,QAAQ;UAAEE,QAAQ,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC;QAAC,CAAC,CAAE;QACrH4B,SAAS,EAAEA,CAAA,KAAMnB,aAAa,CAAC3B,IAAI,CAACS,QAAQ,EAAE;UAACO,QAAQ,EAAEnB,IAAI,CAACE,KAAK,CAACC,IAAI,CAACS,QAAQ,CAAC,CAACO,QAAQ;UAAEE,QAAQ,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC;QAAC,CAAC,CAAE;QACjHpB,QAAQ,EAAGe,SAAS,IAAKF,iBAAiB,CAACX,IAAI,CAACS,QAAQ,EAAEI,SAAS,CAAE;QAAA4B,QAAA,gBACxE9C,OAAA,CAACJ,IAAI;UAACS,IAAI,EAAED,KAAK,CAACC,IAAI,CAACS,QAAQ,CAAE;UAACZ,IAAI,EAAEA,IAAI,CAACE,KAAK,CAACC,IAAI,CAACS,QAAQ;QAAE;UAAAsC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eACpEvD,OAAA,CAACJ,IAAI;UAACS,IAAI,EAAED,KAAK,CAACC,IAAI,CAACuD,cAAc,CAAE;UAAC1D,IAAI,EAAEA,IAAI,CAACE,KAAK,CAACC,IAAI,CAACuD,cAAc;QAAE;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eAChFvD,OAAA,CAACJ,IAAI;UAACS,IAAI,EAAED,KAAK,CAACC,IAAI,CAACwD,IAAI,CAAE;UAAC3D,IAAI,EAAEA,IAAI,CAACE,KAAK,CAACC,IAAI,CAACwD,IAAI;QAAE;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eAE5DvD,OAAA,CAACP,KAAK;UAACuD,UAAU,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAE;UACjCQ,iBAAiB,EAAE,CAACC,SAAS,EAAEA,SAAS,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAE;UACpDE,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;UAClBtB,KAAK,EAAE,IAAK;UACZY,QAAQ,EAAE,CAAC5C,IAAI,CAACU,OAAO,CAAE;UACzBmC,WAAW,EAAEA,CAAA,KAAMpB,eAAe,CAACzB,IAAI,CAACU,OAAO,EAAE;YAACM,QAAQ,EAAEnB,IAAI,CAACE,KAAK,CAACC,IAAI,CAACU,OAAO,CAAC,CAACM,QAAQ;YAAEE,QAAQ,EAAEZ,gBAAgB,CAACN,IAAI,CAACU,OAAO;UAAC,CAAC,CAAE;UAC1IoC,SAAS,EAAEA,CAAA,KAAMnB,aAAa,CAAC3B,IAAI,CAACU,OAAO,EAAE;YAACM,QAAQ,EAAEnB,IAAI,CAACE,KAAK,CAACC,IAAI,CAACU,OAAO,CAAC,CAACM,QAAQ;YAAEE,QAAQ,EAAEZ,gBAAgB,CAACN,IAAI,CAACU,OAAO;UAAC,CAAC,CAAE;UACtIZ,QAAQ,EAAGe,SAAS,IAAKF,iBAAiB,CAACX,IAAI,CAACU,OAAO,EAAEG,SAAS,CAAE;UAAA4B,QAAA,eACvE9C,OAAA,CAACJ,IAAI;YAACS,IAAI,EAAED,KAAK,CAACC,IAAI,CAACU,OAAO,CAAE;YAACb,IAAI,EAAEA,IAAI,CAACE,KAAK,CAACC,IAAI,CAACU,OAAO;UAAE;YAAAqC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/D,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEhB,CAAC;AAED7D,OAAO,CAACoE,OAAO,CAAC,YAAY,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}