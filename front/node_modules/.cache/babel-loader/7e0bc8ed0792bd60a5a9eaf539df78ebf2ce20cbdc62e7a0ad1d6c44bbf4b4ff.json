{"ast":null,"code":"var _jsxFileName = \"/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/components/model/RobotArm.tsx\";\nimport { Gizmo } from '@components/gizmo';\nimport { useGLTF } from '@react-three/drei';\nimport { Robot } from '@types';\nimport Mesh from \"@components/mesh/Mesh\";\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const RobotArm = ({\n  data,\n  onUpdate\n}) => {\n  const {\n    nodes\n  } = useGLTF('/robot.glb');\n  const node = Robot.NodeName;\n  const [previousAbsoluteRotation, setPreviousAbsoluteRotation] = useState({});\n  const handleGizmoUpdate = (nodeName, newRotation) => {\n    // Używamy wartości Y z rotacji (obrót wokół osi Y)\n    const currentDegrees = newRotation[1] * 180 / Math.PI;\n    const prevDegrees = previousAbsoluteRotation[nodeName] || 0;\n\n    // Oblicz zmianę w stopniach\n    let rotationChange = currentDegrees - prevDegrees;\n\n    // Zaokrąglij do 2 miejsc po przecinku aby uniknąć mikro-ruchów\n    rotationChange = Math.round(rotationChange * 100) / 100;\n\n    // Aktualizuj poprzednią pozycję tylko jeśli jest znacząca zmiana\n    if (Math.abs(rotationChange) > 0.1) {\n      setPreviousAbsoluteRotation(prev => ({\n        ...prev,\n        [nodeName]: currentDegrees\n      }));\n      const newData = {\n        nodes: {\n          ...data.nodes,\n          [nodeName]: {\n            ...data.nodes[nodeName],\n            position: data.nodes[nodeName].position,\n            scale: data.nodes[nodeName].scale,\n            rotation: newRotation,\n            rotationDegrees: rotationChange,\n            _updated: true\n          }\n        }\n      };\n\n      // Preserve initial rotations\n      if (newData.nodes) {\n        if (newData.nodes.hand) {\n          newData.nodes.hand.rotation = data.nodes.hand.rotation;\n        }\n        if (newData.nodes.gripper && nodeName !== node.gripper) {\n          newData.nodes.gripper.rotation = data.nodes.gripper.rotation;\n        }\n      }\n      Object.keys(newData.nodes || {}).forEach(key => {\n        // @ts-ignore\n        if (key !== nodeName && newData.nodes && newData.nodes[key]) {\n          // @ts-ignore\n          newData.nodes[key]._updated = false;\n        }\n      });\n      onUpdate(newData);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: /*#__PURE__*/_jsxDEV(Gizmo, {\n      scale: 5,\n      disableTranslation: true,\n      activeAxes: [true, false, true],\n      userData: [node.mainColumn],\n      onUpdate: newMatrix => handleGizmoUpdate(node.mainColumn, newMatrix),\n      children: [/*#__PURE__*/_jsxDEV(Mesh, {\n        node: nodes[node.mainColumn],\n        data: data.nodes[node.mainColumn]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Gizmo, {\n        activeAxes: [false, true, false],\n        translationLimits: [undefined, [-1, .8], undefined],\n        disableRotation: true,\n        anchor: [-0.8, 1.5, 0],\n        scale: 1,\n        userData: [node.upperArm],\n        onUpdate: newMatrix => handleGizmoUpdate(node.upperArm, newMatrix),\n        children: [/*#__PURE__*/_jsxDEV(Mesh, {\n          node: nodes[node.upperArm],\n          data: data.nodes[node.upperArm]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Mesh, {\n          node: nodes[node.wristExtension],\n          data: data.nodes[node.wristExtension]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Mesh, {\n          node: nodes[node.hand],\n          data: data.nodes[node.hand]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Gizmo, {\n          activeAxes: [false, false, true],\n          translationLimits: [undefined, undefined, [0, 0.4]],\n          anchor: [2, 0, 2],\n          scale: 0.75,\n          userData: [node.gripper],\n          onUpdate: newMatrix => handleGizmoUpdate(node.gripper, newMatrix),\n          children: /*#__PURE__*/_jsxDEV(Mesh, {\n            node: nodes[node.gripper],\n            data: data.nodes[node.gripper]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\nuseGLTF.preload('/robot.glb');","map":{"version":3,"names":["Gizmo","useGLTF","Robot","Mesh","useState","jsxDEV","_jsxDEV","RobotArm","data","onUpdate","nodes","node","NodeName","previousAbsoluteRotation","setPreviousAbsoluteRotation","handleGizmoUpdate","nodeName","newRotation","currentDegrees","Math","PI","prevDegrees","rotationChange","round","abs","prev","newData","position","scale","rotation","rotationDegrees","_updated","hand","gripper","Object","keys","forEach","key","children","disableTranslation","activeAxes","userData","mainColumn","newMatrix","fileName","_jsxFileName","lineNumber","columnNumber","translationLimits","undefined","disableRotation","anchor","upperArm","wristExtension","preload"],"sources":["/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/components/model/RobotArm.tsx"],"sourcesContent":["import {Gizmo} from '@components/gizmo'\nimport {useGLTF} from '@react-three/drei'\nimport {Robot} from '@types'\nimport Mesh from \"@components/mesh/Mesh\"\nimport { useState } from 'react';\n\ninterface RobotProps {\n    data: Robot.RobotNodes;\n    onUpdate: (newData: Partial<Robot.RobotNodes>) => void;\n}\n\nexport const RobotArm = ({data, onUpdate}: RobotProps) => {\n    const {nodes} = useGLTF('/robot.glb') as unknown as Robot.DreiGLTF;\n    const node = Robot.NodeName;\n    const [previousAbsoluteRotation, setPreviousAbsoluteRotation] = useState<{[key: string]: number}>({});\n\n\n    const handleGizmoUpdate = (nodeName: Robot.NodeName, newRotation: [number, number, number]) => {\n        // Używamy wartości Y z rotacji (obrót wokół osi Y)\n        const currentDegrees = (newRotation[1] * 180) / Math.PI;\n        const prevDegrees = previousAbsoluteRotation[nodeName] || 0;\n        \n        // Oblicz zmianę w stopniach\n        let rotationChange = currentDegrees - prevDegrees;\n        \n        // Zaokrąglij do 2 miejsc po przecinku aby uniknąć mikro-ruchów\n        rotationChange = Math.round(rotationChange * 100) / 100;\n        \n        // Aktualizuj poprzednią pozycję tylko jeśli jest znacząca zmiana\n        if (Math.abs(rotationChange) > 0.1) {\n            setPreviousAbsoluteRotation(prev => ({\n                ...prev,\n                [nodeName]: currentDegrees\n            }));\n            \n            const newData: Partial<Robot.RobotNodes> = {\n                nodes: {\n                    ...data.nodes,\n                    [nodeName]: {\n                        ...data.nodes[nodeName],\n                        position: data.nodes[nodeName].position,\n                        scale: data.nodes[nodeName].scale,\n                        rotation: newRotation,\n                        rotationDegrees: rotationChange,\n                        _updated: true\n                    }\n                }\n            };\n\n            // Preserve initial rotations\n            if (newData.nodes) {\n                if (newData.nodes.hand) {\n                    newData.nodes.hand.rotation = data.nodes.hand.rotation;\n                }\n                if (newData.nodes.gripper && nodeName !== node.gripper) {\n                    newData.nodes.gripper.rotation = data.nodes.gripper.rotation;\n                }\n            }\n\n            Object.keys(newData.nodes || {}).forEach((key) => {\n                // @ts-ignore\n                if (key !== nodeName && newData.nodes && newData.nodes[key]) {\n                    // @ts-ignore\n                    newData.nodes[key]._updated = false;\n                }\n            });\n\n            onUpdate(newData);\n        }\n    };\n\n    return (\n        <group>\n            <Gizmo scale={5}\n                   disableTranslation\n                   activeAxes={[true, false, true]}\n                   userData={[node.mainColumn]}\n                   onUpdate={(newMatrix) => handleGizmoUpdate(node.mainColumn, newMatrix)}>\n                <Mesh node={nodes[node.mainColumn]} data={data.nodes[node.mainColumn]}/>\n\n                <Gizmo activeAxes={[false, true, false]}\n                       translationLimits={[undefined, [-1, .8], undefined]}\n                       disableRotation\n                       anchor={[-0.8, 1.5, 0]}\n                       scale={1}\n                       userData={[node.upperArm]}\n                       onUpdate={(newMatrix) => handleGizmoUpdate(node.upperArm, newMatrix)}>\n\n                    <Mesh node={nodes[node.upperArm]} data={data.nodes[node.upperArm]}/>\n                    <Mesh node={nodes[node.wristExtension]} data={data.nodes[node.wristExtension]}/>\n                    <Mesh node={nodes[node.hand]} data={data.nodes[node.hand]}/>\n\n                    <Gizmo activeAxes={[false, false, true]}\n                           translationLimits={[undefined, undefined, [0, 0.4]]}\n                           anchor={[2, 0, 2]}\n                           scale={0.75}\n                           userData={[node.gripper]}\n                           onUpdate={(newMatrix) => handleGizmoUpdate(node.gripper, newMatrix)}>\n                        <Mesh node={nodes[node.gripper]} data={data.nodes[node.gripper]}/>\n                    </Gizmo>\n                </Gizmo>\n            </Gizmo>\n        </group>\n    );\n};\n\nuseGLTF.preload('/robot.glb');"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}