{"ast":null,"code":"var _jsxFileName = \"/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/components/gizmo/Translate.tsx\";\nimport React, { useContext, useCallback, useMemo, useRef, useState } from 'react';\nimport { useThree } from '@react-three/fiber';\nimport { Line, Html } from '@react-three/drei';\nimport { context } from './context';\nimport { Vector3, Matrix4, Quaternion } from 'three';\nimport { calculateOffset } from '@utils';\n\n/**\n * Translate lets the user drag the gizmo and, with it, the child objects over the configured translation axis/axes\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Translate = ({\n  axis\n}) => {\n  // get the gizmo config & event implementations from context\n  const {\n    translationLimits,\n    scale,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    userData\n  } = useContext(context);\n\n  // determine direction.\n  const direction = axis === 0 ? new Vector3(1, 0, 0) : axis === 1 ? new Vector3(0, 1, 0) : new Vector3(0, 0, 1);\n\n  // get a handle on the cam controls to enable/disable while operating the gizmo\n  const camControls = useThree(state => state.controls);\n\n  // the label showing the translated value\n  const translationLabel = useRef(null);\n\n  // Object3D group for this Gizmo\n  const gizmoGroup = useRef(null);\n\n  // ref to keep info where the mouse/pointer click occurred\n  const clickInfo = useRef(null);\n\n  // the offset calculated on start and used while moving\n  const offset0 = useRef(0);\n\n  // is the mouse hovering over the gizmo. we change the color when hovering over\n  const [isHovered, setIsHovered] = useState(false);\n  const translation = useRef([0, 0, 0]);\n\n  /**\n   * On pointer down (click) we prepare to start dragging\n   */\n  const onPointerDown = useCallback(event => {\n    // update label with current translation value for this axis and show it\n    translationLabel.current.innerText = `${translation.current[axis].toFixed(2)}`;\n    translationLabel.current.style.display = 'block';\n\n    // stopPropagation will stop underlying handlers from firing\n    event.stopPropagation();\n\n    // get the xyz vector for the mouse click\n    const clickPoint = event.point.clone();\n\n    // @todo learn what is going on here\n    const rotation = new Matrix4().extractRotation(gizmoGroup.current.matrixWorld);\n    const origin = new Vector3().setFromMatrixPosition(gizmoGroup.current.matrixWorld);\n    const dir = direction.clone().applyMatrix4(rotation).normalize();\n\n    // set the click info\n    clickInfo.current = {\n      clickPoint,\n      dir\n    };\n    offset0.current = translation.current[axis];\n\n    // invoke drag start for translation operation\n    onDragStart({\n      action: 'Translate',\n      axis,\n      origin,\n      directions: [dir]\n    });\n\n    // disable the cam controls to avoid it fighting with the gizmo movements\n    camControls && (camControls.enabled = false);\n\n    // @ts-ignore - setPointerCapture is not in the type definition\n    event.target.setPointerCapture(event.pointerId);\n  }, [direction, camControls, onDragStart, translation, axis]);\n\n  /**\n   * Mouse/pointer moving\n   */\n  const onPointerMove = useCallback(event => {\n    // stopPropagation will stop underlying handlers from firing\n    event.stopPropagation();\n    if (!isHovered) setIsHovered(true);\n    if (clickInfo.current) {\n      const {\n        clickPoint,\n        dir\n      } = clickInfo.current;\n\n      /**\n       * Check if we are still within translation limits\n       */\n      const [min, max] = (translationLimits === null || translationLimits === void 0 ? void 0 : translationLimits[axis]) || [undefined, undefined];\n      let offset = calculateOffset(clickPoint, dir, event.ray.origin, event.ray.direction);\n      if (min !== undefined) offset = Math.max(offset, min - offset0.current);\n      if (max !== undefined) offset = Math.min(offset, max - offset0.current);\n\n      // set the current translation\n      translation.current[axis] = offset0.current + offset;\n\n      // update label with translation value\n      translationLabel.current.innerText = `${translation.current[axis].toFixed(2)}`;\n\n      // create and calculate the offset matrix for the on drag method\n      const offsetMatrix = new Matrix4().makeTranslation(dir.x * offset, dir.y * offset, dir.z * offset);\n\n      // invoke the onDrag method with the calculated offset matrix\n      onDrag(offsetMatrix);\n    }\n  }, [onDrag, isHovered, translation, translationLimits, axis]);\n\n  /**\n   * Pointer up ends the gizmo interaction\n   */\n  const onPointerUp = useCallback(event => {\n    // hide label\n    translationLabel.current.style.display = 'none';\n\n    // avoid handlers firing\n    event.stopPropagation();\n\n    // reset click info\n    clickInfo.current = null;\n\n    // call the onDragEnd\n    onDragEnd();\n\n    // give cam controls back\n    camControls && (camControls.enabled = true);\n\n    // @ts-ignore - releasePointerCapture & PointerEvent#pointerId is not in the type definition\n    event.target.releasePointerCapture(event.pointerId);\n  }, [camControls, onDragEnd]);\n\n  /**\n   * In the pointer out we mark hovered as false\n   */\n  const onPointerOut = useCallback(event => {\n    // avoid handlers firing\n    event.stopPropagation();\n    setIsHovered(false);\n  }, []);\n\n  // calculate properties for the translation arrow meshes\n  const {\n    cylinderLength,\n    coneWidth,\n    coneLength,\n    matrix\n  } = useMemo(() => {\n    const coneWidth = scale / 20;\n    const coneLength = scale / 5;\n    const cylinderLength = scale - coneLength;\n    const quaternion = new Quaternion().setFromUnitVectors(new Vector3(0, 1, 0), direction.clone().normalize());\n    const matrixL = new Matrix4().makeRotationFromQuaternion(quaternion);\n    return {\n      cylinderLength,\n      coneWidth,\n      coneLength,\n      matrix: matrixL\n    };\n  }, [direction, scale]);\n\n  // colors of the axes and a hover color\n  const axisColors = ['#ff2060', '#20df80', '#2080ff'];\n  const color = isHovered ? '#ffff40' : axisColors[axis];\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: gizmoGroup,\n    children: /*#__PURE__*/_jsxDEV(\"group\", {\n      matrix: matrix,\n      matrixAutoUpdate: false,\n      onPointerDown: onPointerDown,\n      onPointerMove: onPointerMove,\n      onPointerUp: onPointerUp,\n      onPointerOut: onPointerOut,\n      children: [/*#__PURE__*/_jsxDEV(Html, {\n        position: [0, -coneLength, 0],\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'none',\n            fontFamily: 'monospace',\n            background: '#F84823',\n            color: 'white',\n            padding: '6px 8px',\n            borderRadius: 7,\n            whiteSpace: 'nowrap'\n          },\n          ref: translationLabel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n        visible: false,\n        position: [0, (cylinderLength + coneLength) / 2.0, 0],\n        userData: userData,\n        children: /*#__PURE__*/_jsxDEV(\"cylinderGeometry\", {\n          args: [coneWidth * 1.4, coneWidth * 1.4, cylinderLength + coneLength, 8, 1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        transparent: true,\n        raycast: () => null,\n        points: [0, 0, 0, 0, cylinderLength, 0],\n        lineWidth: 2,\n        color: color,\n        polygonOffset: true,\n        renderOrder: 1,\n        polygonOffsetFactor: -10\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n        raycast: () => null,\n        position: [0, cylinderLength + coneLength / 2.0, 0],\n        renderOrder: 500,\n        children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n          args: [coneWidth, coneLength, 24, 1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n          transparent: true,\n          color: color\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"names":["React","useContext","useCallback","useMemo","useRef","useState","useThree","Line","Html","context","Vector3","Matrix4","Quaternion","calculateOffset","jsxDEV","_jsxDEV","Translate","axis","translationLimits","scale","onDragStart","onDrag","onDragEnd","userData","direction","camControls","state","controls","translationLabel","gizmoGroup","clickInfo","offset0","isHovered","setIsHovered","translation","onPointerDown","event","current","innerText","toFixed","style","display","stopPropagation","clickPoint","point","clone","rotation","extractRotation","matrixWorld","origin","setFromMatrixPosition","dir","applyMatrix4","normalize","action","directions","enabled","target","setPointerCapture","pointerId","onPointerMove","min","max","undefined","offset","ray","Math","offsetMatrix","makeTranslation","x","y","z","onPointerUp","releasePointerCapture","onPointerOut","cylinderLength","coneWidth","coneLength","matrix","quaternion","setFromUnitVectors","matrixL","makeRotationFromQuaternion","axisColors","color","ref","children","matrixAutoUpdate","position","fontFamily","background","padding","borderRadius","whiteSpace","fileName","_jsxFileName","lineNumber","columnNumber","visible","args","transparent","raycast","points","lineWidth","polygonOffset","renderOrder","polygonOffsetFactor"],"sources":["/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/components/gizmo/Translate.tsx"],"sourcesContent":[" \nimport React, {useContext, useCallback, useMemo, useRef, useState, FC} from 'react'\nimport {ThreeEvent, useThree} from '@react-three/fiber'\nimport {Line, Html} from '@react-three/drei'\nimport {context} from './context'\nimport {Vector3, Matrix4, Group, Quaternion} from 'three'\nimport {calculateOffset} from '@utils'\n\n/**\n * Translate lets the user drag the gizmo and, with it, the child objects over the configured translation axis/axes\n */\nexport const Translate: FC<{ axis: 0 | 1 | 2 }> = ({axis}) => {\n\n    // get the gizmo config & event implementations from context\n    const {\n        translationLimits,\n        scale,\n        onDragStart,\n        onDrag,\n        onDragEnd,\n        userData\n    } = useContext(context)\n\n    // determine direction.\n    const direction =\n        axis === 0 ? new Vector3(1, 0, 0) :\n            axis === 1 ? new Vector3(0, 1, 0) : new Vector3(0, 0, 1)\n\n    // get a handle on the cam controls to enable/disable while operating the gizmo\n    const camControls = useThree((state) => state.controls) as unknown as { enabled: boolean }\n\n    // the label showing the translated value\n    const translationLabel = useRef<HTMLDivElement>(null!)\n\n    // Object3D group for this Gizmo\n    const gizmoGroup = useRef<Group>(null!)\n\n    // ref to keep info where the mouse/pointer click occurred\n    const clickInfo = useRef<{ clickPoint: Vector3; dir: Vector3 } | null>(null)\n\n    // the offset calculated on start and used while moving\n    const offset0 = useRef<number>(0)\n\n    // is the mouse hovering over the gizmo. we change the color when hovering over\n    const [isHovered, setIsHovered] = useState(false)\n\n    const translation = useRef<[number, number, number]>([0, 0, 0])\n\n    /**\n     * On pointer down (click) we prepare to start dragging\n     */\n    const onPointerDown = useCallback((event: ThreeEvent<PointerEvent>) => {\n\n            // update label with current translation value for this axis and show it\n            translationLabel.current.innerText = `${translation.current[axis].toFixed(2)}`\n            translationLabel.current.style.display = 'block'\n\n            // stopPropagation will stop underlying handlers from firing\n            event.stopPropagation()\n\n            // get the xyz vector for the mouse click\n            const clickPoint = event.point.clone()\n\n            // @todo learn what is going on here\n            const rotation = new Matrix4().extractRotation(gizmoGroup.current.matrixWorld)\n            const origin = new Vector3().setFromMatrixPosition(gizmoGroup.current.matrixWorld)\n            const dir = direction.clone().applyMatrix4(rotation).normalize()\n\n            // set the click info\n            clickInfo.current = {clickPoint, dir}\n            offset0.current = translation.current[axis]\n\n            // invoke drag start for translation operation\n            onDragStart({action: 'Translate', axis, origin, directions: [dir]})\n\n            // disable the cam controls to avoid it fighting with the gizmo movements\n            camControls && (camControls.enabled = false)\n\n            // @ts-ignore - setPointerCapture is not in the type definition\n            event.target.setPointerCapture(event.pointerId)\n\n        }, [direction, camControls, onDragStart, translation, axis]\n    )\n\n    /**\n     * Mouse/pointer moving\n     */\n    const onPointerMove = useCallback((event: ThreeEvent<PointerEvent>) => {\n\n            // stopPropagation will stop underlying handlers from firing\n            event.stopPropagation()\n\n            if (!isHovered) setIsHovered(true)\n\n            if (clickInfo.current) {\n\n                const {clickPoint, dir} = clickInfo.current\n\n                /**\n                 * Check if we are still within translation limits\n                 */\n                const [min, max] = translationLimits?.[axis] || [undefined, undefined]\n                let offset = calculateOffset(clickPoint, dir, event.ray.origin, event.ray.direction)\n                if (min !== undefined) offset = Math.max(offset, min - offset0.current)\n                if (max !== undefined) offset = Math.min(offset, max - offset0.current)\n\n                // set the current translation\n                translation.current[axis] = offset0.current + offset\n\n                // update label with translation value\n                translationLabel.current.innerText = `${translation.current[axis].toFixed(2)}`\n\n                // create and calculate the offset matrix for the on drag method\n                const offsetMatrix = new Matrix4().makeTranslation(dir.x * offset, dir.y * offset, dir.z * offset)\n\n                // invoke the onDrag method with the calculated offset matrix\n                onDrag(offsetMatrix)\n            }\n\n        }, [onDrag, isHovered, translation, translationLimits, axis]\n    )\n\n    /**\n     * Pointer up ends the gizmo interaction\n     */\n    const onPointerUp = useCallback((event: ThreeEvent<PointerEvent>) => {\n\n            // hide label\n            translationLabel.current.style.display = 'none'\n\n            // avoid handlers firing\n            event.stopPropagation()\n\n            // reset click info\n            clickInfo.current = null\n\n            // call the onDragEnd\n            onDragEnd()\n\n            // give cam controls back\n            camControls && (camControls.enabled = true)\n\n            // @ts-ignore - releasePointerCapture & PointerEvent#pointerId is not in the type definition\n            event.target.releasePointerCapture(event.pointerId)\n\n        }, [camControls, onDragEnd]\n    )\n\n    /**\n     * In the pointer out we mark hovered as false\n     */\n    const onPointerOut = useCallback((event: ThreeEvent<PointerEvent>) => {\n        // avoid handlers firing\n        event.stopPropagation()\n        setIsHovered(false)\n    }, [])\n\n    // calculate properties for the translation arrow meshes\n    const {cylinderLength, coneWidth, coneLength, matrix} = useMemo(() => {\n        const coneWidth = scale / 20\n        const coneLength = scale / 5\n        const cylinderLength = scale - coneLength\n        const quaternion = new Quaternion().setFromUnitVectors(new Vector3(0, 1, 0), direction.clone().normalize())\n        const matrixL = new Matrix4().makeRotationFromQuaternion(quaternion)\n        return {cylinderLength, coneWidth, coneLength, matrix: matrixL}\n    }, [direction, scale])\n\n    // colors of the axes and a hover color\n    const axisColors = ['#ff2060', '#20df80', '#2080ff']\n    const color = isHovered ? '#ffff40' : axisColors[axis]\n\n    return (\n        <group ref={gizmoGroup}>\n\n            {/** group on which we set the gizmo event implementations */}\n            <group\n                matrix={matrix}\n                matrixAutoUpdate={false}\n                onPointerDown={onPointerDown}\n                onPointerMove={onPointerMove}\n                onPointerUp={onPointerUp}\n                onPointerOut={onPointerOut}>\n\n                {/** the label showing the translation value */}\n                <Html position={[0, -coneLength, 0]}>\n                    <div\n                        style={{\n                            display: 'none',\n                            fontFamily: 'monospace',\n                            background: '#F84823',\n                            color: 'white',\n                            padding: '6px 8px',\n                            borderRadius: 7,\n                            whiteSpace: 'nowrap'\n                        }}\n                        ref={translationLabel}\n                    />\n                </Html>\n\n                {/* The invisible mesh being raycast\n                    @todo learn how this works\n                 */}\n                <mesh visible={false} position={[0, (cylinderLength + coneLength) / 2.0, 0]} userData={userData}>\n                    <cylinderGeometry args={[coneWidth * 1.4, coneWidth * 1.4, cylinderLength + coneLength, 8, 1]}/>\n                </mesh>\n\n                {/* The visible mesh */}\n                <Line transparent\n                      raycast={() => null}\n                      points={[0, 0, 0, 0, cylinderLength, 0]}\n                      lineWidth={2}\n                      color={color}\n                      polygonOffset\n                      renderOrder={1}\n                      polygonOffsetFactor={-10}/>\n                <mesh raycast={() => null} position={[0, cylinderLength + coneLength / 2.0, 0]} renderOrder={500}>\n                    <coneGeometry args={[coneWidth, coneLength, 24, 1]}/>\n                    <meshBasicMaterial transparent={true} color={color}/>\n                </mesh>\n\n            </group>\n        </group>\n    )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}