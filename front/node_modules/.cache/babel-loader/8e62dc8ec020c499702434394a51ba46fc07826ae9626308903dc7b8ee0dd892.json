{"ast":null,"code":"var _jsxFileName = \"/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/components/model/RobotArm.tsx\";\n// @ts-nocheck\nimport { Gizmo } from '@components/gizmo';\nimport { useGLTF } from '@react-three/drei';\nimport { Robot } from '@types';\nimport Mesh from \"@components/mesh/Mesh\";\nimport { useState } from 'react';\nimport { Euler } from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const RobotArm = ({\n  data,\n  onUpdate\n}) => {\n  const {\n    nodes\n  } = useGLTF('/robot.glb');\n  const node = Robot.NodeName;\n  const [startRotation, setStartRotation] = useState({});\n  const [startPosition, setStartPosition] = useState({});\n  const [currentPositions, setCurrentPositions] = useState({});\n  const [currentRotations, setCurrentRotations] = useState({\n    [node.mainColumn]: [0, 0, 0],\n    [node.upperArm]: [0, 0, 0],\n    [node.gripper]: [0, 0, 0]\n  });\n  const handleGizmoUpdate = (nodeName, transform) => {\n    if (nodeName === node.upperArm) {\n      const height = transform.position[1];\n      setCurrentPositions(prev => ({\n        ...prev,\n        [nodeName]: height\n      }));\n      console.log(`Current height for ${nodeName}:`, height);\n    } else if (nodeName === node.gripper) {\n      const position = transform.position[2]; // Use Z axis for gripper\n      setCurrentPositions(prev => ({\n        ...prev,\n        [nodeName]: position\n      }));\n      console.log(`Current position for ${nodeName}:`, position);\n    } else {\n      setCurrentRotations(prev => ({\n        ...prev,\n        [nodeName]: transform.rotation\n      }));\n      const euler = new Euler().fromArray(transform.rotation);\n      const currentDegrees = euler.y * 180 / Math.PI;\n      console.log(`Current rotation for ${nodeName}:`, currentDegrees);\n    }\n  };\n  const handleDragStart = (nodeName, transform) => {\n    if (nodeName === node.upperArm) {\n      setStartPosition(prev => ({\n        ...prev,\n        [nodeName]: transform.position[1]\n      }));\n      setCurrentPositions(prev => ({\n        ...prev,\n        [nodeName]: transform.position[1]\n      }));\n      console.log(`Start height for ${nodeName}:`, transform.position[1]);\n    } else if (nodeName === node.gripper) {\n      setStartPosition(prev => ({\n        ...prev,\n        [nodeName]: transform.position[2]\n      }));\n      setCurrentPositions(prev => ({\n        ...prev,\n        [nodeName]: transform.position[2]\n      }));\n      console.log(`Start position for ${nodeName}:`, transform.position[2]);\n    } else {\n      const euler = new Euler().fromArray(transform.rotation);\n      const degrees = euler.y * 180 / Math.PI;\n      setStartRotation(prev => ({\n        ...prev,\n        [nodeName]: degrees\n      }));\n      console.log(`Start rotation for ${nodeName}:`, degrees);\n    }\n  };\n  const handleDragEnd = nodeName => {\n    const newData = {\n      nodes: {\n        ...data.nodes\n      }\n    };\n    if (nodeName === node.upperArm) {\n      const currentHeight = currentPositions[nodeName] || 0;\n      const initialHeight = startPosition[nodeName] || 0;\n      const heightChange = currentHeight - initialHeight;\n      const angleChange = heightChange * 90 * -1 * 2;\n      console.log(\"==>> currentHeight:\", currentHeight);\n      console.log(\"==>> initialHeight:\", initialHeight);\n      console.log(\"==>> heightChange:\", heightChange);\n      console.log(\"==>> angleChange:\", angleChange);\n      newData.nodes[nodeName] = {\n        ...data.nodes[nodeName],\n        position: [data.nodes[nodeName].position[0], currentHeight, data.nodes[nodeName].position[2]],\n        scale: data.nodes[nodeName].scale,\n        rotation: data.nodes[nodeName].rotation,\n        rotationDegrees: angleChange,\n        _updated: true\n      };\n      console.log(`Sending height change as angle for ${nodeName}:`, angleChange);\n    }\n    if (nodeName === node.gripper) {\n      const currentPosition = currentPositions[nodeName] || 0;\n      const initialPosition = startPosition[nodeName] || 0;\n      const positionChange = currentPosition - initialPosition;\n      const angleChange = positionChange * 90 * -1 * 2;\n      console.log(\"==>> currentPosition:\", currentPosition);\n      console.log(\"==>> initialPosition:\", initialPosition);\n      console.log(\"==>> positionChange:\", positionChange);\n      console.log(\"==>> angleChange:\", angleChange);\n      newData.nodes[nodeName] = {\n        ...data.nodes[nodeName],\n        position: [data.nodes[nodeName].position[0], data.nodes[nodeName].position[1], currentPosition],\n        scale: data.nodes[nodeName].scale,\n        rotation: data.nodes[nodeName].rotation,\n        rotationDegrees: angleChange,\n        _updated: true\n      };\n      console.log(`Sending position change as angle for ${nodeName}:`, angleChange);\n    }\n    if (nodeName === node.mainColumn) {\n      const euler = new Euler().fromArray(currentRotations[nodeName]);\n      const endDegrees = euler.y * 180 / Math.PI;\n      let totalRotation = endDegrees - (startRotation[nodeName] || 0);\n      if (nodeName === node.mainColumn) {\n        totalRotation *= 4;\n      }\n      console.log(666, 'nodeName:', nodeName);\n      if (nodeName === node.gripper) {\n        console.log(666, 'totalRotation:', totalRotation);\n        totalRotation *= 0.5;\n      }\n      newData.nodes[nodeName] = {\n        ...data.nodes[nodeName],\n        position: data.nodes[nodeName].position,\n        scale: data.nodes[nodeName].scale,\n        rotation: currentRotations[nodeName],\n        rotationDegrees: totalRotation,\n        _updated: true\n      };\n      console.log(`Sending rotation to robot for ${nodeName}:`, totalRotation);\n    }\n    Object.keys(data.nodes).forEach(key => {\n      if (key !== nodeName) {\n        newData.nodes[key] = {\n          ...data.nodes[key],\n          _updated: false\n        };\n      }\n    });\n    onUpdate(newData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: /*#__PURE__*/_jsxDEV(Gizmo, {\n      scale: 5,\n      disableTranslation: true,\n      activeAxes: [true, false, true],\n      userData: [node.mainColumn],\n      onDragStart: () => handleDragStart(node.mainColumn, {\n        position: data.nodes[node.mainColumn].position,\n        rotation: currentRotations[node.mainColumn]\n      }),\n      onDragEnd: () => handleDragEnd(node.mainColumn),\n      onUpdate: transform => handleGizmoUpdate(node.mainColumn, transform),\n      children: [/*#__PURE__*/_jsxDEV(Mesh, {\n        node: nodes[node.mainColumn],\n        data: data.nodes[node.mainColumn]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Gizmo, {\n        activeAxes: [false, true, false],\n        translationLimits: [undefined, [-1, .8], undefined],\n        disableRotation: true,\n        anchor: [-0.8, 1.5, 0],\n        scale: 1,\n        userData: [node.upperArm],\n        onDragStart: () => handleDragStart(node.upperArm, {\n          position: data.nodes[node.upperArm].position,\n          rotation: [0, 0, 0]\n        }),\n        onDragEnd: () => handleDragEnd(node.upperArm),\n        onUpdate: transform => handleGizmoUpdate(node.upperArm, transform),\n        children: [/*#__PURE__*/_jsxDEV(Mesh, {\n          node: nodes[node.upperArm],\n          data: data.nodes[node.upperArm]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Mesh, {\n          node: nodes[node.wristExtension],\n          data: data.nodes[node.wristExtension]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Mesh, {\n          node: nodes[node.hand],\n          data: data.nodes[node.hand]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Gizmo, {\n          activeAxes: [false, false, true],\n          translationLimits: [undefined, undefined, [0, 0.4]],\n          anchor: [2, 0, 2],\n          scale: 0.75,\n          userData: [node.gripper],\n          onDragStart: () => handleDragStart(node.gripper, {\n            position: data.nodes[node.gripper].position,\n            rotation: [0, 0, 0]\n          }),\n          onDragEnd: () => handleDragEnd(node.gripper),\n          onUpdate: transform => handleGizmoUpdate(node.gripper, transform),\n          children: /*#__PURE__*/_jsxDEV(Mesh, {\n            node: nodes[node.gripper],\n            data: data.nodes[node.gripper]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 9\n  }, this);\n};\nuseGLTF.preload('/robot.glb');","map":{"version":3,"names":["Gizmo","useGLTF","Robot","Mesh","useState","Euler","jsxDEV","_jsxDEV","RobotArm","data","onUpdate","nodes","node","NodeName","startRotation","setStartRotation","startPosition","setStartPosition","currentPositions","setCurrentPositions","currentRotations","setCurrentRotations","mainColumn","upperArm","gripper","handleGizmoUpdate","nodeName","transform","height","position","prev","console","log","rotation","euler","fromArray","currentDegrees","y","Math","PI","handleDragStart","degrees","handleDragEnd","newData","currentHeight","initialHeight","heightChange","angleChange","scale","rotationDegrees","_updated","currentPosition","initialPosition","positionChange","endDegrees","totalRotation","Object","keys","forEach","key","children","disableTranslation","activeAxes","userData","onDragStart","onDragEnd","fileName","_jsxFileName","lineNumber","columnNumber","translationLimits","undefined","disableRotation","anchor","wristExtension","hand","preload"],"sources":["/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/components/model/RobotArm.tsx"],"sourcesContent":["// @ts-nocheck\nimport {Gizmo} from '@components/gizmo'\nimport {useGLTF} from '@react-three/drei'\nimport {Robot} from '@types'\nimport Mesh from \"@components/mesh/Mesh\"\nimport { useState } from 'react';\nimport { Euler } from 'three';\n\ninterface RobotProps {\n    data: Robot.RobotNodes;\n    onUpdate: (newData: Partial<Robot.RobotNodes>) => void;\n}\n\nexport const RobotArm = ({data, onUpdate}: RobotProps) => {\n    const {nodes} = useGLTF('/robot.glb') as unknown as Robot.DreiGLTF;\n    const node = Robot.NodeName;\n    const [startRotation, setStartRotation] = useState<{[key: string]: number}>({});\n    const [startPosition, setStartPosition] = useState<{[key: string]: number}>({});\n    const [currentPositions, setCurrentPositions] = useState<{[key: string]: number}>({});\n    const [currentRotations, setCurrentRotations] = useState<{[key: string]: [number, number, number]}>({\n        [node.mainColumn]: [0,0,0],\n        [node.upperArm]: [0,0,0],\n        [node.gripper]: [0,0,0]\n    });\n    \n    const handleGizmoUpdate = (nodeName: Robot.NodeName, transform: { position: [number, number, number], rotation: [number, number, number] }) => {\n        if (nodeName === node.upperArm) {\n            const height = transform.position[1];\n            setCurrentPositions(prev => ({\n                ...prev,\n                [nodeName]: height\n            }));\n            console.log(`Current height for ${nodeName}:`, height);\n        } else if (nodeName === node.gripper) {\n            const position = transform.position[2]; // Use Z axis for gripper\n            setCurrentPositions(prev => ({\n                ...prev,\n                [nodeName]: position\n            }));\n            console.log(`Current position for ${nodeName}:`, position);\n        } else {\n            setCurrentRotations(prev => ({\n                ...prev,\n                [nodeName]: transform.rotation\n            }));\n            const euler = new Euler().fromArray(transform.rotation);\n            const currentDegrees = (euler.y * 180) / Math.PI;\n            console.log(`Current rotation for ${nodeName}:`, currentDegrees);\n        }\n    };\n\n    const handleDragStart = (nodeName: Robot.NodeName, transform: { position: [number, number, number], rotation: [number, number, number] }) => {\n        if (nodeName === node.upperArm) {\n            setStartPosition(prev => ({\n                ...prev,\n                [nodeName]: transform.position[1]\n            }));\n            setCurrentPositions(prev => ({\n                ...prev,\n                [nodeName]: transform.position[1]\n            }));\n            console.log(`Start height for ${nodeName}:`, transform.position[1]);\n        } else if (nodeName === node.gripper) {\n            setStartPosition(prev => ({\n                ...prev,\n                [nodeName]: transform.position[2]\n            }));\n            setCurrentPositions(prev => ({\n                ...prev,\n                [nodeName]: transform.position[2]\n            }));\n            console.log(`Start position for ${nodeName}:`, transform.position[2]);\n        } else {\n            const euler = new Euler().fromArray(transform.rotation);\n            const degrees = (euler.y * 180) / Math.PI;\n            setStartRotation(prev => ({\n                ...prev,\n                [nodeName]: degrees\n            }));\n            console.log(`Start rotation for ${nodeName}:`, degrees);\n        }\n    };\n\n    const handleDragEnd = (nodeName: Robot.NodeName) => {\n        const newData: Partial<Robot.RobotNodes> = {\n            nodes: {\n                ...data.nodes,\n            }\n        };\n\n        if (nodeName === node.upperArm) {\n            const currentHeight = currentPositions[nodeName] || 0;\n            const initialHeight = startPosition[nodeName] || 0;\n            const heightChange = currentHeight - initialHeight;\n            const angleChange = heightChange * 90 * -1 * 2;\n\n            console.log(\"==>> currentHeight:\", currentHeight);\n            console.log(\"==>> initialHeight:\", initialHeight);\n            console.log(\"==>> heightChange:\", heightChange);\n            console.log(\"==>> angleChange:\", angleChange);\n\n            newData.nodes[nodeName] = {\n                ...data.nodes[nodeName],\n                position: [data.nodes[nodeName].position[0], currentHeight, data.nodes[nodeName].position[2]],\n                scale: data.nodes[nodeName].scale,\n                rotation: data.nodes[nodeName].rotation,\n                rotationDegrees: angleChange,\n                _updated: true\n            };\n\n            console.log(`Sending height change as angle for ${nodeName}:`, angleChange);\n        } \n        \n        if (nodeName === node.gripper) {\n            const currentPosition = currentPositions[nodeName] || 0;\n            const initialPosition = startPosition[nodeName] || 0;\n            const positionChange = currentPosition - initialPosition;\n            const angleChange = positionChange * 90 * -1 * 2;\n\n            console.log(\"==>> currentPosition:\", currentPosition);\n            console.log(\"==>> initialPosition:\", initialPosition);\n            console.log(\"==>> positionChange:\", positionChange);\n            console.log(\"==>> angleChange:\", angleChange);\n\n            newData.nodes[nodeName] = {\n                ...data.nodes[nodeName],\n                position: [data.nodes[nodeName].position[0], data.nodes[nodeName].position[1], currentPosition],\n                scale: data.nodes[nodeName].scale,\n                rotation: data.nodes[nodeName].rotation,\n                rotationDegrees: angleChange,\n                _updated: true\n            };\n\n            console.log(`Sending position change as angle for ${nodeName}:`, angleChange);\n        } \n        \n        if (nodeName === node.mainColumn) {\n            const euler = new Euler().fromArray(currentRotations[nodeName]);\n            const endDegrees = (euler.y * 180) / Math.PI;\n            let totalRotation = endDegrees - (startRotation[nodeName] || 0);\n\n            if (nodeName === node.mainColumn) {\n                totalRotation *= 4;\n            }\n\n            console.log(666,  'nodeName:', nodeName)\n            if (nodeName === node.gripper) {\n                console.log(666,  'totalRotation:', totalRotation)\n                totalRotation *= 0.5;\n            }\n\n            newData.nodes[nodeName] = {\n                ...data.nodes[nodeName],\n                position: data.nodes[nodeName].position,\n                scale: data.nodes[nodeName].scale,\n                rotation: currentRotations[nodeName],\n                rotationDegrees: totalRotation,\n                _updated: true\n            };\n\n            console.log(`Sending rotation to robot for ${nodeName}:`, totalRotation);\n        }\n\n        Object.keys(data.nodes).forEach((key) => {\n            if (key !== nodeName) {\n                newData.nodes[key] = {\n                    ...data.nodes[key],\n                    _updated: false\n                };\n            }\n        });\n\n        onUpdate(newData);\n    };\n\n    return (\n        <group>\n            <Gizmo scale={5}\n                   disableTranslation\n                   activeAxes={[true, false, true]}\n                   userData={[node.mainColumn]}\n                   onDragStart={() => handleDragStart(node.mainColumn, {position: data.nodes[node.mainColumn].position, rotation: currentRotations[node.mainColumn]})}\n                   onDragEnd={() => handleDragEnd(node.mainColumn)}\n                   onUpdate={(transform) => handleGizmoUpdate(node.mainColumn, transform)}>\n                <Mesh node={nodes[node.mainColumn]} data={data.nodes[node.mainColumn]}/>\n\n                <Gizmo activeAxes={[false, true, false]}\n                       translationLimits={[undefined, [-1, .8], undefined]}\n                       disableRotation\n                       anchor={[-0.8, 1.5, 0]}\n                       scale={1}\n                       userData={[node.upperArm]}\n                       onDragStart={() => handleDragStart(node.upperArm, {position: data.nodes[node.upperArm].position, rotation: [0,0,0]})}\n                       onDragEnd={() => handleDragEnd(node.upperArm)}\n                       onUpdate={(transform) => handleGizmoUpdate(node.upperArm, transform)}>\n                    <Mesh node={nodes[node.upperArm]} data={data.nodes[node.upperArm]}/>\n                    <Mesh node={nodes[node.wristExtension]} data={data.nodes[node.wristExtension]}/>\n                    <Mesh node={nodes[node.hand]} data={data.nodes[node.hand]}/>\n\n                    <Gizmo activeAxes={[false, false, true]}\n                           translationLimits={[undefined, undefined, [0, 0.4]]}\n                           anchor={[2, 0, 2]}\n                           scale={0.75}\n                           userData={[node.gripper]}\n                           onDragStart={() => handleDragStart(node.gripper, {position: data.nodes[node.gripper].position, rotation: [0,0,0]})}\n                           onDragEnd={() => handleDragEnd(node.gripper)}\n                           onUpdate={(transform) => handleGizmoUpdate(node.gripper, transform)}>\n                        <Mesh node={nodes[node.gripper]} data={data.nodes[node.gripper]}/>\n                    </Gizmo>\n                </Gizmo>\n            </Gizmo>\n        </group>\n    );\n};\n\nuseGLTF.preload('/robot.glb');"],"mappings":";AAAA;AACA,SAAQA,KAAK,QAAO,mBAAmB;AACvC,SAAQC,OAAO,QAAO,mBAAmB;AACzC,SAAQC,KAAK,QAAO,QAAQ;AAC5B,OAAOC,IAAI,MAAM,uBAAuB;AACxC,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,KAAK,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAO9B,OAAO,MAAMC,QAAQ,GAAGA,CAAC;EAACC,IAAI;EAAEC;AAAoB,CAAC,KAAK;EACtD,MAAM;IAACC;EAAK,CAAC,GAAGV,OAAO,CAAC,YAAY,CAA8B;EAClE,MAAMW,IAAI,GAAGV,KAAK,CAACW,QAAQ;EAC3B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAA0B,CAAC,CAAC,CAAC;EAC/E,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAA0B,CAAC,CAAC,CAAC;EAC/E,MAAM,CAACc,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGf,QAAQ,CAA0B,CAAC,CAAC,CAAC;EACrF,MAAM,CAACgB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGjB,QAAQ,CAA4C;IAChG,CAACQ,IAAI,CAACU,UAAU,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;IAC1B,CAACV,IAAI,CAACW,QAAQ,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;IACxB,CAACX,IAAI,CAACY,OAAO,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC;EAC1B,CAAC,CAAC;EAEF,MAAMC,iBAAiB,GAAGA,CAACC,QAAwB,EAAEC,SAAqF,KAAK;IAC3I,IAAID,QAAQ,KAAKd,IAAI,CAACW,QAAQ,EAAE;MAC5B,MAAMK,MAAM,GAAGD,SAAS,CAACE,QAAQ,CAAC,CAAC,CAAC;MACpCV,mBAAmB,CAACW,IAAI,KAAK;QACzB,GAAGA,IAAI;QACP,CAACJ,QAAQ,GAAGE;MAChB,CAAC,CAAC,CAAC;MACHG,OAAO,CAACC,GAAG,CAAC,sBAAsBN,QAAQ,GAAG,EAAEE,MAAM,CAAC;IAC1D,CAAC,MAAM,IAAIF,QAAQ,KAAKd,IAAI,CAACY,OAAO,EAAE;MAClC,MAAMK,QAAQ,GAAGF,SAAS,CAACE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;MACxCV,mBAAmB,CAACW,IAAI,KAAK;QACzB,GAAGA,IAAI;QACP,CAACJ,QAAQ,GAAGG;MAChB,CAAC,CAAC,CAAC;MACHE,OAAO,CAACC,GAAG,CAAC,wBAAwBN,QAAQ,GAAG,EAAEG,QAAQ,CAAC;IAC9D,CAAC,MAAM;MACHR,mBAAmB,CAACS,IAAI,KAAK;QACzB,GAAGA,IAAI;QACP,CAACJ,QAAQ,GAAGC,SAAS,CAACM;MAC1B,CAAC,CAAC,CAAC;MACH,MAAMC,KAAK,GAAG,IAAI7B,KAAK,CAAC,CAAC,CAAC8B,SAAS,CAACR,SAAS,CAACM,QAAQ,CAAC;MACvD,MAAMG,cAAc,GAAIF,KAAK,CAACG,CAAC,GAAG,GAAG,GAAIC,IAAI,CAACC,EAAE;MAChDR,OAAO,CAACC,GAAG,CAAC,wBAAwBN,QAAQ,GAAG,EAAEU,cAAc,CAAC;IACpE;EACJ,CAAC;EAED,MAAMI,eAAe,GAAGA,CAACd,QAAwB,EAAEC,SAAqF,KAAK;IACzI,IAAID,QAAQ,KAAKd,IAAI,CAACW,QAAQ,EAAE;MAC5BN,gBAAgB,CAACa,IAAI,KAAK;QACtB,GAAGA,IAAI;QACP,CAACJ,QAAQ,GAAGC,SAAS,CAACE,QAAQ,CAAC,CAAC;MACpC,CAAC,CAAC,CAAC;MACHV,mBAAmB,CAACW,IAAI,KAAK;QACzB,GAAGA,IAAI;QACP,CAACJ,QAAQ,GAAGC,SAAS,CAACE,QAAQ,CAAC,CAAC;MACpC,CAAC,CAAC,CAAC;MACHE,OAAO,CAACC,GAAG,CAAC,oBAAoBN,QAAQ,GAAG,EAAEC,SAAS,CAACE,QAAQ,CAAC,CAAC,CAAC,CAAC;IACvE,CAAC,MAAM,IAAIH,QAAQ,KAAKd,IAAI,CAACY,OAAO,EAAE;MAClCP,gBAAgB,CAACa,IAAI,KAAK;QACtB,GAAGA,IAAI;QACP,CAACJ,QAAQ,GAAGC,SAAS,CAACE,QAAQ,CAAC,CAAC;MACpC,CAAC,CAAC,CAAC;MACHV,mBAAmB,CAACW,IAAI,KAAK;QACzB,GAAGA,IAAI;QACP,CAACJ,QAAQ,GAAGC,SAAS,CAACE,QAAQ,CAAC,CAAC;MACpC,CAAC,CAAC,CAAC;MACHE,OAAO,CAACC,GAAG,CAAC,sBAAsBN,QAAQ,GAAG,EAAEC,SAAS,CAACE,QAAQ,CAAC,CAAC,CAAC,CAAC;IACzE,CAAC,MAAM;MACH,MAAMK,KAAK,GAAG,IAAI7B,KAAK,CAAC,CAAC,CAAC8B,SAAS,CAACR,SAAS,CAACM,QAAQ,CAAC;MACvD,MAAMQ,OAAO,GAAIP,KAAK,CAACG,CAAC,GAAG,GAAG,GAAIC,IAAI,CAACC,EAAE;MACzCxB,gBAAgB,CAACe,IAAI,KAAK;QACtB,GAAGA,IAAI;QACP,CAACJ,QAAQ,GAAGe;MAChB,CAAC,CAAC,CAAC;MACHV,OAAO,CAACC,GAAG,CAAC,sBAAsBN,QAAQ,GAAG,EAAEe,OAAO,CAAC;IAC3D;EACJ,CAAC;EAED,MAAMC,aAAa,GAAIhB,QAAwB,IAAK;IAChD,MAAMiB,OAAkC,GAAG;MACvChC,KAAK,EAAE;QACH,GAAGF,IAAI,CAACE;MACZ;IACJ,CAAC;IAED,IAAIe,QAAQ,KAAKd,IAAI,CAACW,QAAQ,EAAE;MAC5B,MAAMqB,aAAa,GAAG1B,gBAAgB,CAACQ,QAAQ,CAAC,IAAI,CAAC;MACrD,MAAMmB,aAAa,GAAG7B,aAAa,CAACU,QAAQ,CAAC,IAAI,CAAC;MAClD,MAAMoB,YAAY,GAAGF,aAAa,GAAGC,aAAa;MAClD,MAAME,WAAW,GAAGD,YAAY,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC;MAE9Cf,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEY,aAAa,CAAC;MACjDb,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEa,aAAa,CAAC;MACjDd,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEc,YAAY,CAAC;MAC/Cf,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEe,WAAW,CAAC;MAE7CJ,OAAO,CAAChC,KAAK,CAACe,QAAQ,CAAC,GAAG;QACtB,GAAGjB,IAAI,CAACE,KAAK,CAACe,QAAQ,CAAC;QACvBG,QAAQ,EAAE,CAACpB,IAAI,CAACE,KAAK,CAACe,QAAQ,CAAC,CAACG,QAAQ,CAAC,CAAC,CAAC,EAAEe,aAAa,EAAEnC,IAAI,CAACE,KAAK,CAACe,QAAQ,CAAC,CAACG,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC7FmB,KAAK,EAAEvC,IAAI,CAACE,KAAK,CAACe,QAAQ,CAAC,CAACsB,KAAK;QACjCf,QAAQ,EAAExB,IAAI,CAACE,KAAK,CAACe,QAAQ,CAAC,CAACO,QAAQ;QACvCgB,eAAe,EAAEF,WAAW;QAC5BG,QAAQ,EAAE;MACd,CAAC;MAEDnB,OAAO,CAACC,GAAG,CAAC,sCAAsCN,QAAQ,GAAG,EAAEqB,WAAW,CAAC;IAC/E;IAEA,IAAIrB,QAAQ,KAAKd,IAAI,CAACY,OAAO,EAAE;MAC3B,MAAM2B,eAAe,GAAGjC,gBAAgB,CAACQ,QAAQ,CAAC,IAAI,CAAC;MACvD,MAAM0B,eAAe,GAAGpC,aAAa,CAACU,QAAQ,CAAC,IAAI,CAAC;MACpD,MAAM2B,cAAc,GAAGF,eAAe,GAAGC,eAAe;MACxD,MAAML,WAAW,GAAGM,cAAc,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC;MAEhDtB,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEmB,eAAe,CAAC;MACrDpB,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEoB,eAAe,CAAC;MACrDrB,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEqB,cAAc,CAAC;MACnDtB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEe,WAAW,CAAC;MAE7CJ,OAAO,CAAChC,KAAK,CAACe,QAAQ,CAAC,GAAG;QACtB,GAAGjB,IAAI,CAACE,KAAK,CAACe,QAAQ,CAAC;QACvBG,QAAQ,EAAE,CAACpB,IAAI,CAACE,KAAK,CAACe,QAAQ,CAAC,CAACG,QAAQ,CAAC,CAAC,CAAC,EAAEpB,IAAI,CAACE,KAAK,CAACe,QAAQ,CAAC,CAACG,QAAQ,CAAC,CAAC,CAAC,EAAEsB,eAAe,CAAC;QAC/FH,KAAK,EAAEvC,IAAI,CAACE,KAAK,CAACe,QAAQ,CAAC,CAACsB,KAAK;QACjCf,QAAQ,EAAExB,IAAI,CAACE,KAAK,CAACe,QAAQ,CAAC,CAACO,QAAQ;QACvCgB,eAAe,EAAEF,WAAW;QAC5BG,QAAQ,EAAE;MACd,CAAC;MAEDnB,OAAO,CAACC,GAAG,CAAC,wCAAwCN,QAAQ,GAAG,EAAEqB,WAAW,CAAC;IACjF;IAEA,IAAIrB,QAAQ,KAAKd,IAAI,CAACU,UAAU,EAAE;MAC9B,MAAMY,KAAK,GAAG,IAAI7B,KAAK,CAAC,CAAC,CAAC8B,SAAS,CAACf,gBAAgB,CAACM,QAAQ,CAAC,CAAC;MAC/D,MAAM4B,UAAU,GAAIpB,KAAK,CAACG,CAAC,GAAG,GAAG,GAAIC,IAAI,CAACC,EAAE;MAC5C,IAAIgB,aAAa,GAAGD,UAAU,IAAIxC,aAAa,CAACY,QAAQ,CAAC,IAAI,CAAC,CAAC;MAE/D,IAAIA,QAAQ,KAAKd,IAAI,CAACU,UAAU,EAAE;QAC9BiC,aAAa,IAAI,CAAC;MACtB;MAEAxB,OAAO,CAACC,GAAG,CAAC,GAAG,EAAG,WAAW,EAAEN,QAAQ,CAAC;MACxC,IAAIA,QAAQ,KAAKd,IAAI,CAACY,OAAO,EAAE;QAC3BO,OAAO,CAACC,GAAG,CAAC,GAAG,EAAG,gBAAgB,EAAEuB,aAAa,CAAC;QAClDA,aAAa,IAAI,GAAG;MACxB;MAEAZ,OAAO,CAAChC,KAAK,CAACe,QAAQ,CAAC,GAAG;QACtB,GAAGjB,IAAI,CAACE,KAAK,CAACe,QAAQ,CAAC;QACvBG,QAAQ,EAAEpB,IAAI,CAACE,KAAK,CAACe,QAAQ,CAAC,CAACG,QAAQ;QACvCmB,KAAK,EAAEvC,IAAI,CAACE,KAAK,CAACe,QAAQ,CAAC,CAACsB,KAAK;QACjCf,QAAQ,EAAEb,gBAAgB,CAACM,QAAQ,CAAC;QACpCuB,eAAe,EAAEM,aAAa;QAC9BL,QAAQ,EAAE;MACd,CAAC;MAEDnB,OAAO,CAACC,GAAG,CAAC,iCAAiCN,QAAQ,GAAG,EAAE6B,aAAa,CAAC;IAC5E;IAEAC,MAAM,CAACC,IAAI,CAAChD,IAAI,CAACE,KAAK,CAAC,CAAC+C,OAAO,CAAEC,GAAG,IAAK;MACrC,IAAIA,GAAG,KAAKjC,QAAQ,EAAE;QAClBiB,OAAO,CAAChC,KAAK,CAACgD,GAAG,CAAC,GAAG;UACjB,GAAGlD,IAAI,CAACE,KAAK,CAACgD,GAAG,CAAC;UAClBT,QAAQ,EAAE;QACd,CAAC;MACL;IACJ,CAAC,CAAC;IAEFxC,QAAQ,CAACiC,OAAO,CAAC;EACrB,CAAC;EAED,oBACIpC,OAAA;IAAAqD,QAAA,eACIrD,OAAA,CAACP,KAAK;MAACgD,KAAK,EAAE,CAAE;MACTa,kBAAkB;MAClBC,UAAU,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAE;MAChCC,QAAQ,EAAE,CAACnD,IAAI,CAACU,UAAU,CAAE;MAC5B0C,WAAW,EAAEA,CAAA,KAAMxB,eAAe,CAAC5B,IAAI,CAACU,UAAU,EAAE;QAACO,QAAQ,EAAEpB,IAAI,CAACE,KAAK,CAACC,IAAI,CAACU,UAAU,CAAC,CAACO,QAAQ;QAAEI,QAAQ,EAAEb,gBAAgB,CAACR,IAAI,CAACU,UAAU;MAAC,CAAC,CAAE;MACnJ2C,SAAS,EAAEA,CAAA,KAAMvB,aAAa,CAAC9B,IAAI,CAACU,UAAU,CAAE;MAChDZ,QAAQ,EAAGiB,SAAS,IAAKF,iBAAiB,CAACb,IAAI,CAACU,UAAU,EAAEK,SAAS,CAAE;MAAAiC,QAAA,gBAC1ErD,OAAA,CAACJ,IAAI;QAACS,IAAI,EAAED,KAAK,CAACC,IAAI,CAACU,UAAU,CAAE;QAACb,IAAI,EAAEA,IAAI,CAACE,KAAK,CAACC,IAAI,CAACU,UAAU;MAAE;QAAA4C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eAExE9D,OAAA,CAACP,KAAK;QAAC8D,UAAU,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAE;QACjCQ,iBAAiB,EAAE,CAACC,SAAS,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAEA,SAAS,CAAE;QACpDC,eAAe;QACfC,MAAM,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAE;QACvBzB,KAAK,EAAE,CAAE;QACTe,QAAQ,EAAE,CAACnD,IAAI,CAACW,QAAQ,CAAE;QAC1ByC,WAAW,EAAEA,CAAA,KAAMxB,eAAe,CAAC5B,IAAI,CAACW,QAAQ,EAAE;UAACM,QAAQ,EAAEpB,IAAI,CAACE,KAAK,CAACC,IAAI,CAACW,QAAQ,CAAC,CAACM,QAAQ;UAAEI,QAAQ,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC;QAAC,CAAC,CAAE;QACrHgC,SAAS,EAAEA,CAAA,KAAMvB,aAAa,CAAC9B,IAAI,CAACW,QAAQ,CAAE;QAC9Cb,QAAQ,EAAGiB,SAAS,IAAKF,iBAAiB,CAACb,IAAI,CAACW,QAAQ,EAAEI,SAAS,CAAE;QAAAiC,QAAA,gBACxErD,OAAA,CAACJ,IAAI;UAACS,IAAI,EAAED,KAAK,CAACC,IAAI,CAACW,QAAQ,CAAE;UAACd,IAAI,EAAEA,IAAI,CAACE,KAAK,CAACC,IAAI,CAACW,QAAQ;QAAE;UAAA2C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eACpE9D,OAAA,CAACJ,IAAI;UAACS,IAAI,EAAED,KAAK,CAACC,IAAI,CAAC8D,cAAc,CAAE;UAACjE,IAAI,EAAEA,IAAI,CAACE,KAAK,CAACC,IAAI,CAAC8D,cAAc;QAAE;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eAChF9D,OAAA,CAACJ,IAAI;UAACS,IAAI,EAAED,KAAK,CAACC,IAAI,CAAC+D,IAAI,CAAE;UAAClE,IAAI,EAAEA,IAAI,CAACE,KAAK,CAACC,IAAI,CAAC+D,IAAI;QAAE;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eAE5D9D,OAAA,CAACP,KAAK;UAAC8D,UAAU,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAE;UACjCQ,iBAAiB,EAAE,CAACC,SAAS,EAAEA,SAAS,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAE;UACpDE,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;UAClBzB,KAAK,EAAE,IAAK;UACZe,QAAQ,EAAE,CAACnD,IAAI,CAACY,OAAO,CAAE;UACzBwC,WAAW,EAAEA,CAAA,KAAMxB,eAAe,CAAC5B,IAAI,CAACY,OAAO,EAAE;YAACK,QAAQ,EAAEpB,IAAI,CAACE,KAAK,CAACC,IAAI,CAACY,OAAO,CAAC,CAACK,QAAQ;YAAEI,QAAQ,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC;UAAC,CAAC,CAAE;UACnHgC,SAAS,EAAEA,CAAA,KAAMvB,aAAa,CAAC9B,IAAI,CAACY,OAAO,CAAE;UAC7Cd,QAAQ,EAAGiB,SAAS,IAAKF,iBAAiB,CAACb,IAAI,CAACY,OAAO,EAAEG,SAAS,CAAE;UAAAiC,QAAA,eACvErD,OAAA,CAACJ,IAAI;YAACS,IAAI,EAAED,KAAK,CAACC,IAAI,CAACY,OAAO,CAAE;YAACf,IAAI,EAAEA,IAAI,CAACE,KAAK,CAACC,IAAI,CAACY,OAAO;UAAE;YAAA0C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/D,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEhB,CAAC;AAEDpE,OAAO,CAAC2E,OAAO,CAAC,YAAY,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}