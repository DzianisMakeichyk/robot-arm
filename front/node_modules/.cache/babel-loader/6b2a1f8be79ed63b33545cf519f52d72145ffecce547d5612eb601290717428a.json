{"ast":null,"code":"var _jsxFileName = \"/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/components/gizmo/Rotate.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useRef, useState, useCallback, useMemo } from 'react';\nimport { useThree } from '@react-three/fiber';\nimport { Line, Html } from '@react-three/drei';\nimport clamp from 'lodash.clamp';\nimport { context } from './context';\nimport { Vector3, Matrix4, Ray, Plane } from 'three';\nimport { calculateAngle, toDegrees, toRadians, minimizeAngle } from '@utils';\n\n/**\n * Rotate lets the user drag the gizmo and, with it, the child objects over the configured rotation axis/axes\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Rotate = ({\n  axis\n}) => {\n  _s();\n  // get the gizmo config & event implementations from context\n  const {\n    rotationLimits,\n    scale,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    userData\n  } = useContext(context);\n\n  // determine directions\n  const direction1 = axis === 2 ? new Vector3(1, 0, 0) : axis === 1 ? new Vector3(0, 0, 1) : new Vector3(0, 1, 0);\n  const direction2 = axis === 2 ? new Vector3(0, 1, 0) : axis === 1 ? new Vector3(1, 0, 0) : new Vector3(0, 0, 1);\n\n  // get a handle on the cam controls to enable/disable while operating the gizmo\n  const camControls = useThree(state => state.controls);\n\n  // the label showing the rotated value\n  const rotationLabel = useRef(null);\n\n  // Object3D group for this Gizmo\n  const gizmoGroup = useRef(null);\n\n  // ref to keep info where the mouse/pointer click occurred\n  const clickInfo = useRef(null);\n\n  // is the mouse hovering over the gizmo. we change the color when hovering over\n  const [isHovered, setIsHovered] = useState(false);\n\n  // the angle calculated on start and used while moving\n  const angle0 = useRef(0);\n  const angle = useRef(0);\n\n  /**\n   * On pointer down (click) we prepare to start dragging\n   */\n  const onPointerDown = useCallback(event => {\n    // update label with rotation value\n    rotationLabel.current.innerText = `${toDegrees(angle.current).toFixed(0)}°`;\n    rotationLabel.current.style.display = 'block';\n\n    // avoid handlers firing\n    event.stopPropagation();\n\n    // get the xyz vector for the mouse click\n    const clickPoint = event.point.clone();\n\n    // @todo learn what is going on here\n    const origin = new Vector3().setFromMatrixPosition(gizmoGroup.current.matrixWorld);\n    const e1 = new Vector3().setFromMatrixColumn(gizmoGroup.current.matrixWorld, 0).normalize();\n    const e2 = new Vector3().setFromMatrixColumn(gizmoGroup.current.matrixWorld, 1).normalize();\n    const normal = new Vector3().setFromMatrixColumn(gizmoGroup.current.matrixWorld, 2).normalize();\n    const plane = new Plane().setFromNormalAndCoplanarPoint(normal, origin);\n\n    // set the click info\n    clickInfo.current = {\n      clickPoint,\n      origin,\n      e1,\n      e2,\n      normal,\n      plane\n    };\n\n    // invoke drag start for rotation operation\n    onDragStart({\n      action: 'Rotate',\n      axis,\n      origin,\n      directions: [e1, e2, normal]\n    });\n\n    // disable the cam controls to avoid it fighting with the gizmo movements\n    camControls && (camControls.enabled = false);\n\n    // @ts-ignore - setPointerCapture is not in the type definition\n    event.target.setPointerCapture(event.pointerId);\n  }, [camControls, onDragStart, axis]);\n\n  /**\n   * Mouse/pointer moving\n   */\n  const onPointerMove = useCallback(event => {\n    // avoid handlers firing\n    event.stopPropagation();\n    if (!isHovered) setIsHovered(true);\n    if (clickInfo.current) {\n      const {\n        clickPoint,\n        origin,\n        e1,\n        e2,\n        normal,\n        plane\n      } = clickInfo.current;\n\n      /**\n       * Check if we are still within translation limits\n       */\n      const [min, max] = (rotationLimits === null || rotationLimits === void 0 ? void 0 : rotationLimits[axis]) || [undefined, undefined];\n      const ray = new Ray();\n      const intersection = new Vector3();\n      ray.copy(event.ray);\n      ray.intersectPlane(plane, intersection);\n      ray.direction.negate();\n      ray.intersectPlane(plane, intersection);\n      let deltaAngle = calculateAngle(clickPoint, intersection, origin, e1, e2);\n      let degrees = toDegrees(deltaAngle);\n      if (event.shiftKey) {\n        degrees = Math.round(degrees / 10) * 10;\n        deltaAngle = toRadians(degrees);\n      }\n      if (min !== undefined && max !== undefined && max - min < 2 * Math.PI) {\n        deltaAngle = minimizeAngle(deltaAngle);\n        deltaAngle = deltaAngle > Math.PI ? deltaAngle - 2 * Math.PI : deltaAngle;\n        deltaAngle = clamp(deltaAngle, min - angle0.current, max - angle0.current);\n        angle.current = angle0.current + deltaAngle;\n      } else {\n        angle.current = minimizeAngle(angle0.current + deltaAngle);\n        angle.current = angle.current > Math.PI ? angle.current - 2 * Math.PI : angle.current;\n      }\n\n      // update label values\n      degrees = toDegrees(angle.current);\n      rotationLabel.current.innerText = `${degrees.toFixed(0)}°`;\n      const rotationMatrix = new Matrix4();\n      const posNew = new Vector3();\n      rotationMatrix.makeRotationAxis(normal, deltaAngle);\n      posNew.copy(origin).applyMatrix4(rotationMatrix).sub(origin).negate();\n      rotationMatrix.setPosition(posNew);\n\n      // invoke the onDrag method with the calculated rotation matrix\n      onDrag(rotationMatrix);\n    }\n  }, [onDrag, isHovered, rotationLimits, axis]);\n\n  /**\n   * Pointer up ends the gizmo interaction\n   */\n  const onPointerUp = useCallback(event => {\n    // hide label\n    rotationLabel.current.style.display = 'none';\n\n    // avoid handlers firing\n    event.stopPropagation();\n    angle0.current = angle.current;\n\n    // reset click info\n    clickInfo.current = null;\n\n    // call the onDragEnd\n    onDragEnd();\n\n    // give cam controls back\n    camControls && (camControls.enabled = true);\n\n    // @ts-ignore - releasePointerCapture & PointerEvent#pointerId is not in the type definition\n    event.target.releasePointerCapture(event.pointerId);\n  }, [camControls, onDragEnd]);\n\n  /**\n   * In the pointer out we mark hovered as false\n   */\n  const onPointerOut = useCallback(event => {\n    // avoid handlers firing\n    event.stopPropagation();\n    setIsHovered(false);\n  }, []);\n\n  /**\n   * Gizmo group matrix\n   */\n  const matrix = useMemo(() => {\n    const dir1N = direction1.clone().normalize();\n    const dir2N = direction2.clone().normalize();\n    return new Matrix4().makeBasis(dir1N, dir2N, dir1N.clone().cross(dir2N));\n  }, [direction1, direction2]);\n  const r = scale * 0.65;\n\n  /**\n   * Calculate gizmo arc shape\n   */\n  const arc = useMemo(() => {\n    const segments = 32;\n    const points = [];\n    for (let j = 0; j <= segments; j++) {\n      const angle = j * (Math.PI / 2) / segments;\n      points.push(new Vector3(Math.cos(angle) * r, Math.sin(angle) * r, 0));\n    }\n    return points;\n  }, [r]);\n\n  // colors of the axes and a hover color\n  const axisColors = ['#ff2060', '#20df80', '#2080ff'];\n  const color = isHovered ? '#ffff40' : axisColors[axis];\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: gizmoGroup,\n    onPointerDown: onPointerDown,\n    onPointerMove: onPointerMove,\n    onPointerUp: onPointerUp,\n    onPointerOut: onPointerOut,\n    matrix: matrix,\n    matrixAutoUpdate: false,\n    children: [/*#__PURE__*/_jsxDEV(Html, {\n      position: [r, r, 0],\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'none',\n          fontFamily: 'monospace',\n          background: '#F84823',\n          color: 'white',\n          padding: '6px 8px',\n          borderRadius: 7,\n          whiteSpace: 'nowrap'\n        },\n        ref: rotationLabel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      points: arc,\n      lineWidth: 8,\n      visible: false,\n      userData: userData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      transparent: true,\n      raycast: () => null,\n      points: arc,\n      lineWidth: 2,\n      color: color,\n      polygonOffset: true,\n      polygonOffsetFactor: -10\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 9\n  }, this);\n};\n_s(Rotate, \"fGX+0lDH6Fgu8H3rLVeMLWvFW5g=\", false, function () {\n  return [useThree];\n});\n_c = Rotate;\nvar _c;\n$RefreshReg$(_c, \"Rotate\");","map":{"version":3,"names":["React","useContext","useRef","useState","useCallback","useMemo","useThree","Line","Html","clamp","context","Vector3","Matrix4","Ray","Plane","calculateAngle","toDegrees","toRadians","minimizeAngle","jsxDEV","_jsxDEV","Rotate","axis","_s","rotationLimits","scale","onDragStart","onDrag","onDragEnd","userData","direction1","direction2","camControls","state","controls","rotationLabel","gizmoGroup","clickInfo","isHovered","setIsHovered","angle0","angle","onPointerDown","event","current","innerText","toFixed","style","display","stopPropagation","clickPoint","point","clone","origin","setFromMatrixPosition","matrixWorld","e1","setFromMatrixColumn","normalize","e2","normal","plane","setFromNormalAndCoplanarPoint","action","directions","enabled","target","setPointerCapture","pointerId","onPointerMove","min","max","undefined","ray","intersection","copy","intersectPlane","direction","negate","deltaAngle","degrees","shiftKey","Math","round","PI","rotationMatrix","posNew","makeRotationAxis","applyMatrix4","sub","setPosition","onPointerUp","releasePointerCapture","onPointerOut","matrix","dir1N","dir2N","makeBasis","cross","r","arc","segments","points","j","push","cos","sin","axisColors","color","ref","matrixAutoUpdate","children","position","fontFamily","background","padding","borderRadius","whiteSpace","fileName","_jsxFileName","lineNumber","columnNumber","lineWidth","visible","transparent","raycast","polygonOffset","polygonOffsetFactor","_c","$RefreshReg$"],"sources":["/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/components/gizmo/Rotate.tsx"],"sourcesContent":[" \nimport React, {useContext, useRef, useState, useCallback, useMemo, FC} from 'react'\nimport {ThreeEvent, useThree} from '@react-three/fiber'\nimport {Line, Html} from '@react-three/drei'\nimport clamp from 'lodash.clamp'\nimport {context} from './context'\nimport {Vector3, Matrix4, Ray, Group, Plane} from 'three'\nimport {calculateAngle, toDegrees, toRadians, minimizeAngle} from '@utils'\n\n/**\n * Rotate lets the user drag the gizmo and, with it, the child objects over the configured rotation axis/axes\n */\nexport const Rotate: FC<{ axis: 0 | 1 | 2 }> = ({axis}) => {\n\n    // get the gizmo config & event implementations from context\n    const {\n        rotationLimits,\n        scale,\n        onDragStart,\n        onDrag,\n        onDragEnd,\n        userData\n    } = useContext(context)\n\n    // determine directions\n    const direction1 =\n        axis === 2 ? new Vector3(1, 0, 0) :\n            axis === 1 ? new Vector3(0, 0, 1) : new Vector3(0, 1, 0)\n    const direction2 =\n        axis === 2 ? new Vector3(0, 1, 0) :\n            axis === 1 ? new Vector3(1, 0, 0) : new Vector3(0, 0, 1)\n\n    // get a handle on the cam controls to enable/disable while operating the gizmo\n    const camControls = useThree((state) => state.controls) as unknown as { enabled: boolean }\n\n    // the label showing the rotated value\n    const rotationLabel = useRef<HTMLDivElement>(null!)\n\n    // Object3D group for this Gizmo\n    const gizmoGroup = useRef<Group>(null!)\n\n    // ref to keep info where the mouse/pointer click occurred\n    const clickInfo = useRef<{\n        clickPoint: Vector3\n        origin: Vector3\n        e1: Vector3\n        e2: Vector3\n        normal: Vector3\n        plane: Plane\n    } | null>(null)\n\n    // is the mouse hovering over the gizmo. we change the color when hovering over\n    const [isHovered, setIsHovered] = useState(false)\n\n    // the angle calculated on start and used while moving\n    const angle0 = useRef<number>(0)\n    const angle = useRef<number>(0)\n\n    /**\n     * On pointer down (click) we prepare to start dragging\n     */\n    const onPointerDown = useCallback((event: ThreeEvent<PointerEvent>) => {\n\n        // update label with rotation value\n        rotationLabel.current.innerText = `${toDegrees(angle.current).toFixed(0)}°`\n        rotationLabel.current.style.display = 'block'\n\n        // avoid handlers firing\n        event.stopPropagation()\n\n        // get the xyz vector for the mouse click\n        const clickPoint = event.point.clone()\n\n        // @todo learn what is going on here\n        const origin = new Vector3().setFromMatrixPosition(gizmoGroup.current.matrixWorld)\n        const e1 = new Vector3().setFromMatrixColumn(gizmoGroup.current.matrixWorld, 0).normalize()\n        const e2 = new Vector3().setFromMatrixColumn(gizmoGroup.current.matrixWorld, 1).normalize()\n        const normal = new Vector3().setFromMatrixColumn(gizmoGroup.current.matrixWorld, 2).normalize()\n        const plane = new Plane().setFromNormalAndCoplanarPoint(normal, origin)\n\n        // set the click info\n        clickInfo.current = {clickPoint, origin, e1, e2, normal, plane}\n\n        // invoke drag start for rotation operation\n        onDragStart({action: 'Rotate', axis, origin, directions: [e1, e2, normal]})\n\n        // disable the cam controls to avoid it fighting with the gizmo movements\n        camControls && (camControls.enabled = false)\n\n        // @ts-ignore - setPointerCapture is not in the type definition\n        event.target.setPointerCapture(event.pointerId)\n\n    }, [camControls, onDragStart, axis])\n\n    /**\n     * Mouse/pointer moving\n     */\n    const onPointerMove = useCallback((event: ThreeEvent<PointerEvent>) => {\n\n        // avoid handlers firing\n        event.stopPropagation()\n\n        if (!isHovered) setIsHovered(true)\n\n        if (clickInfo.current) {\n\n            const {clickPoint, origin, e1, e2, normal, plane} = clickInfo.current\n\n            /**\n             * Check if we are still within translation limits\n             */\n            const [min, max] = rotationLimits?.[axis] || [undefined, undefined]\n            const ray = new Ray()\n            const intersection = new Vector3()\n\n            ray.copy(event.ray)\n            ray.intersectPlane(plane, intersection)\n            ray.direction.negate()\n            ray.intersectPlane(plane, intersection)\n\n            let deltaAngle = calculateAngle(clickPoint, intersection, origin, e1, e2)\n            let degrees = toDegrees(deltaAngle)\n\n            if (event.shiftKey) {\n                degrees = Math.round(degrees / 10) * 10\n                deltaAngle = toRadians(degrees)\n            }\n\n            if (min !== undefined && max !== undefined && max - min < 2 * Math.PI) {\n                deltaAngle = minimizeAngle(deltaAngle)\n                deltaAngle = deltaAngle > Math.PI ? deltaAngle - 2 * Math.PI : deltaAngle\n                deltaAngle = clamp(deltaAngle, min - angle0.current, max - angle0.current)\n                angle.current = angle0.current + deltaAngle\n            } else {\n                angle.current = minimizeAngle(angle0.current + deltaAngle)\n                angle.current = angle.current > Math.PI ? angle.current - 2 * Math.PI : angle.current\n            }\n\n            // update label values\n            degrees = toDegrees(angle.current)\n            rotationLabel.current.innerText = `${degrees.toFixed(0)}°`\n\n            const rotationMatrix = new Matrix4()\n            const posNew = new Vector3()\n\n            rotationMatrix.makeRotationAxis(normal, deltaAngle)\n            posNew.copy(origin).applyMatrix4(rotationMatrix).sub(origin).negate()\n            rotationMatrix.setPosition(posNew)\n\n            // invoke the onDrag method with the calculated rotation matrix\n            onDrag(rotationMatrix)\n        }\n\n    }, [onDrag, isHovered, rotationLimits, axis])\n\n    /**\n     * Pointer up ends the gizmo interaction\n     */\n    const onPointerUp = useCallback((event: ThreeEvent<PointerEvent>) => {\n\n        // hide label\n        rotationLabel.current.style.display = 'none'\n\n        // avoid handlers firing\n        event.stopPropagation()\n\n        angle0.current = angle.current\n\n        // reset click info\n        clickInfo.current = null\n\n        // call the onDragEnd\n        onDragEnd()\n\n        // give cam controls back\n        camControls && (camControls.enabled = true)\n\n        // @ts-ignore - releasePointerCapture & PointerEvent#pointerId is not in the type definition\n        event.target.releasePointerCapture(event.pointerId)\n\n    }, [camControls, onDragEnd])\n\n    /**\n     * In the pointer out we mark hovered as false\n     */\n    const onPointerOut = useCallback((event: ThreeEvent<PointerEvent>) => {\n        // avoid handlers firing\n        event.stopPropagation()\n        setIsHovered(false)\n    }, [])\n\n\n    /**\n     * Gizmo group matrix\n     */\n    const matrix = useMemo(() => {\n        const dir1N = direction1.clone().normalize()\n        const dir2N = direction2.clone().normalize()\n        return new Matrix4().makeBasis(dir1N, dir2N, dir1N.clone().cross(dir2N))\n    }, [direction1, direction2])\n\n    const r = scale * 0.65\n\n    /**\n     * Calculate gizmo arc shape\n     */\n    const arc = useMemo(() => {\n        const segments = 32\n        const points: Vector3[] = []\n        for (let j = 0; j <= segments; j++) {\n            const angle = (j * (Math.PI / 2)) / segments\n            points.push(new Vector3(Math.cos(angle) * r, Math.sin(angle) * r, 0))\n        }\n        return points\n    }, [r])\n\n    // colors of the axes and a hover color\n    const axisColors = ['#ff2060', '#20df80', '#2080ff']\n    const color = isHovered ? '#ffff40' : axisColors[axis]\n\n    return (\n        <group ref={gizmoGroup}\n               onPointerDown={onPointerDown}\n               onPointerMove={onPointerMove}\n               onPointerUp={onPointerUp}\n               onPointerOut={onPointerOut}\n               matrix={matrix}\n               matrixAutoUpdate={false}>\n\n            {/** the label showing the rotation value */}\n            <Html position={[r, r, 0]}>\n                <div\n                    style={{\n                        display: 'none',\n                        fontFamily: 'monospace',\n                        background: '#F84823',\n                        color: 'white',\n                        padding: '6px 8px',\n                        borderRadius: 7,\n                        whiteSpace: 'nowrap'\n                    }}\n                    ref={rotationLabel}\n                />\n            </Html>\n\n            {/* The invisible mesh being raycast */}\n            <Line points={arc} lineWidth={8} visible={false} userData={userData}/>\n\n            {/* The visible mesh */}\n            <Line\n                transparent\n                raycast={() => null}\n                points={arc}\n                lineWidth={2}\n                color={color}\n                polygonOffset\n                polygonOffsetFactor={-10}\n            />\n\n        </group>\n    )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}