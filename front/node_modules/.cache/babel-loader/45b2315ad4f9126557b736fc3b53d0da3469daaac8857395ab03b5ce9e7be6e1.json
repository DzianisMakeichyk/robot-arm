{"ast":null,"code":"var _jsxFileName = \"/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { GizmoHelper, GizmoViewport, OrbitControls, Environment, Stats, PerspectiveCamera } from '@react-three/drei';\nimport { Shadows, Ground } from '@components/stage';\nimport socketIOClient from 'socket.io-client';\nimport { RobotArm } from \"@components/model/RobotArm\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SOCKET_SERVER_URL = 'http://localhost:4000';\nexport default function App() {\n  _s();\n  const [robotData, setRobotData] = useState();\n  const [socket, setSocket] = useState(null);\n  const [error, setError] = useState('');\n\n  // Initialize socket connection\n  useEffect(() => {\n    console.log('Initializing socket connection...');\n    const newSocket = socketIOClient(SOCKET_SERVER_URL, {\n      transports: ['websocket', 'polling'],\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000\n    });\n    newSocket.on('connect', () => {\n      console.log('Connected to server, socket id:', newSocket.id);\n      setError('');\n    });\n    newSocket.on('connect_error', error => {\n      console.error('Socket connection error:', error);\n      setError(`Connection error: ${error.message}`);\n    });\n    newSocket.on('error', error => {\n      console.error('Socket error:', error);\n      setError(`Socket error: ${error.message}`);\n    });\n    setSocket(newSocket);\n    return () => {\n      console.log('Cleaning up socket connection...');\n      newSocket.close();\n    };\n  }, []);\n\n  // Handle initial state and state updates\n  useEffect(() => {\n    if (!socket) return;\n\n    // Request initial state\n    if (!robotData) {\n      console.log('Requesting initial state...');\n      socket.emit(\"state:get\");\n    }\n\n    // Listen for state updates\n    socket.on(\"state\", data => {\n      console.log('Received state update:', data);\n      setRobotData(data);\n    });\n    return () => {\n      socket.off(\"state\");\n    };\n  }, [socket, robotData]);\n  const updateRobotData = useCallback(newData => {\n    if (!(socket !== null && socket !== void 0 && socket.connected)) {\n      console.error('Cannot update: Socket not connected');\n      return;\n    }\n    console.log('Updating robot data:', newData);\n    setRobotData(prevData => {\n      if (prevData) {\n        const updatedData = {\n          ...prevData,\n          ...newData\n        };\n        console.log('Emitting state update:', updatedData);\n        socket.emit(\"state:update\", updatedData);\n        return updatedData;\n      }\n      return prevData;\n    });\n  }, [socket]);\n\n  // Display error if any\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'fixed',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        backgroundColor: '#ff4444',\n        color: 'white',\n        padding: '20px',\n        borderRadius: '5px',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        style: {\n          marginTop: '10px',\n          padding: '5px 15px',\n          backgroundColor: 'white',\n          border: 'none',\n          borderRadius: '3px',\n          cursor: 'pointer'\n        },\n        children: \"Retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: robotData && /*#__PURE__*/_jsxDEV(Canvas, {\n      children: [/*#__PURE__*/_jsxDEV(PerspectiveCamera, {\n        makeDefault: true,\n        fov: 40,\n        position: [10, 8, 25]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(RobotArm, {\n        data: robotData,\n        onUpdate: updateRobotData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Shadows, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Ground, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Environment, {\n        preset: \"city\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n        makeDefault: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(GizmoHelper, {\n        alignment: \"bottom-right\",\n        margin: [100, 100],\n        children: /*#__PURE__*/_jsxDEV(GizmoViewport, {\n          labelColor: \"white\",\n          axisHeadScale: 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Stats, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n}\n_s(App, \"U3MG5AijCCuNxHK5A0qSaG63Xqo=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Canvas","GizmoHelper","GizmoViewport","OrbitControls","Environment","Stats","PerspectiveCamera","Shadows","Ground","socketIOClient","RobotArm","jsxDEV","_jsxDEV","Fragment","_Fragment","SOCKET_SERVER_URL","App","_s","robotData","setRobotData","socket","setSocket","error","setError","console","log","newSocket","transports","reconnection","reconnectionAttempts","reconnectionDelay","on","id","message","close","emit","data","off","updateRobotData","newData","connected","prevData","updatedData","style","position","top","left","transform","backgroundColor","color","padding","borderRadius","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","window","location","reload","marginTop","border","cursor","makeDefault","fov","onUpdate","preset","alignment","margin","labelColor","axisHeadScale","_c","$RefreshReg$"],"sources":["/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/App.tsx"],"sourcesContent":["import React, {useState, useEffect, useCallback} from 'react';\nimport {Canvas} from '@react-three/fiber';\nimport {GizmoHelper, GizmoViewport, OrbitControls, Environment, Stats, PerspectiveCamera} from '@react-three/drei';\nimport {Shadows, Ground} from '@components/stage';\nimport socketIOClient from 'socket.io-client';\nimport {Robot} from '@types';\nimport {RobotArm} from \"@components/model/RobotArm\";\n\nconst SOCKET_SERVER_URL = 'http://localhost:4000';\n\nexport default function App() {\n    const [robotData, setRobotData] = useState<Robot.RobotNodes>();\n    const [socket, setSocket] = useState<any>(null);\n    const [error, setError] = useState<string>('');\n\n    // Initialize socket connection\n    useEffect(() => {\n        console.log('Initializing socket connection...');\n        const newSocket = socketIOClient(SOCKET_SERVER_URL, {\n            transports: ['websocket', 'polling'],\n            reconnection: true,\n            reconnectionAttempts: 5,\n            reconnectionDelay: 1000\n        });\n\n        newSocket.on('connect', () => {\n            console.log('Connected to server, socket id:', newSocket.id);\n            setError('');\n        });\n\n        newSocket.on('connect_error', (error: any) => {\n            console.error('Socket connection error:', error);\n            setError(`Connection error: ${error.message}`);\n        });\n\n        newSocket.on('error', (error: any) => {\n            console.error('Socket error:', error);\n            setError(`Socket error: ${error.message}`);\n        });\n\n        setSocket(newSocket);\n\n        return () => {\n            console.log('Cleaning up socket connection...');\n            newSocket.close();\n        };\n    }, []);\n\n    // Handle initial state and state updates\n    useEffect(() => {\n        if (!socket) return;\n\n        // Request initial state\n        if (!robotData) {\n            console.log('Requesting initial state...');\n            socket.emit(\"state:get\");\n        }\n\n        // Listen for state updates\n        socket.on(\"state\", (data: Robot.RobotNodes) => {\n            console.log('Received state update:', data);\n            setRobotData(data);\n        });\n\n        return () => {\n            socket.off(\"state\");\n        };\n    }, [socket, robotData]);\n\n    const updateRobotData = useCallback((newData: Partial<Robot.RobotNodes>) => {\n        if (!socket?.connected) {\n            console.error('Cannot update: Socket not connected');\n            return;\n        }\n\n        console.log('Updating robot data:', newData);\n        setRobotData(prevData => {\n            if (prevData) {\n                const updatedData = {...prevData, ...newData};\n                console.log('Emitting state update:', updatedData);\n                socket.emit(\"state:update\", updatedData);\n                return updatedData;\n            }\n            return prevData;\n        });\n    }, [socket]);\n\n    // Display error if any\n    if (error) {\n        return (\n            <div style={{\n                position: 'fixed',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                backgroundColor: '#ff4444',\n                color: 'white',\n                padding: '20px',\n                borderRadius: '5px',\n                textAlign: 'center'\n            }}>\n                <div>{error}</div>\n                <button \n                    onClick={() => window.location.reload()}\n                    style={{\n                        marginTop: '10px',\n                        padding: '5px 15px',\n                        backgroundColor: 'white',\n                        border: 'none',\n                        borderRadius: '3px',\n                        cursor: 'pointer'\n                    }}\n                >\n                    Retry\n                </button>\n            </div>\n        );\n    }\n\n    return (\n        <>\n            {robotData && (\n                <Canvas>\n                    <PerspectiveCamera makeDefault fov={40} position={[10, 8, 25]}/>\n                    <RobotArm data={robotData} onUpdate={updateRobotData}/>\n                    <Shadows/>\n                    <Ground/>\n                    <Environment preset=\"city\"/>\n                    <OrbitControls makeDefault/>\n                    <GizmoHelper alignment=\"bottom-right\" margin={[100, 100]}>\n                        <GizmoViewport labelColor=\"white\" axisHeadScale={1}/>\n                    </GizmoHelper>\n                    <Stats/>\n                </Canvas>\n            )}\n        </>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}