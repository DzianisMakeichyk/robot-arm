{"ast":null,"code":"var _jsxFileName = \"/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { GizmoHelper, GizmoViewport, OrbitControls, Environment, Stats, PerspectiveCamera } from '@react-three/drei';\nimport { Shadows, Ground } from '@components/stage';\nimport socketIOClient from 'socket.io-client';\nimport { RobotArm } from \"@components/model/RobotArm\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SOCKET_SERVER_URL = 'http://localhost:4000';\nexport default function App() {\n  _s();\n  const [robotData, setRobotData] = useState();\n  const [socket, setSocket] = useState(null);\n  const [connectionError, setConnectionError] = useState('');\n  useEffect(() => {\n    // Initialize socket connection\n    const newSocket = socketIOClient(SOCKET_SERVER_URL, {\n      withCredentials: true,\n      transports: ['polling', 'websocket'],\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n      timeout: 20000\n    });\n\n    // Connection event handlers\n    newSocket.on('connect', () => {\n      console.log('Connected to server');\n      setConnectionError('');\n    });\n    newSocket.on('connect_error', error => {\n      console.error('Connection error:', error);\n      setConnectionError(`Connection error: ${error.message}`);\n    });\n    newSocket.on('disconnect', reason => {\n      console.log('Disconnected:', reason);\n      if (reason === 'io server disconnect') {\n        // the disconnection was initiated by the server, reconnect manually\n        newSocket.connect();\n      }\n    });\n\n    // Set socket in state\n    setSocket(newSocket);\n\n    // Clean up on component unmount\n    return () => {\n      if (newSocket) {\n        newSocket.disconnect();\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (!socket) return;\n\n    // Request initial state\n    if (!robotData) {\n      socket.emit(\"state:get\");\n    }\n\n    // Listen for state updates\n    socket.on(\"state\", data => {\n      setRobotData(data);\n    });\n    return () => {\n      socket.off(\"state\");\n    };\n  }, [socket, robotData]);\n  const updateRobotData = useCallback(newData => {\n    if (!socket) return;\n    setRobotData(prevData => {\n      if (prevData) {\n        const updatedData = {\n          ...prevData,\n          ...newData\n        };\n        socket.emit(\"state:update\", updatedData);\n        return updatedData;\n      }\n      return prevData;\n    });\n  }, [socket]);\n\n  // Show connection error if any\n  if (connectionError) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'fixed',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        padding: '20px',\n        backgroundColor: '#ff4444',\n        color: 'white',\n        borderRadius: '5px'\n      },\n      children: connectionError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: robotData && /*#__PURE__*/_jsxDEV(Canvas, {\n      children: [/*#__PURE__*/_jsxDEV(PerspectiveCamera, {\n        makeDefault: true,\n        fov: 40,\n        position: [10, 8, 25]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(RobotArm, {\n        data: robotData,\n        onUpdate: updateRobotData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Shadows, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Ground, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Environment, {\n        preset: \"city\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n        makeDefault: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(GizmoHelper, {\n        alignment: \"bottom-right\",\n        margin: [100, 100],\n        children: /*#__PURE__*/_jsxDEV(GizmoViewport, {\n          labelColor: \"white\",\n          axisHeadScale: 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Stats, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n}\n_s(App, \"0BL5ZnefTqSGdbCcOVfv3rtWhWs=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Canvas","GizmoHelper","GizmoViewport","OrbitControls","Environment","Stats","PerspectiveCamera","Shadows","Ground","socketIOClient","RobotArm","jsxDEV","_jsxDEV","Fragment","_Fragment","SOCKET_SERVER_URL","App","_s","robotData","setRobotData","socket","setSocket","connectionError","setConnectionError","newSocket","withCredentials","transports","reconnection","reconnectionAttempts","reconnectionDelay","timeout","on","console","log","error","message","reason","connect","disconnect","emit","data","off","updateRobotData","newData","prevData","updatedData","style","position","top","left","transform","padding","backgroundColor","color","borderRadius","children","fileName","_jsxFileName","lineNumber","columnNumber","makeDefault","fov","onUpdate","preset","alignment","margin","labelColor","axisHeadScale","_c","$RefreshReg$"],"sources":["/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/App.tsx"],"sourcesContent":["import React, {useState, useEffect, useCallback} from 'react'\nimport {Canvas} from '@react-three/fiber'\nimport {GizmoHelper, GizmoViewport, OrbitControls, Environment, Stats, PerspectiveCamera} from '@react-three/drei'\nimport {Shadows, Ground} from '@components/stage'\nimport socketIOClient from 'socket.io-client'\nimport {Robot} from '@types'\nimport {RobotArm} from \"@components/model/RobotArm\"\n\nconst SOCKET_SERVER_URL = 'http://localhost:4000';\n\nexport default function App() {\n    const [robotData, setRobotData] = useState<Robot.RobotNodes>()\n    const [socket, setSocket] = useState<any>(null);\n    const [connectionError, setConnectionError] = useState<string>('');\n\n    useEffect(() => {\n        // Initialize socket connection\n        const newSocket = socketIOClient(SOCKET_SERVER_URL, {\n            withCredentials: true,\n            transports: ['polling', 'websocket'],\n            reconnection: true,\n            reconnectionAttempts: 5,\n            reconnectionDelay: 1000,\n            timeout: 20000\n        });\n\n        // Connection event handlers\n        newSocket.on('connect', () => {\n            console.log('Connected to server');\n            setConnectionError('');\n        });\n\n        newSocket.on('connect_error', (error: Error) => {\n            console.error('Connection error:', error);\n            setConnectionError(`Connection error: ${error.message}`);\n        });\n\n        newSocket.on('disconnect', (reason: string) => {\n            console.log('Disconnected:', reason);\n            if (reason === 'io server disconnect') {\n                // the disconnection was initiated by the server, reconnect manually\n                newSocket.connect();\n            }\n        });\n\n        // Set socket in state\n        setSocket(newSocket);\n\n        // Clean up on component unmount\n        return () => {\n            if (newSocket) {\n                newSocket.disconnect();\n            }\n        };\n    }, []);\n\n    useEffect(() => {\n        if (!socket) return;\n\n        // Request initial state\n        if (!robotData) {\n            socket.emit(\"state:get\");\n        }\n\n        // Listen for state updates\n        socket.on(\"state\", (data: Robot.RobotNodes) => {\n            setRobotData(data);\n        });\n\n        return () => {\n            socket.off(\"state\");\n        };\n    }, [socket, robotData]);\n\n    const updateRobotData = useCallback((newData: Partial<Robot.RobotNodes>) => {\n        if (!socket) return;\n\n        setRobotData(prevData => {\n            if (prevData) {\n                const updatedData = {...prevData, ...newData};\n                socket.emit(\"state:update\", updatedData);\n                return updatedData;\n            }\n            return prevData;\n        });\n    }, [socket]);\n\n    // Show connection error if any\n    if (connectionError) {\n        return (\n            <div style={{ \n                position: 'fixed', \n                top: '50%', \n                left: '50%', \n                transform: 'translate(-50%, -50%)',\n                padding: '20px',\n                backgroundColor: '#ff4444',\n                color: 'white',\n                borderRadius: '5px'\n            }}>\n                {connectionError}\n            </div>\n        );\n    }\n\n    return (\n        <>\n            {robotData &&\n                <Canvas>\n                    <PerspectiveCamera makeDefault fov={40} position={[10, 8, 25]}/>\n                    <RobotArm data={robotData} onUpdate={updateRobotData}/>\n                    <Shadows/>\n                    <Ground/>\n                    <Environment preset=\"city\"/>\n                    <OrbitControls makeDefault/>\n                    <GizmoHelper alignment=\"bottom-right\" margin={[100, 100]}>\n                        <GizmoViewport labelColor=\"white\" axisHeadScale={1}/>\n                    </GizmoHelper>\n                    <Stats/>\n                </Canvas>\n            }\n        </>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}