{"ast":null,"code":"var _jsxFileName = \"/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/components/model/RobotArm.tsx\";\nimport { Gizmo } from '@components/gizmo';\nimport { useGLTF } from '@react-three/drei';\nimport { Robot } from '@types';\nimport Mesh from \"@components/mesh/Mesh\";\nimport { useState } from 'react';\nimport { Euler } from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const RobotArm = ({\n  data,\n  onUpdate\n}) => {\n  const {\n    nodes\n  } = useGLTF('/robot.glb');\n  const node = Robot.NodeName;\n  const [startRotation, setStartRotation] = useState({});\n  const [startPosition, setStartPosition] = useState({});\n  const [currentRotations, setCurrentRotations] = useState({\n    [node.mainColumn]: [0, 0, 0],\n    [node.upperArm]: [0, 0, 0],\n    [node.gripper]: [0, 0, 0]\n  });\n  const [currentPositions, setCurrentPositions] = useState({\n    [node.upperArm]: [0, 0, 0]\n  });\n  const handleGizmoUpdate = (nodeName, newTransform) => {\n    if (nodeName === node.upperArm) {\n      setCurrentPositions(prev => ({\n        ...prev,\n        [nodeName]: newTransform\n      }));\n      console.log(`Current height for ${nodeName}:`, newTransform[1]);\n    } else {\n      setCurrentRotations(prev => ({\n        ...prev,\n        [nodeName]: newTransform\n      }));\n      const euler = new Euler().fromArray(newTransform);\n      const currentDegrees = euler.y * 180 / Math.PI;\n      console.log(`Current rotation for ${nodeName}:`, currentDegrees);\n    }\n  };\n  const handleDragStart = (nodeName, transform) => {\n    if (nodeName === node.upperArm) {\n      setStartPosition(prev => ({\n        ...prev,\n        [nodeName]: transform[1]\n      }));\n      console.log(`Start height for ${nodeName}:`, transform[1]);\n    } else {\n      const euler = new Euler().fromArray(transform);\n      const degrees = euler.y * 180 / Math.PI;\n      setStartRotation(prev => ({\n        ...prev,\n        [nodeName]: degrees\n      }));\n      console.log(`Start rotation for ${nodeName}:`, degrees);\n    }\n  };\n  const handleDragEnd = nodeName => {\n    let totalChange;\n    if (nodeName === node.upperArm) {\n      const currentHeight = currentPositions[nodeName][1];\n      const heightChange = currentHeight - (startPosition[nodeName] || 0);\n      totalChange = heightChange * 90; // Współczynnik konwersji wysokości na kąt\n\n      const newData = {\n        nodes: {\n          ...data.nodes,\n          [nodeName]: {\n            ...data.nodes[nodeName],\n            //    @ts-ignore\n            position: currentPositions[nodeName],\n            scale: data.nodes[nodeName].scale,\n            rotation: data.nodes[nodeName].rotation,\n            rotationDegrees: totalChange,\n            _updated: true\n          }\n        }\n      };\n      Object.keys(newData.nodes || {}).forEach(key => {\n        //    @ts-ignore\n        if (key !== nodeName && newData.nodes && newData.nodes[key]) {\n          // @ts-ignore\n          newData.nodes[key]._updated = false;\n        }\n      });\n      console.log(`Sending height change as angle for ${nodeName}:`, totalChange);\n      onUpdate(newData);\n    } else {\n      // Istniejąca logika dla main_column i gripper\n      const euler = new Euler().fromArray(currentRotations[nodeName]);\n      const endDegrees = euler.y * 180 / Math.PI;\n      totalChange = endDegrees - (startRotation[nodeName] || 0);\n      if (nodeName === node.mainColumn) {\n        totalChange *= 4;\n      }\n      const newData = {\n        nodes: {\n          ...data.nodes,\n          [nodeName]: {\n            ...data.nodes[nodeName],\n            position: data.nodes[nodeName].position,\n            scale: data.nodes[nodeName].scale,\n            rotation: currentRotations[nodeName],\n            rotationDegrees: totalChange,\n            _updated: true\n          }\n        }\n      };\n      Object.keys(newData.nodes || {}).forEach(key => {\n        //    @ts-ignore\n        if (key !== nodeName && newData.nodes && newData.nodes[key]) {\n          // @ts-ignore\n          newData.nodes[key]._updated = false;\n        }\n      });\n      console.log(`Sending rotation to robot for ${nodeName}:`, totalChange);\n      onUpdate(newData);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: /*#__PURE__*/_jsxDEV(Gizmo, {\n      scale: 5,\n      disableTranslation: true,\n      activeAxes: [true, false, true],\n      userData: [node.mainColumn],\n      onUpdate: newMatrix => handleGizmoUpdate(node.mainColumn, newMatrix),\n      onDragStart: () => handleDragStart(node.mainColumn, currentRotations[node.mainColumn]),\n      onDragEnd: () => handleDragEnd(node.mainColumn),\n      children: [/*#__PURE__*/_jsxDEV(Mesh, {\n        node: nodes[node.mainColumn],\n        data: data.nodes[node.mainColumn]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Gizmo, {\n        activeAxes: [false, true, false],\n        translationLimits: [undefined, [-1, .8], undefined],\n        anchor: [-0.8, 1.5, 0],\n        scale: 1,\n        userData: [node.upperArm],\n        onUpdate: newMatrix => handleGizmoUpdate(node.upperArm, newMatrix)\n        //    @ts-ignore\n        ,\n        onDragStart: () => handleDragStart(node.upperArm, data.nodes[node.upperArm].position),\n        onDragEnd: () => handleDragEnd(node.upperArm),\n        children: [/*#__PURE__*/_jsxDEV(Mesh, {\n          node: nodes[node.upperArm],\n          data: data.nodes[node.upperArm]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Mesh, {\n          node: nodes[node.wristExtension],\n          data: data.nodes[node.wristExtension]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Mesh, {\n          node: nodes[node.hand],\n          data: data.nodes[node.hand]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Gizmo, {\n          activeAxes: [false, false, true],\n          translationLimits: [undefined, undefined, [0, 0.4]],\n          anchor: [2, 0, 2],\n          scale: 0.75,\n          userData: [node.gripper],\n          onUpdate: newMatrix => handleGizmoUpdate(node.gripper, newMatrix),\n          onDragStart: () => handleDragStart(node.gripper, currentRotations[node.gripper]),\n          onDragEnd: () => handleDragEnd(node.gripper),\n          children: /*#__PURE__*/_jsxDEV(Mesh, {\n            node: nodes[node.gripper],\n            data: data.nodes[node.gripper]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 9\n  }, this);\n};\nuseGLTF.preload('/robot.glb');","map":{"version":3,"names":["Gizmo","useGLTF","Robot","Mesh","useState","Euler","jsxDEV","_jsxDEV","RobotArm","data","onUpdate","nodes","node","NodeName","startRotation","setStartRotation","startPosition","setStartPosition","currentRotations","setCurrentRotations","mainColumn","upperArm","gripper","currentPositions","setCurrentPositions","handleGizmoUpdate","nodeName","newTransform","prev","console","log","euler","fromArray","currentDegrees","y","Math","PI","handleDragStart","transform","degrees","handleDragEnd","totalChange","currentHeight","heightChange","newData","position","scale","rotation","rotationDegrees","_updated","Object","keys","forEach","key","endDegrees","children","disableTranslation","activeAxes","userData","newMatrix","onDragStart","onDragEnd","fileName","_jsxFileName","lineNumber","columnNumber","translationLimits","undefined","anchor","wristExtension","hand","preload"],"sources":["/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/components/model/RobotArm.tsx"],"sourcesContent":["import {Gizmo} from '@components/gizmo'\nimport {useGLTF} from '@react-three/drei'\nimport {Robot} from '@types'\nimport Mesh from \"@components/mesh/Mesh\"\nimport { useState } from 'react';\nimport { Euler } from 'three';\n\ninterface RobotProps {\n    data: Robot.RobotNodes;\n    onUpdate: (newData: Partial<Robot.RobotNodes>) => void;\n}\n\nexport const RobotArm = ({data, onUpdate}: RobotProps) => {\n    const {nodes} = useGLTF('/robot.glb') as unknown as Robot.DreiGLTF;\n    const node = Robot.NodeName;\n    const [startRotation, setStartRotation] = useState<{[key: string]: number}>({});\n    const [startPosition, setStartPosition] = useState<{[key: string]: number}>({});\n    const [currentRotations, setCurrentRotations] = useState<{[key: string]: [number, number, number]}>({\n        [node.mainColumn]: [0,0,0],\n        [node.upperArm]: [0,0,0],\n        [node.gripper]: [0,0,0]\n    });\n    const [currentPositions, setCurrentPositions] = useState<{[key: string]: [number, number, number]}>({\n        [node.upperArm]: [0,0,0]\n    });\n    \n    const handleGizmoUpdate = (nodeName: Robot.NodeName, newTransform: [number, number, number]) => {\n        if (nodeName === node.upperArm) {\n            setCurrentPositions(prev => ({\n                ...prev,\n                [nodeName]: newTransform\n            }));\n            console.log(`Current height for ${nodeName}:`, newTransform[1]);\n        } else {\n            setCurrentRotations(prev => ({\n                ...prev,\n                [nodeName]: newTransform\n            }));\n            const euler = new Euler().fromArray(newTransform);\n            const currentDegrees = (euler.y * 180) / Math.PI;\n            console.log(`Current rotation for ${nodeName}:`, currentDegrees);\n        }\n    };\n\n    const handleDragStart = (nodeName: Robot.NodeName, transform: [number, number, number]) => {\n        if (nodeName === node.upperArm) {\n            setStartPosition(prev => ({\n                ...prev,\n                [nodeName]: transform[1]\n            }));\n            console.log(`Start height for ${nodeName}:`, transform[1]);\n        } else {\n            const euler = new Euler().fromArray(transform);\n            const degrees = (euler.y * 180) / Math.PI;\n            setStartRotation(prev => ({\n                ...prev,\n                [nodeName]: degrees\n            }));\n            console.log(`Start rotation for ${nodeName}:`, degrees);\n        }\n    };\n\n    const handleDragEnd = (nodeName: Robot.NodeName) => {\n        let totalChange;\n\n        if (nodeName === node.upperArm) {\n            const currentHeight = currentPositions[nodeName][1];\n            const heightChange = currentHeight - (startPosition[nodeName] || 0);\n            totalChange = heightChange * 90; // Współczynnik konwersji wysokości na kąt\n            \n            const newData: Partial<Robot.RobotNodes> = {\n                nodes: {\n                    ...data.nodes,\n                    [nodeName]: {\n                        ...data.nodes[nodeName],\n                        //    @ts-ignore\n                        position: currentPositions[nodeName],\n                        scale: data.nodes[nodeName].scale,\n                        rotation: data.nodes[nodeName].rotation,\n                        rotationDegrees: totalChange,\n                        _updated: true\n                    }\n                }\n            };\n\n            Object.keys(newData.nodes || {}).forEach((key) => {\n                //    @ts-ignore\n                if (key !== nodeName && newData.nodes && newData.nodes[key]) {\n                    // @ts-ignore\n                    newData.nodes[key]._updated = false;\n                }\n            });\n\n            console.log(`Sending height change as angle for ${nodeName}:`, totalChange);\n            onUpdate(newData);\n\n        } else {\n            // Istniejąca logika dla main_column i gripper\n            const euler = new Euler().fromArray(currentRotations[nodeName]);\n            const endDegrees = (euler.y * 180) / Math.PI;\n            totalChange = endDegrees - (startRotation[nodeName] || 0);\n            \n            if (nodeName === node.mainColumn) {\n                totalChange *= 4;\n            }\n\n            const newData: Partial<Robot.RobotNodes> = {\n                nodes: {\n                    ...data.nodes,\n                    [nodeName]: {\n                        ...data.nodes[nodeName],\n                        position: data.nodes[nodeName].position,\n                        scale: data.nodes[nodeName].scale,\n                        rotation: currentRotations[nodeName],\n                        rotationDegrees: totalChange,\n                        _updated: true\n                    }\n                }\n            };\n\n            Object.keys(newData.nodes || {}).forEach((key) => {\n                //    @ts-ignore\n                if (key !== nodeName && newData.nodes && newData.nodes[key]) {\n                    // @ts-ignore\n                    newData.nodes[key]._updated = false;\n                }\n            });\n\n            console.log(`Sending rotation to robot for ${nodeName}:`, totalChange);\n            onUpdate(newData);\n        }\n    };\n\n\n\n    return (\n        <group>\n            <Gizmo scale={5}\n                   disableTranslation\n                   activeAxes={[true, false, true]}\n                   userData={[node.mainColumn]}\n                   onUpdate={(newMatrix) => handleGizmoUpdate(node.mainColumn, newMatrix)}\n                   onDragStart={() => handleDragStart(node.mainColumn, currentRotations[node.mainColumn])}\n                   onDragEnd={() => handleDragEnd(node.mainColumn)}\n                >\n                <Mesh node={nodes[node.mainColumn]} data={data.nodes[node.mainColumn]}/>\n\n                <Gizmo activeAxes={[false, true, false]}\n                       translationLimits={[undefined, [-1, .8], undefined]}\n                       anchor={[-0.8, 1.5, 0]}\n                       scale={1}\n                       userData={[node.upperArm]}\n                       onUpdate={(newMatrix) => handleGizmoUpdate(node.upperArm, newMatrix)}\n                    //    @ts-ignore\n                       onDragStart={() => handleDragStart(node.upperArm, data.nodes[node.upperArm].position)}\n                       onDragEnd={() => handleDragEnd(node.upperArm)}\n                       >\n\n                    <Mesh node={nodes[node.upperArm]} data={data.nodes[node.upperArm]}/>\n                    <Mesh node={nodes[node.wristExtension]} data={data.nodes[node.wristExtension]}/>\n                    <Mesh node={nodes[node.hand]} data={data.nodes[node.hand]}/>\n\n                    <Gizmo activeAxes={[false, false, true]}\n                           translationLimits={[undefined, undefined, [0, 0.4]]}\n                           anchor={[2, 0, 2]}\n                           scale={0.75}\n                           userData={[node.gripper]}\n                           onUpdate={(newMatrix) => handleGizmoUpdate(node.gripper, newMatrix)}\n                           onDragStart={() => handleDragStart(node.gripper, currentRotations[node.gripper])}\n                           onDragEnd={() => handleDragEnd(node.gripper)}\n                           >\n                        <Mesh node={nodes[node.gripper]} data={data.nodes[node.gripper]}/>\n                    </Gizmo>\n                </Gizmo>\n            </Gizmo>\n        </group>\n    );\n};\n\nuseGLTF.preload('/robot.glb');"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}