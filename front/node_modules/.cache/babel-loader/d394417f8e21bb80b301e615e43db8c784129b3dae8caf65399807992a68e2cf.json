{"ast":null,"code":"var _jsxFileName = \"/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/components/model/RobotArm.tsx\";\n// @ts-nocheck\nimport { Gizmo } from '@components/gizmo';\nimport { useGLTF } from '@react-three/drei';\nimport { Robot } from '@types';\nimport Mesh from \"@components/mesh/Mesh\";\nimport { useState } from 'react';\nimport { Euler } from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const RobotArm = ({\n  data,\n  onUpdate\n}) => {\n  const {\n    nodes\n  } = useGLTF('/robot.glb');\n  const node = Robot.NodeName;\n\n  // Stan dla EV3\n  const [robotState, setRobotState] = useState(data);\n\n  // Stan dla wizualizacji\n  const [visualState, setVisualState] = useState(() => {\n    // Inicjalizacja stanu wizualizacji z początkowych danych\n    const initial = {};\n    Object.keys(data.nodes).forEach(key => {\n      initial[key] = {\n        position: [...data.nodes[key].position],\n        scale: [...data.nodes[key].scale],\n        rotation: [...data.nodes[key].rotation]\n      };\n    });\n    return initial;\n  });\n\n  // Stan dla śledzenia początkowych pozycji\n  const [startPosition, setStartPosition] = useState({});\n  const [startRotation, setStartRotation] = useState({});\n  const handleGizmoUpdate = (nodeName, transform) => {\n    // Aktualizuj tylko stan wizualizacji\n    setVisualState(prev => ({\n      ...prev,\n      [nodeName]: {\n        ...prev[nodeName],\n        position: [...transform.position],\n        rotation: [...transform.rotation]\n      }\n    }));\n  };\n  const handleDragStart = nodeName => {\n    if (nodeName === node.upperArm) {\n      setStartPosition(prev => ({\n        ...prev,\n        [nodeName]: visualState[nodeName].position[1]\n      }));\n    } else if (nodeName === node.gripper) {\n      setStartPosition(prev => ({\n        ...prev,\n        [nodeName]: visualState[nodeName].position[2]\n      }));\n    } else {\n      const euler = new Euler().fromArray(visualState[nodeName].rotation);\n      const degrees = euler.y * 180 / Math.PI;\n      setStartRotation(prev => ({\n        ...prev,\n        [nodeName]: degrees\n      }));\n    }\n  };\n  const handleDragEnd = nodeName => {\n    // Tworzy nowy obiekt dla EV3, nie modyfikując visualState\n    const newRobotState = JSON.parse(JSON.stringify(robotState));\n    let angleChange = 0;\n    if (nodeName === node.upperArm) {\n      const currentHeight = visualState[nodeName].position[1];\n      const heightChange = currentHeight - (startPosition[nodeName] || 0);\n      angleChange = heightChange * 90 * -1 * 2;\n    } else if (nodeName === node.gripper) {\n      const currentPosition = visualState[nodeName].position[2];\n      const positionChange = currentPosition - (startPosition[nodeName] || 0);\n      angleChange = positionChange * 90 * -1 * 2;\n    } else if (nodeName === node.mainColumn) {\n      const euler = new Euler().fromArray(visualState[nodeName].rotation);\n      const endDegrees = euler.y * 180 / Math.PI;\n      angleChange = (endDegrees - (startRotation[nodeName] || 0)) * 4;\n    }\n\n    // Aktualizuj stan robota\n    newRobotState.nodes[nodeName] = {\n      ...newRobotState.nodes[nodeName],\n      rotationDegrees: angleChange,\n      _updated: true\n    };\n\n    // Reset flag dla innych węzłów\n    Object.keys(newRobotState.nodes).forEach(key => {\n      if (key !== nodeName) {\n        newRobotState.nodes[key]._updated = false;\n      }\n    });\n    setRobotState(newRobotState);\n    onUpdate(newRobotState);\n  };\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: /*#__PURE__*/_jsxDEV(Gizmo, {\n      scale: 5,\n      disableTranslation: true,\n      activeAxes: [true, false, true],\n      userData: [node.mainColumn],\n      onDragStart: () => handleDragStart(node.mainColumn),\n      onDragEnd: () => handleDragEnd(node.mainColumn),\n      onUpdate: transform => handleGizmoUpdate(node.mainColumn, transform),\n      children: [/*#__PURE__*/_jsxDEV(Mesh, {\n        node: nodes[node.mainColumn],\n        data: {\n          ...visualState[node.mainColumn],\n          _updated: false\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Gizmo, {\n        activeAxes: [false, true, false],\n        translationLimits: [undefined, [-1, .8], undefined],\n        disableRotation: true,\n        anchor: [-0.8, 1.5, 0],\n        scale: 1,\n        userData: [node.upperArm],\n        onDragStart: () => handleDragStart(node.upperArm),\n        onDragEnd: () => handleDragEnd(node.upperArm),\n        onUpdate: transform => handleGizmoUpdate(node.upperArm, transform),\n        children: [/*#__PURE__*/_jsxDEV(Mesh, {\n          node: nodes[node.upperArm],\n          data: {\n            ...visualState[node.upperArm],\n            _updated: false\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Mesh, {\n          node: nodes[node.wristExtension],\n          data: {\n            ...visualState[node.wristExtension],\n            _updated: false\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Mesh, {\n          node: nodes[node.hand],\n          data: {\n            ...visualState[node.hand],\n            _updated: false\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Gizmo, {\n          activeAxes: [false, false, true],\n          translationLimits: [undefined, undefined, [0, 0.4]],\n          anchor: [2, 0, 2],\n          scale: 0.75,\n          userData: [node.gripper],\n          onDragStart: () => handleDragStart(node.gripper),\n          onDragEnd: () => handleDragEnd(node.gripper),\n          onUpdate: transform => handleGizmoUpdate(node.gripper, transform),\n          children: /*#__PURE__*/_jsxDEV(Mesh, {\n            node: nodes[node.gripper],\n            data: {\n              ...visualState[node.gripper],\n              _updated: false\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n};\nuseGLTF.preload('/robot.glb');","map":{"version":3,"names":["Gizmo","useGLTF","Robot","Mesh","useState","Euler","jsxDEV","_jsxDEV","RobotArm","data","onUpdate","nodes","node","NodeName","robotState","setRobotState","visualState","setVisualState","initial","Object","keys","forEach","key","position","scale","rotation","startPosition","setStartPosition","startRotation","setStartRotation","handleGizmoUpdate","nodeName","transform","prev","handleDragStart","upperArm","gripper","euler","fromArray","degrees","y","Math","PI","handleDragEnd","newRobotState","JSON","parse","stringify","angleChange","currentHeight","heightChange","currentPosition","positionChange","mainColumn","endDegrees","rotationDegrees","_updated","children","disableTranslation","activeAxes","userData","onDragStart","onDragEnd","fileName","_jsxFileName","lineNumber","columnNumber","translationLimits","undefined","disableRotation","anchor","wristExtension","hand","preload"],"sources":["/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/src/components/model/RobotArm.tsx"],"sourcesContent":["// @ts-nocheck\nimport {Gizmo} from '@components/gizmo'\nimport {useGLTF} from '@react-three/drei'\nimport {Robot} from '@types'\nimport Mesh from \"@components/mesh/Mesh\"\nimport { useState } from 'react';\nimport { Euler } from 'three';\n\ninterface RobotProps {\n    data: Robot.RobotNodes;\n    onUpdate: (newData: Partial<Robot.RobotNodes>) => void;\n}\n\nexport const RobotArm = ({data, onUpdate}: RobotProps) => {\n    const {nodes} = useGLTF('/robot.glb') as unknown as Robot.DreiGLTF;\n    const node = Robot.NodeName;\n    \n    // Stan dla EV3\n    const [robotState, setRobotState] = useState<Robot.RobotNodes>(data);\n    \n    // Stan dla wizualizacji\n    const [visualState, setVisualState] = useState<{[key: string]: Robot.RobotVisualization}>(() => {\n        // Inicjalizacja stanu wizualizacji z początkowych danych\n        const initial: {[key: string]: Robot.RobotVisualization} = {};\n        Object.keys(data.nodes).forEach(key => {\n            initial[key] = {\n                position: [...data.nodes[key].position],\n                scale: [...data.nodes[key].scale],\n                rotation: [...data.nodes[key].rotation]\n            };\n        });\n        return initial;\n    });\n\n    // Stan dla śledzenia początkowych pozycji\n    const [startPosition, setStartPosition] = useState<{[key: string]: number}>({});\n    const [startRotation, setStartRotation] = useState<{[key: string]: number}>({});\n\n    const handleGizmoUpdate = (nodeName: Robot.NodeName, transform: { position: [number, number, number], rotation: [number, number, number] }) => {\n        // Aktualizuj tylko stan wizualizacji\n        setVisualState(prev => ({\n            ...prev,\n            [nodeName]: {\n                ...prev[nodeName],\n                position: [...transform.position],\n                rotation: [...transform.rotation]\n            }\n        }));\n    };\n\n    const handleDragStart = (nodeName: Robot.NodeName) => {\n        if (nodeName === node.upperArm) {\n            setStartPosition(prev => ({\n                ...prev,\n                [nodeName]: visualState[nodeName].position[1]\n            }));\n        } else if (nodeName === node.gripper) {\n            setStartPosition(prev => ({\n                ...prev,\n                [nodeName]: visualState[nodeName].position[2]\n            }));\n        } else {\n            const euler = new Euler().fromArray(visualState[nodeName].rotation);\n            const degrees = (euler.y * 180) / Math.PI;\n            setStartRotation(prev => ({\n                ...prev,\n                [nodeName]: degrees\n            }));\n        }\n    };\n\n    const handleDragEnd = (nodeName: Robot.NodeName) => {\n        // Tworzy nowy obiekt dla EV3, nie modyfikując visualState\n        const newRobotState = JSON.parse(JSON.stringify(robotState));\n        let angleChange = 0;\n\n        if (nodeName === node.upperArm) {\n            const currentHeight = visualState[nodeName].position[1];\n            const heightChange = currentHeight - (startPosition[nodeName] || 0);\n            angleChange = heightChange * 90 * -1 * 2;\n        } \n        else if (nodeName === node.gripper) {\n            const currentPosition = visualState[nodeName].position[2];\n            const positionChange = currentPosition - (startPosition[nodeName] || 0);\n            angleChange = positionChange * 90 * -1 * 2;\n        }\n        else if (nodeName === node.mainColumn) {\n            const euler = new Euler().fromArray(visualState[nodeName].rotation);\n            const endDegrees = (euler.y * 180) / Math.PI;\n            angleChange = (endDegrees - (startRotation[nodeName] || 0)) * 4;\n        }\n\n        // Aktualizuj stan robota\n        newRobotState.nodes[nodeName] = {\n            ...newRobotState.nodes[nodeName],\n            rotationDegrees: angleChange,\n            _updated: true\n        };\n\n        // Reset flag dla innych węzłów\n        Object.keys(newRobotState.nodes).forEach((key) => {\n            if (key !== nodeName) {\n                newRobotState.nodes[key]._updated = false;\n            }\n        });\n\n        setRobotState(newRobotState);\n        onUpdate(newRobotState);\n    };\n\n    return (\n        <group>\n            <Gizmo scale={5}\n                   disableTranslation\n                   activeAxes={[true, false, true]}\n                   userData={[node.mainColumn]}\n                   onDragStart={() => handleDragStart(node.mainColumn)}\n                   onDragEnd={() => handleDragEnd(node.mainColumn)}\n                   onUpdate={(transform) => handleGizmoUpdate(node.mainColumn, transform)}>\n                <Mesh node={nodes[node.mainColumn]} \n                      data={{\n                          ...visualState[node.mainColumn],\n                          _updated: false\n                      }}/>\n\n                <Gizmo activeAxes={[false, true, false]}\n                       translationLimits={[undefined, [-1, .8], undefined]}\n                       disableRotation\n                       anchor={[-0.8, 1.5, 0]}\n                       scale={1}\n                       userData={[node.upperArm]}\n                       onDragStart={() => handleDragStart(node.upperArm)}\n                       onDragEnd={() => handleDragEnd(node.upperArm)}\n                       onUpdate={(transform) => handleGizmoUpdate(node.upperArm, transform)}>\n                    <Mesh node={nodes[node.upperArm]} \n                          data={{\n                              ...visualState[node.upperArm],\n                              _updated: false\n                          }}/>\n                    <Mesh node={nodes[node.wristExtension]} \n                          data={{\n                              ...visualState[node.wristExtension],\n                              _updated: false\n                          }}/>\n                    <Mesh node={nodes[node.hand]} \n                          data={{\n                              ...visualState[node.hand],\n                              _updated: false\n                          }}/>\n\n                    <Gizmo activeAxes={[false, false, true]}\n                           translationLimits={[undefined, undefined, [0, 0.4]]}\n                           anchor={[2, 0, 2]}\n                           scale={0.75}\n                           userData={[node.gripper]}\n                           onDragStart={() => handleDragStart(node.gripper)}\n                           onDragEnd={() => handleDragEnd(node.gripper)}\n                           onUpdate={(transform) => handleGizmoUpdate(node.gripper, transform)}>\n                        <Mesh node={nodes[node.gripper]} \n                              data={{\n                                  ...visualState[node.gripper],\n                                  _updated: false\n                              }}/>\n                    </Gizmo>\n                </Gizmo>\n            </Gizmo>\n        </group>\n    );\n};\n\nuseGLTF.preload('/robot.glb');"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}