{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport { Instances, Instance } from './Instances.js';\nimport { useSpriteLoader } from './useSpriteLoader.js';\nconst context = /*#__PURE__*/React.createContext(null);\nfunction useSpriteAnimator() {\n  return React.useContext(context);\n}\nconst SpriteAnimator = /* @__PURE__ */React.forwardRef((_ref, fref) => {\n  let {\n    startFrame,\n    endFrame,\n    fps,\n    frameName,\n    textureDataURL,\n    textureImageURL,\n    loop,\n    numberOfFrames,\n    autoPlay,\n    animationNames,\n    onStart,\n    onEnd,\n    onLoopEnd,\n    onFrame,\n    play,\n    pause,\n    flipX,\n    alphaTest,\n    children,\n    asSprite,\n    offset,\n    playBackwards,\n    resetOnEnd,\n    maxItems,\n    instanceItems,\n    spriteDataset,\n    ...props\n  } = _ref;\n  const ref = React.useRef();\n  const spriteData = React.useRef(null);\n  const matRef = React.useRef();\n  const spriteRef = React.useRef();\n  const timerOffset = React.useRef(window.performance.now());\n  const currentFrame = React.useRef(startFrame || 0);\n  const currentFrameName = React.useRef(frameName || '');\n  const fpsInterval = 1000 / (fps || 30);\n  const [spriteTexture, setSpriteTexture] = React.useState(new THREE.Texture());\n  const totalFrames = React.useRef(0);\n  const [aspect, setAspect] = React.useState([1, 1, 1]);\n  const flipOffset = flipX ? -1 : 1;\n  const [displayAsSprite, setDisplayAsSprite] = React.useState(asSprite !== null && asSprite !== void 0 ? asSprite : true);\n  const pauseRef = React.useRef(pause);\n  const pos = React.useRef(offset);\n  const softEnd = React.useRef(false);\n  const frameBuffer = React.useRef([]);\n  const {\n    spriteObj,\n    loadJsonAndTexture\n  } = useSpriteLoader(null, null, animationNames, numberOfFrames);\n  //\n\n  function reset() {}\n  const state = React.useMemo(() => ({\n    current: pos.current,\n    offset: pos.current,\n    imageUrl: textureImageURL,\n    reset: reset,\n    hasEnded: false,\n    ref: fref\n  }), [textureImageURL, spriteDataset]);\n  React.useImperativeHandle(fref, () => ref.current, []);\n  React.useLayoutEffect(() => {\n    pos.current = offset;\n  }, [offset]);\n  const calculateAspectRatio = (width, height) => {\n    const aspectRatio = height / width;\n    if (spriteRef.current) {\n      spriteRef.current.scale.set(1, aspectRatio, 1);\n    }\n    return [1, aspectRatio, 1];\n  };\n\n  // initial loads\n  React.useEffect(() => {\n    if (spriteDataset) {\n      var _spriteDataset$sprite;\n      parseSpriteDataLite(spriteDataset == null || (_spriteDataset$sprite = spriteDataset.spriteTexture) == null ? void 0 : _spriteDataset$sprite.clone(), spriteDataset.spriteData);\n    } else {\n      loadJsonAndTexture(textureImageURL, textureDataURL);\n    }\n  }, [spriteDataset]);\n  React.useEffect(() => {\n    if (spriteObj) {\n      var _spriteObj$spriteText;\n      parseSpriteDataLite(spriteObj == null || (_spriteObj$spriteText = spriteObj.spriteTexture) == null ? void 0 : _spriteObj$spriteText.clone(), spriteObj == null ? void 0 : spriteObj.spriteData);\n    }\n  }, [spriteObj]);\n  React.useEffect(() => {\n    setDisplayAsSprite(asSprite !== null && asSprite !== void 0 ? asSprite : true);\n  }, [asSprite]);\n\n  // support backwards play\n  React.useEffect(() => {\n    state.hasEnded = false;\n    if (spriteData.current && playBackwards === true) {\n      currentFrame.current = spriteData.current.frames.length - 1;\n    } else {\n      currentFrame.current = 0;\n    }\n  }, [playBackwards]);\n  React.useLayoutEffect(() => {\n    modifySpritePosition();\n  }, [spriteTexture, flipX]);\n  React.useEffect(() => {\n    if (autoPlay) {\n      pauseRef.current = false;\n    }\n  }, [autoPlay]);\n  React.useEffect(() => {\n    if (currentFrameName.current !== frameName && frameName) {\n      currentFrame.current = 0;\n      currentFrameName.current = frameName;\n      state.hasEnded = false;\n      modifySpritePosition();\n      if (spriteData.current) {\n        const {\n          w,\n          h\n        } = getFirstItem(spriteData.current.frames).sourceSize;\n        const _aspect = calculateAspectRatio(w, h);\n        setAspect(_aspect);\n      }\n    }\n  }, [frameName]);\n\n  // lite version for pre-loaded assets\n  const parseSpriteDataLite = function (textureData) {\n    let frameData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    if (frameData === null) {\n      if (numberOfFrames) {\n        //get size from texture\n        const width = textureData.image.width;\n        const height = textureData.image.height;\n        totalFrames.current = numberOfFrames;\n        if (playBackwards) {\n          currentFrame.current = numberOfFrames - 1;\n        }\n        spriteData.current = {\n          frames: [],\n          meta: {\n            version: '1.0',\n            size: {\n              w: width,\n              h: height\n            },\n            scale: '1'\n          }\n        };\n        spriteData.current.frames = frameData;\n      }\n    } else {\n      spriteData.current = frameData;\n      totalFrames.current = spriteData.current.frames.length;\n      if (playBackwards) {\n        currentFrame.current = totalFrames.current - 1;\n      }\n      const {\n        w,\n        h\n      } = getFirstItem(spriteData.current.frames).sourceSize;\n      const aspect = calculateAspectRatio(w, h);\n      setAspect(aspect);\n      if (matRef.current) {\n        matRef.current.map = textureData;\n      }\n    }\n\n    // buffer for instanced\n    if (instanceItems) {\n      for (var i = 0; i < instanceItems.length; i++) {\n        const keys = Object.keys(spriteData.current.frames);\n        const randomKey = keys[Math.floor(Math.random() * keys.length)];\n        frameBuffer.current.push({\n          key: i,\n          frames: spriteData.current.frames,\n          selectedFrame: randomKey,\n          offset: {\n            x: 0,\n            y: 0\n          }\n        });\n      }\n    }\n    setSpriteTexture(textureData);\n  };\n\n  // modify the sprite material after json is parsed and state updated\n  const modifySpritePosition = () => {\n    if (!spriteData.current) return;\n    const {\n      meta: {\n        size: metaInfo\n      },\n      frames\n    } = spriteData.current;\n    const {\n      w: frameW,\n      h: frameH\n    } = Array.isArray(frames) ? frames[0].sourceSize : frameName ? frames[frameName] ? frames[frameName][0].sourceSize : {\n      w: 0,\n      h: 0\n    } : {\n      w: 0,\n      h: 0\n    };\n    matRef.current.map.wrapS = matRef.current.map.wrapT = THREE.RepeatWrapping;\n    matRef.current.map.center.set(0, 0);\n    matRef.current.map.repeat.set(1 * flipOffset / (metaInfo.w / frameW), 1 / (metaInfo.h / frameH));\n\n    //const framesH = (metaInfo.w - 1) / frameW\n    const framesV = (metaInfo.h - 1) / frameH;\n    const frameOffsetY = 1 / framesV;\n    matRef.current.map.offset.x = 0.0; //-matRef.current.map.repeat.x\n    matRef.current.map.offset.y = 1 - frameOffsetY;\n    if (onStart) onStart({\n      currentFrameName: frameName,\n      currentFrame: currentFrame.current\n    });\n  };\n\n  // run the animation on each frame\n  const runAnimation = () => {\n    //if (!frameName) return\n\n    const now = window.performance.now();\n    const diff = now - timerOffset.current;\n    const {\n      meta: {\n        size: metaInfo\n      },\n      frames\n    } = spriteData.current;\n    const {\n      w: frameW,\n      h: frameH\n    } = getFirstItem(frames).sourceSize;\n    const spriteFrames = Array.isArray(frames) ? frames : frameName ? frames[frameName] : [];\n    const _endFrame = endFrame || spriteFrames.length - 1;\n    var _offset = offset === undefined ? state.current : offset;\n\n    // conditionals to support backwards play\n    var endCondition = playBackwards ? currentFrame.current < 0 : currentFrame.current > _endFrame;\n    var onStartCondition = playBackwards ? currentFrame.current === _endFrame : currentFrame.current === 0;\n    var manualProgressEndCondition = playBackwards ? currentFrame.current < 0 : currentFrame.current >= _endFrame;\n    if (endCondition) {\n      currentFrame.current = loop ? startFrame !== null && startFrame !== void 0 ? startFrame : 0 : 0;\n      if (playBackwards) {\n        currentFrame.current = _endFrame;\n      }\n      if (loop) {\n        onLoopEnd == null || onLoopEnd({\n          currentFrameName: frameName,\n          currentFrame: currentFrame.current\n        });\n      } else {\n        onEnd == null || onEnd({\n          currentFrameName: frameName,\n          currentFrame: currentFrame.current\n        });\n        state.hasEnded = resetOnEnd ? false : true;\n        if (resetOnEnd) {\n          pauseRef.current = true;\n          //calculateFinalPosition(frameW, frameH, metaInfo, spriteFrames)\n        }\n      }\n      if (!loop) return;\n    } else if (onStartCondition) {\n      onStart == null || onStart({\n        currentFrameName: frameName,\n        currentFrame: currentFrame.current\n      });\n    }\n\n    // for manual update\n    if (_offset !== undefined && manualProgressEndCondition) {\n      if (softEnd.current === false) {\n        onEnd == null || onEnd({\n          currentFrameName: frameName,\n          currentFrame: currentFrame.current\n        });\n        softEnd.current = true;\n      }\n    } else {\n      // same for start?\n      softEnd.current = false;\n    }\n\n    // clock to limit fps\n    if (diff <= fpsInterval) return;\n    timerOffset.current = now - diff % fpsInterval;\n    calculateFinalPosition(frameW, frameH, metaInfo, spriteFrames);\n  };\n  const calculateFinalPosition = (frameW, frameH, metaInfo, spriteFrames) => {\n    // get the manual update offset to find the next frame\n    var _offset = offset === undefined ? state.current : offset;\n    const targetFrame = currentFrame.current;\n    let finalValX = 0;\n    let finalValY = 0;\n    calculateAspectRatio(frameW, frameH);\n    const framesH = (metaInfo.w - 1) / frameW;\n    const framesV = (metaInfo.h - 1) / frameH;\n    if (!spriteFrames[targetFrame]) {\n      return;\n    }\n    const {\n      frame: {\n        x: frameX,\n        y: frameY\n      },\n      sourceSize: {\n        w: originalSizeX,\n        h: originalSizeY\n      }\n    } = spriteFrames[targetFrame];\n    const frameOffsetX = 1 / framesH;\n    const frameOffsetY = 1 / framesV;\n    finalValX = flipOffset > 0 ? frameOffsetX * (frameX / originalSizeX) : frameOffsetX * (frameX / originalSizeX) - matRef.current.map.repeat.x;\n    finalValY = Math.abs(1 - frameOffsetY) - frameOffsetY * (frameY / originalSizeY);\n    matRef.current.map.offset.x = finalValX;\n    matRef.current.map.offset.y = finalValY;\n\n    // if manual update is active\n    if (_offset !== undefined && _offset !== null) {\n      // Calculate the frame index, based on offset given from the provider\n      let frameIndex = Math.floor(_offset * spriteFrames.length);\n\n      // Ensure the frame index is within the valid range\n      frameIndex = Math.max(0, Math.min(frameIndex, spriteFrames.length - 1));\n      if (isNaN(frameIndex)) {\n        console.log('nan frame detected');\n        frameIndex = 0; //fallback\n      }\n      currentFrame.current = frameIndex;\n    } else {\n      // auto update\n      if (playBackwards) {\n        currentFrame.current -= 1;\n      } else {\n        currentFrame.current += 1;\n      }\n    }\n  };\n\n  // *** Warning! It runs on every frame! ***\n  useFrame((_state, _delta) => {\n    var _spriteData$current, _matRef$current;\n    if (!((_spriteData$current = spriteData.current) != null && _spriteData$current.frames) || !((_matRef$current = matRef.current) != null && _matRef$current.map)) {\n      return;\n    }\n    if (pauseRef.current) {\n      return;\n    }\n    if (!state.hasEnded && (autoPlay || play)) {\n      runAnimation();\n      onFrame && onFrame({\n        currentFrameName: currentFrameName.current,\n        currentFrame: currentFrame.current\n      });\n    }\n  });\n\n  // utils\n  const getFirstItem = param => {\n    if (Array.isArray(param)) {\n      return param[0];\n    } else if (typeof param === 'object' && param !== null) {\n      const keys = Object.keys(param);\n      return frameName ? param[frameName][0] : param[keys[0]][0];\n    } else {\n      return {\n        w: 0,\n        h: 0\n      };\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"group\", _extends({}, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(context.Provider, {\n    value: state\n  }, /*#__PURE__*/React.createElement(React.Suspense, {\n    fallback: null\n  }, displayAsSprite && /*#__PURE__*/React.createElement(\"sprite\", {\n    ref: spriteRef,\n    scale: aspect\n  }, /*#__PURE__*/React.createElement(\"spriteMaterial\", {\n    premultipliedAlpha: false,\n    toneMapped: false,\n    ref: matRef,\n    map: spriteTexture,\n    transparent: true,\n    alphaTest: alphaTest !== null && alphaTest !== void 0 ? alphaTest : 0.0\n  })), !displayAsSprite && /*#__PURE__*/React.createElement(Instances, {\n    limit: maxItems // Optional: max amount of items (for calculating buffer size)\n  }, /*#__PURE__*/React.createElement(\"planeGeometry\", {\n    args: [1, 1]\n  }), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    premultipliedAlpha: false,\n    toneMapped: false,\n    side: THREE.DoubleSide,\n    ref: matRef,\n    map: spriteTexture,\n    transparent: true,\n    alphaTest: alphaTest !== null && alphaTest !== void 0 ? alphaTest : 0.0\n  }), (instanceItems !== null && instanceItems !== void 0 ? instanceItems : [0]).map((item, index) => {\n    return /*#__PURE__*/React.createElement(Instance, {\n      key: index,\n      ref: spriteRef,\n      position: item,\n      scale: aspect\n    });\n  }))), children));\n});\nexport { SpriteAnimator, useSpriteAnimator };","map":{"version":3,"names":["_extends","React","useFrame","THREE","Instances","Instance","useSpriteLoader","context","createContext","useSpriteAnimator","useContext","SpriteAnimator","forwardRef","_ref","fref","startFrame","endFrame","fps","frameName","textureDataURL","textureImageURL","loop","numberOfFrames","autoPlay","animationNames","onStart","onEnd","onLoopEnd","onFrame","play","pause","flipX","alphaTest","children","asSprite","offset","playBackwards","resetOnEnd","maxItems","instanceItems","spriteDataset","props","ref","useRef","spriteData","matRef","spriteRef","timerOffset","window","performance","now","currentFrame","currentFrameName","fpsInterval","spriteTexture","setSpriteTexture","useState","Texture","totalFrames","aspect","setAspect","flipOffset","displayAsSprite","setDisplayAsSprite","pauseRef","pos","softEnd","frameBuffer","spriteObj","loadJsonAndTexture","reset","state","useMemo","current","imageUrl","hasEnded","useImperativeHandle","useLayoutEffect","calculateAspectRatio","width","height","aspectRatio","scale","set","useEffect","_spriteDataset$sprite","parseSpriteDataLite","clone","_spriteObj$spriteText","frames","length","modifySpritePosition","w","h","getFirstItem","sourceSize","_aspect","textureData","frameData","arguments","undefined","image","meta","version","size","map","i","keys","Object","randomKey","Math","floor","random","push","key","selectedFrame","x","y","metaInfo","frameW","frameH","Array","isArray","wrapS","wrapT","RepeatWrapping","center","repeat","framesV","frameOffsetY","runAnimation","diff","spriteFrames","_endFrame","_offset","endCondition","onStartCondition","manualProgressEndCondition","calculateFinalPosition","targetFrame","finalValX","finalValY","framesH","frame","frameX","frameY","originalSizeX","originalSizeY","frameOffsetX","abs","frameIndex","max","min","isNaN","console","log","_state","_delta","_spriteData$current","_matRef$current","param","createElement","Provider","value","Suspense","fallback","premultipliedAlpha","toneMapped","transparent","limit","args","side","DoubleSide","item","index","position"],"sources":["/Users/dzianismakeichyk/Documents/projects/robot-fun/robot-arm/hmi/node_modules/@react-three/drei/core/SpriteAnimator.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport { Instances, Instance } from './Instances.js';\nimport { useSpriteLoader } from './useSpriteLoader.js';\n\nconst context = /*#__PURE__*/React.createContext(null);\nfunction useSpriteAnimator() {\n  return React.useContext(context);\n}\nconst SpriteAnimator = /* @__PURE__ */React.forwardRef(({\n  startFrame,\n  endFrame,\n  fps,\n  frameName,\n  textureDataURL,\n  textureImageURL,\n  loop,\n  numberOfFrames,\n  autoPlay,\n  animationNames,\n  onStart,\n  onEnd,\n  onLoopEnd,\n  onFrame,\n  play,\n  pause,\n  flipX,\n  alphaTest,\n  children,\n  asSprite,\n  offset,\n  playBackwards,\n  resetOnEnd,\n  maxItems,\n  instanceItems,\n  spriteDataset,\n  ...props\n}, fref) => {\n  const ref = React.useRef();\n  const spriteData = React.useRef(null);\n  const matRef = React.useRef();\n  const spriteRef = React.useRef();\n  const timerOffset = React.useRef(window.performance.now());\n  const currentFrame = React.useRef(startFrame || 0);\n  const currentFrameName = React.useRef(frameName || '');\n  const fpsInterval = 1000 / (fps || 30);\n  const [spriteTexture, setSpriteTexture] = React.useState(new THREE.Texture());\n  const totalFrames = React.useRef(0);\n  const [aspect, setAspect] = React.useState([1, 1, 1]);\n  const flipOffset = flipX ? -1 : 1;\n  const [displayAsSprite, setDisplayAsSprite] = React.useState(asSprite !== null && asSprite !== void 0 ? asSprite : true);\n  const pauseRef = React.useRef(pause);\n  const pos = React.useRef(offset);\n  const softEnd = React.useRef(false);\n  const frameBuffer = React.useRef([]);\n  const {\n    spriteObj,\n    loadJsonAndTexture\n  } = useSpriteLoader(null, null, animationNames, numberOfFrames);\n  //\n\n  function reset() {}\n  const state = React.useMemo(() => ({\n    current: pos.current,\n    offset: pos.current,\n    imageUrl: textureImageURL,\n    reset: reset,\n    hasEnded: false,\n    ref: fref\n  }), [textureImageURL, spriteDataset]);\n  React.useImperativeHandle(fref, () => ref.current, []);\n  React.useLayoutEffect(() => {\n    pos.current = offset;\n  }, [offset]);\n  const calculateAspectRatio = (width, height) => {\n    const aspectRatio = height / width;\n    if (spriteRef.current) {\n      spriteRef.current.scale.set(1, aspectRatio, 1);\n    }\n    return [1, aspectRatio, 1];\n  };\n\n  // initial loads\n  React.useEffect(() => {\n    if (spriteDataset) {\n      var _spriteDataset$sprite;\n      parseSpriteDataLite(spriteDataset == null || (_spriteDataset$sprite = spriteDataset.spriteTexture) == null ? void 0 : _spriteDataset$sprite.clone(), spriteDataset.spriteData);\n    } else {\n      loadJsonAndTexture(textureImageURL, textureDataURL);\n    }\n  }, [spriteDataset]);\n  React.useEffect(() => {\n    if (spriteObj) {\n      var _spriteObj$spriteText;\n      parseSpriteDataLite(spriteObj == null || (_spriteObj$spriteText = spriteObj.spriteTexture) == null ? void 0 : _spriteObj$spriteText.clone(), spriteObj == null ? void 0 : spriteObj.spriteData);\n    }\n  }, [spriteObj]);\n  React.useEffect(() => {\n    setDisplayAsSprite(asSprite !== null && asSprite !== void 0 ? asSprite : true);\n  }, [asSprite]);\n\n  // support backwards play\n  React.useEffect(() => {\n    state.hasEnded = false;\n    if (spriteData.current && playBackwards === true) {\n      currentFrame.current = spriteData.current.frames.length - 1;\n    } else {\n      currentFrame.current = 0;\n    }\n  }, [playBackwards]);\n  React.useLayoutEffect(() => {\n    modifySpritePosition();\n  }, [spriteTexture, flipX]);\n  React.useEffect(() => {\n    if (autoPlay) {\n      pauseRef.current = false;\n    }\n  }, [autoPlay]);\n  React.useEffect(() => {\n    if (currentFrameName.current !== frameName && frameName) {\n      currentFrame.current = 0;\n      currentFrameName.current = frameName;\n      state.hasEnded = false;\n      modifySpritePosition();\n      if (spriteData.current) {\n        const {\n          w,\n          h\n        } = getFirstItem(spriteData.current.frames).sourceSize;\n        const _aspect = calculateAspectRatio(w, h);\n        setAspect(_aspect);\n      }\n    }\n  }, [frameName]);\n\n  // lite version for pre-loaded assets\n  const parseSpriteDataLite = (textureData, frameData = null) => {\n    if (frameData === null) {\n      if (numberOfFrames) {\n        //get size from texture\n        const width = textureData.image.width;\n        const height = textureData.image.height;\n        totalFrames.current = numberOfFrames;\n        if (playBackwards) {\n          currentFrame.current = numberOfFrames - 1;\n        }\n        spriteData.current = {\n          frames: [],\n          meta: {\n            version: '1.0',\n            size: {\n              w: width,\n              h: height\n            },\n            scale: '1'\n          }\n        };\n        spriteData.current.frames = frameData;\n      }\n    } else {\n      spriteData.current = frameData;\n      totalFrames.current = spriteData.current.frames.length;\n      if (playBackwards) {\n        currentFrame.current = totalFrames.current - 1;\n      }\n      const {\n        w,\n        h\n      } = getFirstItem(spriteData.current.frames).sourceSize;\n      const aspect = calculateAspectRatio(w, h);\n      setAspect(aspect);\n      if (matRef.current) {\n        matRef.current.map = textureData;\n      }\n    }\n\n    // buffer for instanced\n    if (instanceItems) {\n      for (var i = 0; i < instanceItems.length; i++) {\n        const keys = Object.keys(spriteData.current.frames);\n        const randomKey = keys[Math.floor(Math.random() * keys.length)];\n        frameBuffer.current.push({\n          key: i,\n          frames: spriteData.current.frames,\n          selectedFrame: randomKey,\n          offset: {\n            x: 0,\n            y: 0\n          }\n        });\n      }\n    }\n    setSpriteTexture(textureData);\n  };\n\n  // modify the sprite material after json is parsed and state updated\n  const modifySpritePosition = () => {\n    if (!spriteData.current) return;\n    const {\n      meta: {\n        size: metaInfo\n      },\n      frames\n    } = spriteData.current;\n    const {\n      w: frameW,\n      h: frameH\n    } = Array.isArray(frames) ? frames[0].sourceSize : frameName ? frames[frameName] ? frames[frameName][0].sourceSize : {\n      w: 0,\n      h: 0\n    } : {\n      w: 0,\n      h: 0\n    };\n    matRef.current.map.wrapS = matRef.current.map.wrapT = THREE.RepeatWrapping;\n    matRef.current.map.center.set(0, 0);\n    matRef.current.map.repeat.set(1 * flipOffset / (metaInfo.w / frameW), 1 / (metaInfo.h / frameH));\n\n    //const framesH = (metaInfo.w - 1) / frameW\n    const framesV = (metaInfo.h - 1) / frameH;\n    const frameOffsetY = 1 / framesV;\n    matRef.current.map.offset.x = 0.0; //-matRef.current.map.repeat.x\n    matRef.current.map.offset.y = 1 - frameOffsetY;\n    if (onStart) onStart({\n      currentFrameName: frameName,\n      currentFrame: currentFrame.current\n    });\n  };\n\n  // run the animation on each frame\n  const runAnimation = () => {\n    //if (!frameName) return\n\n    const now = window.performance.now();\n    const diff = now - timerOffset.current;\n    const {\n      meta: {\n        size: metaInfo\n      },\n      frames\n    } = spriteData.current;\n    const {\n      w: frameW,\n      h: frameH\n    } = getFirstItem(frames).sourceSize;\n    const spriteFrames = Array.isArray(frames) ? frames : frameName ? frames[frameName] : [];\n    const _endFrame = endFrame || spriteFrames.length - 1;\n    var _offset = offset === undefined ? state.current : offset;\n\n    // conditionals to support backwards play\n    var endCondition = playBackwards ? currentFrame.current < 0 : currentFrame.current > _endFrame;\n    var onStartCondition = playBackwards ? currentFrame.current === _endFrame : currentFrame.current === 0;\n    var manualProgressEndCondition = playBackwards ? currentFrame.current < 0 : currentFrame.current >= _endFrame;\n    if (endCondition) {\n      currentFrame.current = loop ? startFrame !== null && startFrame !== void 0 ? startFrame : 0 : 0;\n      if (playBackwards) {\n        currentFrame.current = _endFrame;\n      }\n      if (loop) {\n        onLoopEnd == null || onLoopEnd({\n          currentFrameName: frameName,\n          currentFrame: currentFrame.current\n        });\n      } else {\n        onEnd == null || onEnd({\n          currentFrameName: frameName,\n          currentFrame: currentFrame.current\n        });\n        state.hasEnded = resetOnEnd ? false : true;\n        if (resetOnEnd) {\n          pauseRef.current = true;\n          //calculateFinalPosition(frameW, frameH, metaInfo, spriteFrames)\n        }\n      }\n\n      if (!loop) return;\n    } else if (onStartCondition) {\n      onStart == null || onStart({\n        currentFrameName: frameName,\n        currentFrame: currentFrame.current\n      });\n    }\n\n    // for manual update\n    if (_offset !== undefined && manualProgressEndCondition) {\n      if (softEnd.current === false) {\n        onEnd == null || onEnd({\n          currentFrameName: frameName,\n          currentFrame: currentFrame.current\n        });\n        softEnd.current = true;\n      }\n    } else {\n      // same for start?\n      softEnd.current = false;\n    }\n\n    // clock to limit fps\n    if (diff <= fpsInterval) return;\n    timerOffset.current = now - diff % fpsInterval;\n    calculateFinalPosition(frameW, frameH, metaInfo, spriteFrames);\n  };\n  const calculateFinalPosition = (frameW, frameH, metaInfo, spriteFrames) => {\n    // get the manual update offset to find the next frame\n    var _offset = offset === undefined ? state.current : offset;\n    const targetFrame = currentFrame.current;\n    let finalValX = 0;\n    let finalValY = 0;\n    calculateAspectRatio(frameW, frameH);\n    const framesH = (metaInfo.w - 1) / frameW;\n    const framesV = (metaInfo.h - 1) / frameH;\n    if (!spriteFrames[targetFrame]) {\n      return;\n    }\n    const {\n      frame: {\n        x: frameX,\n        y: frameY\n      },\n      sourceSize: {\n        w: originalSizeX,\n        h: originalSizeY\n      }\n    } = spriteFrames[targetFrame];\n    const frameOffsetX = 1 / framesH;\n    const frameOffsetY = 1 / framesV;\n    finalValX = flipOffset > 0 ? frameOffsetX * (frameX / originalSizeX) : frameOffsetX * (frameX / originalSizeX) - matRef.current.map.repeat.x;\n    finalValY = Math.abs(1 - frameOffsetY) - frameOffsetY * (frameY / originalSizeY);\n    matRef.current.map.offset.x = finalValX;\n    matRef.current.map.offset.y = finalValY;\n\n    // if manual update is active\n    if (_offset !== undefined && _offset !== null) {\n      // Calculate the frame index, based on offset given from the provider\n      let frameIndex = Math.floor(_offset * spriteFrames.length);\n\n      // Ensure the frame index is within the valid range\n      frameIndex = Math.max(0, Math.min(frameIndex, spriteFrames.length - 1));\n      if (isNaN(frameIndex)) {\n        console.log('nan frame detected');\n        frameIndex = 0; //fallback\n      }\n\n      currentFrame.current = frameIndex;\n    } else {\n      // auto update\n      if (playBackwards) {\n        currentFrame.current -= 1;\n      } else {\n        currentFrame.current += 1;\n      }\n    }\n  };\n\n  // *** Warning! It runs on every frame! ***\n  useFrame((_state, _delta) => {\n    var _spriteData$current, _matRef$current;\n    if (!((_spriteData$current = spriteData.current) != null && _spriteData$current.frames) || !((_matRef$current = matRef.current) != null && _matRef$current.map)) {\n      return;\n    }\n    if (pauseRef.current) {\n      return;\n    }\n    if (!state.hasEnded && (autoPlay || play)) {\n      runAnimation();\n      onFrame && onFrame({\n        currentFrameName: currentFrameName.current,\n        currentFrame: currentFrame.current\n      });\n    }\n  });\n\n  // utils\n  const getFirstItem = param => {\n    if (Array.isArray(param)) {\n      return param[0];\n    } else if (typeof param === 'object' && param !== null) {\n      const keys = Object.keys(param);\n      return frameName ? param[frameName][0] : param[keys[0]][0];\n    } else {\n      return {\n        w: 0,\n        h: 0\n      };\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"group\", _extends({}, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(context.Provider, {\n    value: state\n  }, /*#__PURE__*/React.createElement(React.Suspense, {\n    fallback: null\n  }, displayAsSprite && /*#__PURE__*/React.createElement(\"sprite\", {\n    ref: spriteRef,\n    scale: aspect\n  }, /*#__PURE__*/React.createElement(\"spriteMaterial\", {\n    premultipliedAlpha: false,\n    toneMapped: false,\n    ref: matRef,\n    map: spriteTexture,\n    transparent: true,\n    alphaTest: alphaTest !== null && alphaTest !== void 0 ? alphaTest : 0.0\n  })), !displayAsSprite && /*#__PURE__*/React.createElement(Instances, {\n    limit: maxItems // Optional: max amount of items (for calculating buffer size)\n  }, /*#__PURE__*/React.createElement(\"planeGeometry\", {\n    args: [1, 1]\n  }), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    premultipliedAlpha: false,\n    toneMapped: false,\n    side: THREE.DoubleSide,\n    ref: matRef,\n    map: spriteTexture,\n    transparent: true,\n    alphaTest: alphaTest !== null && alphaTest !== void 0 ? alphaTest : 0.0\n  }), (instanceItems !== null && instanceItems !== void 0 ? instanceItems : [0]).map((item, index) => {\n    return /*#__PURE__*/React.createElement(Instance, {\n      key: index,\n      ref: spriteRef,\n      position: item,\n      scale: aspect\n    });\n  }))), children));\n});\n\nexport { SpriteAnimator, useSpriteAnimator };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}